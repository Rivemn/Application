{
    "pipes": [
        {
            "name": "CapacityLabelPipe",
            "id": "pipe-CapacityLabelPipe-7cfceb1235a443a6b7dad35b9d257a7cde85a99420e6a06d579eb95ed175741cb9db2092a21be9ef46fa8de8a341e403a91dd589cb838084bebc1967c6253640",
            "file": "src/app/booking/capacity-label.pipe.ts",
            "type": "pipe",
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "properties": [],
            "methods": [
                {
                    "name": "transform",
                    "args": [
                        {
                            "name": "availabilityId",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<string>",
                    "typeParameters": [],
                    "line": 14,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "availabilityId",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "standalone": true,
            "ngname": "capacityLabel",
            "sourceCode": "import { Pipe, PipeTransform } from '@angular/core';\r\nimport { Store } from '@ngrx/store';\r\nimport { Observable, map } from 'rxjs';\r\nimport { selectAvailabilities } from '../store/booking/booking.selectors';\r\n\r\n@Pipe({\r\n  name: 'capacityLabel',\r\n  standalone: true,\r\n})\r\nexport class CapacityLabelPipe implements PipeTransform {\r\n  constructor(private store: Store) {}\r\n\r\n  transform(availabilityId: string): Observable<string> {\r\n    return this.store.select(selectAvailabilities).pipe(\r\n      map((availabilities) => {\r\n        const availability = availabilities.find(\r\n          (a) => a.id === availabilityId\r\n        );\r\n        return availability\r\n          ? `${availability.capacityOption} ${\r\n              availability.capacityOption === 1 ? 'person' : 'people'\r\n            }`\r\n          : 'Unknown capacity';\r\n      })\r\n    );\r\n  }\r\n}\r\n"
        }
    ],
    "interfaces": [
        {
            "name": "Amenity",
            "id": "interface-Amenity-40b1cb667a0586453b0960b38bd7cf6d4d8909f6fd9f72d0fc708fb81417378638db767871d31c6387236f4a7048e811646d5ff72210c2d0701a03537c060ad0",
            "file": "src/app/contracts/Amenity.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "export interface Amenity {\r\n  id: number;\r\n  name: string;\r\n}\r\n",
            "properties": [
                {
                    "name": "id",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 2
                },
                {
                    "name": "name",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 3
                }
            ],
            "indexSignatures": [],
            "kind": 171,
            "methods": [],
            "extends": []
        },
        {
            "name": "AmenityState",
            "id": "interface-AmenityState-75b6136c0d1ff9efb8f9cb7caf03d34c90895b028c26a79b5f9383f2a9a27df03fa1e350eaa3334c87a4be92fbf02f2ad328e40a671b34c33cdb28a9df401361",
            "file": "src/app/store/amenity/amenity.state.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { Amenity } from '../../contracts/Amenity';\r\n\r\nexport interface AmenityState {\r\n  amenities: (Amenity & { workspaceId: string })[];\r\n  loading: boolean;\r\n  error: string | null;\r\n}\r\n",
            "properties": [
                {
                    "name": "amenities",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "()[]",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 4
                },
                {
                    "name": "error",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string | null",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 6
                },
                {
                    "name": "loading",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 5
                }
            ],
            "indexSignatures": [],
            "kind": 171,
            "methods": [],
            "extends": []
        },
        {
            "name": "Availability",
            "id": "interface-Availability-0fb3af55d2170632f8089d983e4b82e836b5274193e26342dda56bae8fc67880e55377de9e224340b816f610ca37e89b44e21f99df077e946d53493523112695",
            "file": "src/app/contracts/Availability.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "export interface Availability {\r\n  id: string;\r\n  workspaceId: string;\r\n  quantity: number;\r\n  capacityOption: number;\r\n}\r\n",
            "properties": [
                {
                    "name": "capacityOption",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 5
                },
                {
                    "name": "id",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 2
                },
                {
                    "name": "quantity",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 4
                },
                {
                    "name": "workspaceId",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 3
                }
            ],
            "indexSignatures": [],
            "kind": 171,
            "methods": [],
            "extends": []
        },
        {
            "name": "AvailabilityState",
            "id": "interface-AvailabilityState-29506376ebd18b06bed8393b889f379198412df043854c1384571bf16914cdfa774fc6eca5e2598134a1125184c2245834ae57131654dd730159187fedb6bfd4",
            "file": "src/app/store/availability/availability.state.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { Availability } from '../../contracts/Availability';\r\n\r\nexport interface AvailabilityState {\r\n  availabilities: Availability[];\r\n  availabilityById: { [id: string]: Availability };\r\n  loading: boolean;\r\n  error: string | null;\r\n}\r\n",
            "properties": [
                {
                    "name": "availabilities",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Availability[]",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 4
                },
                {
                    "name": "availabilityById",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "literal type",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 5
                },
                {
                    "name": "error",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string | null",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 7
                },
                {
                    "name": "loading",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 6
                }
            ],
            "indexSignatures": [],
            "kind": 171,
            "methods": [],
            "extends": []
        },
        {
            "name": "Booking",
            "id": "interface-Booking-02d63dca3f6f12ca7723c3c6decf3d78d1c049752441eb179666923944b55966716fad32ae9dbad642bb64af048b284180dfc5b9f00a1c6d758d0da3d8ebcb2a",
            "file": "src/app/contracts/Booking.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "export interface Booking {\r\n  id: string;\r\n  userId: string;\r\n  workspaceId: string;\r\n  email: string;\r\n  availabilityId: string;\r\n  start: string;\r\n  end: string;\r\n  status: string;\r\n  createdAt: string;\r\n}\r\n",
            "properties": [
                {
                    "name": "availabilityId",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 6
                },
                {
                    "name": "createdAt",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 10
                },
                {
                    "name": "email",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 5
                },
                {
                    "name": "end",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 8
                },
                {
                    "name": "id",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 2
                },
                {
                    "name": "start",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 7
                },
                {
                    "name": "status",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 9
                },
                {
                    "name": "userId",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 3
                },
                {
                    "name": "workspaceId",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 4
                }
            ],
            "indexSignatures": [],
            "kind": 171,
            "methods": [],
            "extends": []
        },
        {
            "name": "BookingDetails",
            "id": "interface-BookingDetails-bc3123618cc4b0873e4dc9c62993d92660f76ad5d64828b71189cc7e0643900051f407f8c1c3bc8ca0a25a37a585689a97b78b179c4a6ec171915a829a8b443b",
            "file": "src/app/booking/my-bookings/my-bookings.component.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { Component, OnInit } from '@angular/core';\r\nimport { Router, RouterModule } from '@angular/router';\r\nimport { Booking } from '../../contracts/Booking';\r\nimport { Workspace } from '../../contracts/Workspace';\r\nimport { combineLatest, Observable } from 'rxjs';\r\nimport { map } from 'rxjs/operators';\r\nimport { Store } from '@ngrx/store';\r\nimport * as BookingActions from '../../store/booking/booking.actions';\r\nimport * as WorkspaceActions from '../../store/workspace/workspace.actions';\r\nimport { selectAllBookings } from '../../store/booking/booking.selectors';\r\nimport { selectWorkspaceState } from '../../store/workspace/workspaces.selectors';\r\n\r\nexport interface BookingDetails {\r\n  booking: Booking;\r\n  workspace?: Workspace;\r\n}\r\n\r\n@Component({\r\n  selector: 'app-my-bookings',\r\n  standalone: false,\r\n  templateUrl: './my-bookings.component.html',\r\n  styleUrls: ['./my-bookings.component.scss'],\r\n})\r\nexport class MyBookingsComponent implements OnInit {\r\n  bookings$: Observable<BookingDetails[]>;\r\n\r\n  constructor(private router: Router, private store: Store) {\r\n    const bookings$ = this.store.select(selectAllBookings);\r\n    const workspaceState$ = this.store.select(selectWorkspaceState);\r\n\r\n    this.bookings$ = combineLatest([bookings$, workspaceState$]).pipe(\r\n      map(([bookings, workspaceState]) =>\r\n        bookings.map((booking) => {\r\n          const workspace = workspaceState.workspaces.find(\r\n            (w) => w.id === booking.workspaceId\r\n          );\r\n          return { booking, workspace };\r\n        })\r\n      )\r\n    );\r\n  }\r\n\r\n  ngOnInit(): void {\r\n    const email = localStorage.getItem('email');\r\n    if (email) {\r\n      this.store.dispatch(BookingActions.loadBookingsByUserEmail({ email }));\r\n\r\n      this.store.select(selectAllBookings).subscribe((bookings) => {\r\n        const workspaceIds = [...new Set(bookings.map((b) => b.workspaceId))];\r\n        workspaceIds.forEach((id) => {\r\n          this.store.dispatch(WorkspaceActions.loadWorkspaceById({ id }));\r\n        });\r\n      });\r\n\r\n      this.bookings$.subscribe((bookingDetails) => {\r\n        bookingDetails.forEach((item) => {\r\n          if (item.workspace) {\r\n            console.log('Workspace Name:', item.workspace.name);\r\n            console.log('Workspace Model:', item.workspace);\r\n          } else {\r\n            console.log('Workspace not loaded for booking:', item.booking.id);\r\n          }\r\n        });\r\n      });\r\n    } else {\r\n      console.error('No email found in localStorage');\r\n      this.router.navigate(['/login']);\r\n    }\r\n  }\r\n\r\n  goToCoworking() {\r\n    this.router.navigate(['/coworking']);\r\n  }\r\n\r\n  deleteBooking(bookingId: string) {\r\n    this.store.dispatch(BookingActions.deleteBooking({ id: bookingId }));\r\n  }\r\n\r\n  calculateDays(start: string | Date, end: string | Date): number {\r\n    const startDate = new Date(start);\r\n    const endDate = new Date(end);\r\n    if (isNaN(startDate.getTime()) || isNaN(endDate.getTime())) {\r\n      console.error('Invalid date:', start, end);\r\n      return 0;\r\n    }\r\n    const diffTime = Math.abs(endDate.getTime() - startDate.getTime());\r\n    return Math.ceil(diffTime / (1000 * 60 * 60 * 24));\r\n  }\r\n\r\n  trackById(index: number, item: BookingDetails): string {\r\n    return item.booking.id;\r\n  }\r\n}\r\n",
            "properties": [
                {
                    "name": "booking",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Booking",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 14
                },
                {
                    "name": "workspace",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Workspace",
                    "indexKey": "",
                    "optional": true,
                    "description": "",
                    "line": 15
                }
            ],
            "indexSignatures": [],
            "kind": 171,
            "methods": [],
            "extends": []
        },
        {
            "name": "BookingRequest",
            "id": "interface-BookingRequest-0388c60583e86c6a90e62d8b54861e8d3794b7254941c04a3f689b8bf416c020b80af2c25c78d191f099c86a103a7a35a9bfe96ef381786bd0c92766ccc41995",
            "file": "src/app/contracts/BookingRequest.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "export interface BookingRequest {\r\n  fullName: string;\r\n  email: string;\r\n  workspaceId: string;\r\n  start: string;\r\n  end: string;\r\n  availabilityId: string;\r\n}\r\n",
            "properties": [
                {
                    "name": "availabilityId",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 7
                },
                {
                    "name": "email",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 3
                },
                {
                    "name": "end",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 6
                },
                {
                    "name": "fullName",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 2
                },
                {
                    "name": "start",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 5
                },
                {
                    "name": "workspaceId",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 4
                }
            ],
            "indexSignatures": [],
            "kind": 171,
            "methods": [],
            "extends": []
        },
        {
            "name": "BookingState",
            "id": "interface-BookingState-3c6ed0ad1bdb9d888bcb20dcd9840a26b8fd855a8d567f69d44735040d78399de5c2a59f967cd5efec69bf99110f8ba621ab19c30fae3ba5b345195f605ff147",
            "file": "src/app/store/booking/booking.state.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { Booking } from '../../contracts/Booking';\r\nimport { Workspace } from '../../contracts/Workspace';\r\nimport { Availability } from '../../contracts/Availability';\r\n\r\nexport interface BookingState {\r\n  bookings: Booking[];\r\n  selectedBooking: Booking | null;\r\n  bookingId: string | null;\r\n  workspaces: Workspace[];\r\n  availabilities: Availability[];\r\n  loading: boolean;\r\n  error: string | null;\r\n}\r\n",
            "properties": [
                {
                    "name": "availabilities",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Availability[]",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 10
                },
                {
                    "name": "bookingId",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string | null",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 8
                },
                {
                    "name": "bookings",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Booking[]",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 6
                },
                {
                    "name": "error",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string | null",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 12
                },
                {
                    "name": "loading",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 11
                },
                {
                    "name": "selectedBooking",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Booking | null",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 7
                },
                {
                    "name": "workspaces",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Workspace[]",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 9
                }
            ],
            "indexSignatures": [],
            "kind": 171,
            "methods": [],
            "extends": []
        },
        {
            "name": "Coworking",
            "id": "interface-Coworking-31264e589516a27c8784cafbcff4df591baa8e66eb5c642cdbf3190dc1a4842f7b8bf5d123b9880b656762a37aeaac5b7176723aabbb3faf198a3e46d4ebab7a",
            "file": "src/app/contracts/Coworking.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "export interface Coworking {\r\n  id: string;\r\n  name: string;\r\n  description: string;\r\n  address: string;\r\n}\r\n",
            "properties": [
                {
                    "name": "address",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 5
                },
                {
                    "name": "description",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 4
                },
                {
                    "name": "id",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 2
                },
                {
                    "name": "name",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 3
                }
            ],
            "indexSignatures": [],
            "kind": 171,
            "methods": [],
            "extends": []
        },
        {
            "name": "CoworkingState",
            "id": "interface-CoworkingState-a519c77f0950deeaab19eb7244cb1ed75d2a4c07dab1838b58a1f31bb180c12a5a2e300dd621431877b0ce7fdbc8a51dfa268fcd1968b115bcd0495a5556da27",
            "file": "src/app/store/coworking/coworking.state.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { Coworking } from '../../contracts/Coworking';\r\n\r\nexport interface CoworkingState {\r\n  coworkings: Coworking[];\r\n  selectedCoworking: Coworking | null;\r\n  loading: boolean;\r\n  error: string | null;\r\n}\r\n\r\nexport const initialState: CoworkingState = {\r\n  coworkings: [],\r\n  selectedCoworking: null,\r\n  loading: false,\r\n  error: null,\r\n};\r\n",
            "properties": [
                {
                    "name": "coworkings",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Coworking[]",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 4
                },
                {
                    "name": "error",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string | null",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 7
                },
                {
                    "name": "loading",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 6
                },
                {
                    "name": "selectedCoworking",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Coworking | null",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 5
                }
            ],
            "indexSignatures": [],
            "kind": 171,
            "methods": [],
            "extends": []
        },
        {
            "name": "ExtendedWorkspace",
            "id": "interface-ExtendedWorkspace-ad1c69c7b630d070f5cd5f946c1d0388dfe8a3b4e6b1516d86395865e1b763a9c9a54d4c423e3fac3b62675c00179812958b50db4fcbb04969e10bbfa5119aff",
            "file": "src/app/coworking/coworking-details/coworking-details.component.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { Component, OnInit } from '@angular/core';\r\nimport { Store } from '@ngrx/store';\r\nimport { Observable, combineLatest, map } from 'rxjs';\r\nimport { Workspace } from '../../contracts/Workspace';\r\nimport { Amenity } from '../../contracts/Amenity';\r\nimport { loadAmenitiesByWorkspace } from '../../store/amenity/amenity.actions';\r\nimport {\r\n  selectAmenityLoading,\r\n  selectAmenityError,\r\n  selectAllAmenities,\r\n} from '../../store/amenity/amenity.selectors';\r\nimport { loadAvailabilitiesByWorkspace } from '../../store/availability/availability.actions';\r\nimport {\r\n  selectAvailabilityLoading,\r\n  selectAvailabilityError,\r\n  selectAllAvailabilities,\r\n} from '../../store/availability/availability.selectors';\r\nimport { loadPhotosByWorkspace } from '../../store/photo/photo.actions';\r\nimport {\r\n  selectPhotoLoading,\r\n  selectPhotoError,\r\n  selectAllPhotos,\r\n} from '../../store/photo/photo.selectors';\r\nimport { loadWorkspacesByCoworking } from '../../store/workspace/workspace.actions';\r\nimport {\r\n  selectWorkspacesByCoworkingLoading,\r\n  selectWorkspacesByCoworkingError,\r\n  selectWorkspacesByCoworking,\r\n} from '../../store/workspace/workspaces.selectors';\r\nimport { Availability } from '../../contracts/Availability';\r\nimport { ActivatedRoute } from '@angular/router';\r\n\r\ninterface ExtendedWorkspace extends Workspace {\r\n  mainPhoto: string;\r\n  photos: string[];\r\n  amenities: Amenity[];\r\n  availabilities: Availability[];\r\n  isBooked: boolean;\r\n  bookingInfo: string;\r\n}\r\n\r\n@Component({\r\n  selector: 'app-coworking-details',\r\n  standalone: false,\r\n  templateUrl: './coworking-details.component.html',\r\n  styleUrls: ['./coworking-details.component.scss'],\r\n})\r\nexport class CoworkingDetailsComponent implements OnInit {\r\n  coworkingId!: string;\r\n\r\n  workspaces$!: Observable<ExtendedWorkspace[]>;\r\n  isLoading$!: Observable<boolean>;\r\n  workspaceLoading$!: Observable<boolean>;\r\n  amenityLoading$!: Observable<boolean>;\r\n  photoLoading$!: Observable<boolean>;\r\n  availabilityLoading$!: Observable<boolean>;\r\n  workspaceError$!: Observable<string | null>;\r\n  amenityError$!: Observable<string | null>;\r\n  photoError$!: Observable<string | null>;\r\n  availabilityError$!: Observable<string | null>;\r\n\r\n  constructor(private store: Store, private route: ActivatedRoute) {}\r\n\r\n  ngOnInit(): void {\r\n    this.route.paramMap.subscribe((params) => {\r\n      this.coworkingId = params.get('id') || '';\r\n      this.store.dispatch(\r\n        loadWorkspacesByCoworking({ coworkingId: this.coworkingId })\r\n      );\r\n    });\r\n\r\n    this.workspaceLoading$ = this.store.select(\r\n      selectWorkspacesByCoworkingLoading\r\n    );\r\n    this.amenityLoading$ = this.store.select(selectAmenityLoading);\r\n    this.photoLoading$ = this.store.select(selectPhotoLoading);\r\n    this.availabilityLoading$ = this.store.select(selectAvailabilityLoading);\r\n    this.workspaceError$ = this.store.select(selectWorkspacesByCoworkingError);\r\n    this.amenityError$ = this.store.select(selectAmenityError);\r\n    this.photoError$ = this.store.select(selectPhotoError);\r\n    this.availabilityError$ = this.store.select(selectAvailabilityError);\r\n\r\n    this.isLoading$ = combineLatest([\r\n      this.workspaceLoading$,\r\n      this.amenityLoading$,\r\n      this.photoLoading$,\r\n      this.availabilityLoading$,\r\n    ]).pipe(map(([w, a, p, av]) => w || a || p || av));\r\n\r\n    const workspaces$ = this.store\r\n      .select(selectWorkspacesByCoworking)\r\n      .pipe(map((w) => w ?? []));\r\n\r\n    // Загружаем связанные сущности после получения рабочих пространств\r\n    workspaces$.subscribe((workspaces) => {\r\n      workspaces.forEach((workspace) => {\r\n        this.store.dispatch(\r\n          loadAmenitiesByWorkspace({ workspaceId: workspace.id })\r\n        );\r\n        this.store.dispatch(\r\n          loadPhotosByWorkspace({ workspaceId: workspace.id })\r\n        );\r\n        this.store.dispatch(\r\n          loadAvailabilitiesByWorkspace({ workspaceId: workspace.id })\r\n        );\r\n      });\r\n    });\r\n\r\n    this.workspaces$ = combineLatest([\r\n      workspaces$,\r\n      this.store.select(selectAllAmenities).pipe(map((a) => a ?? [])),\r\n      this.store.select(selectAllPhotos).pipe(map((p) => p ?? [])),\r\n      this.store.select(selectAllAvailabilities).pipe(map((a) => a ?? [])),\r\n    ]).pipe(\r\n      map(([workspaces, amenities, photos, availabilities]) =>\r\n        workspaces.map((workspace) => {\r\n          const workspaceAmenities = amenities.filter(\r\n            (a) => a.workspaceId === workspace.id\r\n          );\r\n          const workspacePhotos = photos.filter(\r\n            (p) => p.workspaceId === workspace.id\r\n          );\r\n          const workspaceAvailabilities = availabilities.filter(\r\n            (a) => a.workspaceId === workspace.id\r\n          );\r\n\r\n          const mainPhoto = workspacePhotos[0]?.url ?? 'default-main.jpg';\r\n          const otherPhotos = workspacePhotos.slice(1, 5).map((p) => p.url);\r\n\r\n          const currentDate = new Date('2025-06-04T20:10:00+03:00');\r\n          const isBooked = workspaceAvailabilities.some(\r\n            (a) =>\r\n              a.capacityOption === 2 &&\r\n              new Date('2025-05-18') <= currentDate &&\r\n              currentDate <= new Date('2025-05-23')\r\n          );\r\n\r\n          const bookingInfo = isBooked\r\n            ? 'Room for 2 people May 18, 2025 to May 23, 2025'\r\n            : '';\r\n\r\n          return {\r\n            ...workspace,\r\n            mainPhoto,\r\n            photos: otherPhotos,\r\n            amenities: workspaceAmenities,\r\n            availabilities: workspaceAvailabilities,\r\n            isBooked,\r\n            bookingInfo,\r\n          };\r\n        })\r\n      )\r\n    );\r\n  }\r\n\r\n  workspaceAvailabilities(workspace: ExtendedWorkspace): any {\r\n    if (workspace.availabilityUnit === 'desk') {\r\n      return workspace.availabilities.reduce((sum, a) => sum + a.quantity, 0);\r\n    } else if (workspace.availabilityUnit === 'room') {\r\n      return workspace.availabilities.sort(\r\n        (a, b) => a.capacityOption - b.capacityOption\r\n      );\r\n    }\r\n    return [];\r\n  }\r\n}\r\n",
            "properties": [
                {
                    "name": "amenities",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Amenity[]",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 36
                },
                {
                    "name": "availabilities",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Availability[]",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 37
                },
                {
                    "name": "bookingInfo",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 39
                },
                {
                    "name": "isBooked",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 38
                },
                {
                    "name": "mainPhoto",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 34
                },
                {
                    "name": "photos",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string[]",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 35
                }
            ],
            "indexSignatures": [],
            "kind": 171,
            "methods": [],
            "extends": [
                "Workspace"
            ]
        },
        {
            "name": "Photo",
            "id": "interface-Photo-918ad1932bc88391313e23e84a36a1fe699a326181546c2da8eefff4407f8ef1c71eb678644c856a7b00facee786e77da1ba7cf841d34dc8a791fece49d4a600",
            "file": "src/app/contracts/Photo.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "export interface Photo {\r\n  id: number;\r\n  url: string;\r\n  workspaceId: string;\r\n  coworkingId: string;\r\n}\r\n",
            "properties": [
                {
                    "name": "coworkingId",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 5
                },
                {
                    "name": "id",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 2
                },
                {
                    "name": "url",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 3
                },
                {
                    "name": "workspaceId",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 4
                }
            ],
            "indexSignatures": [],
            "kind": 171,
            "methods": [],
            "extends": []
        },
        {
            "name": "PhotoState",
            "id": "interface-PhotoState-ccd48bd0529f81592999f9fb38826c69c86ba7f68508dda98e399cf4f98a33d2d814befe2cf11b21e953f6032df1e3d11768d54c5721efd219f3c6ee170c2084",
            "file": "src/app/store/photo/photo.state.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { Photo } from '../../contracts/Photo';\r\n\r\nexport interface PhotoState {\r\n  photos: Photo[];\r\n  loading: boolean;\r\n  error: string | null;\r\n}\r\n",
            "properties": [
                {
                    "name": "error",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string | null",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 6
                },
                {
                    "name": "loading",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 5
                },
                {
                    "name": "photos",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Photo[]",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 4
                }
            ],
            "indexSignatures": [],
            "kind": 171,
            "methods": [],
            "extends": []
        },
        {
            "name": "Workspace",
            "id": "interface-Workspace-708ab9b44802807f5fb1d479792944d38430219e01e4576663f819adaeca6342068ea47cdce31aa096b4e53dbe37c29b2b611810bac207754dc396edb208b778",
            "file": "src/app/contracts/Workspace.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "export interface Workspace {\r\n  id: string;\r\n  name: string;\r\n  description: string;\r\n  availabilityUnit: string;\r\n  coworkingId: string;\r\n}\r\n",
            "properties": [
                {
                    "name": "availabilityUnit",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 5
                },
                {
                    "name": "coworkingId",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 6
                },
                {
                    "name": "description",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 4
                },
                {
                    "name": "id",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 2
                },
                {
                    "name": "name",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 3
                }
            ],
            "indexSignatures": [],
            "kind": 171,
            "methods": [],
            "extends": []
        },
        {
            "name": "WorkspaceRequest",
            "id": "interface-WorkspaceRequest-c964d7213ccb3b58b03ca164749fc47c5b4220625f66ab2e39b5c1283d1f5abd3300c4a0b26510a0210e5c754fafe917d8140187287f64227458142ad737717a",
            "file": "src/app/contracts/WorkspaceRequest.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "export interface WorkspaceRequest {\r\n  name: string;\r\n  description: string;\r\n  availabilityUnit: string;\r\n}\r\n",
            "properties": [
                {
                    "name": "availabilityUnit",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 4
                },
                {
                    "name": "description",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 3
                },
                {
                    "name": "name",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 2
                }
            ],
            "indexSignatures": [],
            "kind": 171,
            "methods": [],
            "extends": []
        },
        {
            "name": "WorkspaceState",
            "id": "interface-WorkspaceState-45c607c8d40dc829427b48a3e2083865a17c92a8a90e154c27b870ff3c588f88754d06e3e931a6c2fe94479240916367567bf7d75c82614a25fa1741d4c5ea9e",
            "file": "src/app/store/workspace/workspace.state.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { Workspace } from '../../contracts/Workspace';\r\n\r\nexport interface WorkspaceState {\r\n  workspaces: Workspace[];\r\n  selectedWorkspace: Workspace | null;\r\n  loading: boolean;\r\n  error: string | null;\r\n}\r\n\r\nexport const initialState: WorkspaceState = {\r\n  workspaces: [],\r\n  selectedWorkspace: null,\r\n  loading: false,\r\n  error: null,\r\n};\r\n",
            "properties": [
                {
                    "name": "error",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string | null",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 7
                },
                {
                    "name": "loading",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 6
                },
                {
                    "name": "selectedWorkspace",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Workspace | null",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 5
                },
                {
                    "name": "workspaces",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Workspace[]",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 4
                }
            ],
            "indexSignatures": [],
            "kind": 171,
            "methods": [],
            "extends": []
        }
    ],
    "injectables": [
        {
            "name": "AmenityEffects",
            "id": "injectable-AmenityEffects-bd827ad90e521f0f489c05cccfe17cc766d27b98b2a248786a1e19321f9e3c3986ae8b3b7087b2a532b35b78ff598253acb15f6509aecc16f6483d14aec12655",
            "file": "src/app/store/amenity/amenity.effects.ts",
            "properties": [
                {
                    "name": "loadAmenitiesByWorkspace$",
                    "defaultValue": "createEffect(() =>\r\n    this.actions$.pipe(\r\n      ofType(loadAmenitiesByWorkspace),\r\n      mergeMap(({ workspaceId }) =>\r\n        this.workspaceAmenityService\r\n          .getAmenitiesByWorkspaceId(workspaceId)\r\n          .pipe(\r\n            map((amenities) =>\r\n              loadAmenitiesByWorkspaceSuccess({ amenities, workspaceId })\r\n            ),\r\n            catchError((error) =>\r\n              of(loadAmenitiesByWorkspaceFailure({ error: error.message }))\r\n            )\r\n          )\r\n      )\r\n    )\r\n  )",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 20
                }
            ],
            "methods": [],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { Injectable } from '@angular/core';\r\nimport { Actions, createEffect, ofType } from '@ngrx/effects';\r\nimport { of } from 'rxjs';\r\nimport { catchError, map, mergeMap } from 'rxjs/operators';\r\n\r\nimport {\r\n  loadAmenitiesByWorkspace,\r\n  loadAmenitiesByWorkspaceSuccess,\r\n  loadAmenitiesByWorkspaceFailure,\r\n} from './amenity.actions';\r\nimport { WorkspaceAmenityService } from '../../services/workspaceAmenity.service';\r\n\r\n@Injectable({ providedIn: 'root' })\r\nexport class AmenityEffects {\r\n  constructor(\r\n    private actions$: Actions,\r\n    private workspaceAmenityService: WorkspaceAmenityService\r\n  ) {}\r\n\r\n  loadAmenitiesByWorkspace$ = createEffect(() =>\r\n    this.actions$.pipe(\r\n      ofType(loadAmenitiesByWorkspace),\r\n      mergeMap(({ workspaceId }) =>\r\n        this.workspaceAmenityService\r\n          .getAmenitiesByWorkspaceId(workspaceId)\r\n          .pipe(\r\n            map((amenities) =>\r\n              loadAmenitiesByWorkspaceSuccess({ amenities, workspaceId })\r\n            ),\r\n            catchError((error) =>\r\n              of(loadAmenitiesByWorkspaceFailure({ error: error.message }))\r\n            )\r\n          )\r\n      )\r\n    )\r\n  );\r\n}\r\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "actions$",
                        "type": "Actions",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "workspaceAmenityService",
                        "type": "WorkspaceAmenityService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 14,
                "jsdoctags": [
                    {
                        "name": "actions$",
                        "type": "Actions",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "workspaceAmenityService",
                        "type": "WorkspaceAmenityService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "extends": [],
            "type": "injectable"
        },
        {
            "name": "AvailabilityEffects",
            "id": "injectable-AvailabilityEffects-c4cacdc2a80b182a1d6548d73f0c623072a7a91fb6837ffa29d53db201736106ed5d97d6421f30f5cf3c4cf7cf2e35f1582a5a3035a01e639c7cb9799ab30f02",
            "file": "src/app/store/availability/availability.effects.ts",
            "properties": [
                {
                    "name": "loadAvailabilitiesByWorkspace$",
                    "defaultValue": "createEffect(() =>\r\n    this.actions$.pipe(\r\n      ofType(loadAvailabilitiesByWorkspace),\r\n      mergeMap(({ workspaceId }) =>\r\n        this.availabilityService.getByWorkspaceId(workspaceId).pipe(\r\n          map((availabilities) =>\r\n            loadAvailabilitiesByWorkspaceSuccess({ availabilities })\r\n          ),\r\n          catchError((error) =>\r\n            of(loadAvailabilitiesByWorkspaceFailure({ error: error.message }))\r\n          )\r\n        )\r\n      )\r\n    )\r\n  )",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 24
                },
                {
                    "name": "loadAvailabilityById$",
                    "defaultValue": "createEffect(() =>\r\n    this.actions$.pipe(\r\n      ofType(loadAvailabilityById),\r\n      switchMap(({ id }) =>\r\n        this.availabilityService.getById(id).pipe(\r\n          map((availability) => loadAvailabilityByIdSuccess({ availability })),\r\n          catchError((error) =>\r\n            of(\r\n              loadAvailabilityByIdFailure({\r\n                error: error.message,\r\n              })\r\n            )\r\n          )\r\n        )\r\n      )\r\n    )\r\n  )",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 39
                }
            ],
            "methods": [],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { Injectable } from '@angular/core';\r\nimport { Actions, createEffect, ofType } from '@ngrx/effects';\r\nimport { of } from 'rxjs';\r\nimport { catchError, map, mergeMap, switchMap } from 'rxjs/operators';\r\n\r\nimport {\r\n  loadAvailabilitiesByWorkspace,\r\n  loadAvailabilitiesByWorkspaceSuccess,\r\n  loadAvailabilitiesByWorkspaceFailure,\r\n  loadAvailabilityById,\r\n  loadAvailabilityByIdSuccess,\r\n  loadAvailabilityByIdFailure,\r\n} from './availability.actions';\r\nimport { AvailabilityService } from '../../services/availability.service';\r\n\r\n@Injectable({ providedIn: 'root' })\r\nexport class AvailabilityEffects {\r\n  constructor(\r\n    private actions$: Actions,\r\n    private availabilityService: AvailabilityService\r\n  ) {}\r\n\r\n  loadAvailabilitiesByWorkspace$ = createEffect(() =>\r\n    this.actions$.pipe(\r\n      ofType(loadAvailabilitiesByWorkspace),\r\n      mergeMap(({ workspaceId }) =>\r\n        this.availabilityService.getByWorkspaceId(workspaceId).pipe(\r\n          map((availabilities) =>\r\n            loadAvailabilitiesByWorkspaceSuccess({ availabilities })\r\n          ),\r\n          catchError((error) =>\r\n            of(loadAvailabilitiesByWorkspaceFailure({ error: error.message }))\r\n          )\r\n        )\r\n      )\r\n    )\r\n  );\r\n  loadAvailabilityById$ = createEffect(() =>\r\n    this.actions$.pipe(\r\n      ofType(loadAvailabilityById),\r\n      switchMap(({ id }) =>\r\n        this.availabilityService.getById(id).pipe(\r\n          map((availability) => loadAvailabilityByIdSuccess({ availability })),\r\n          catchError((error) =>\r\n            of(\r\n              loadAvailabilityByIdFailure({\r\n                error: error.message,\r\n              })\r\n            )\r\n          )\r\n        )\r\n      )\r\n    )\r\n  );\r\n}\r\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "actions$",
                        "type": "Actions",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "availabilityService",
                        "type": "AvailabilityService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 18,
                "jsdoctags": [
                    {
                        "name": "actions$",
                        "type": "Actions",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "availabilityService",
                        "type": "AvailabilityService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "extends": [],
            "type": "injectable"
        },
        {
            "name": "AvailabilityService",
            "id": "injectable-AvailabilityService-07d789bab600b8039d004e6080e8d588400d478706e278e02672f6360e4b45e4c782a62ffd5482638470bdddb4bcd2728c5d0b7522aaafa3f6f32680cc786425",
            "file": "src/app/services/availability.service.ts",
            "properties": [
                {
                    "name": "baseUrl",
                    "defaultValue": "'/api/Availability'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 10,
                    "modifierKind": [
                        123,
                        148
                    ]
                }
            ],
            "methods": [
                {
                    "name": "getById",
                    "args": [
                        {
                            "name": "id",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<Availability>",
                    "typeParameters": [],
                    "line": 19,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "id",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getByWorkspaceId",
                    "args": [
                        {
                            "name": "workspaceId",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<Availability[]>",
                    "typeParameters": [],
                    "line": 14,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "workspaceId",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { Injectable } from '@angular/core';\r\nimport { HttpClient } from '@angular/common/http';\r\nimport { Observable } from 'rxjs';\r\nimport { Availability } from '../contracts/Availability';\r\n\r\n@Injectable({\r\n  providedIn: 'root',\r\n})\r\nexport class AvailabilityService {\r\n  private readonly baseUrl = '/api/Availability';\r\n\r\n  constructor(private http: HttpClient) {}\r\n\r\n  getByWorkspaceId(workspaceId: string): Observable<Availability[]> {\r\n    return this.http.get<Availability[]>(\r\n      `${this.baseUrl}/workspace/${workspaceId}`\r\n    );\r\n  }\r\n  getById(id: string): Observable<Availability> {\r\n    return this.http.get<Availability>(`${this.baseUrl}/${id}`);\r\n  }\r\n}\r\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "http",
                        "type": "HttpClient",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 10,
                "jsdoctags": [
                    {
                        "name": "http",
                        "type": "HttpClient",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "extends": [],
            "type": "injectable"
        },
        {
            "name": "BookingEffects",
            "id": "injectable-BookingEffects-b1d8f1b12a6f933553be498b3ce5ca61048bd7db328a3cbbb2f7c1dd637e570ac38dbd35f575812580aab6e7965248590a0b7dee92060fb2242deebaf8c33004",
            "file": "src/app/store/booking/booking.effects.ts",
            "properties": [
                {
                    "name": "createBooking$",
                    "defaultValue": "createEffect(() =>\r\n    this.actions$.pipe(\r\n      ofType(createBooking),\r\n      switchMap(({ request }) =>\r\n        this.bookingService.create(request).pipe(\r\n          map((bookingId) => createBookingSuccess({ bookingId })),\r\n          catchError((error) =>\r\n            of(\r\n              createBookingFailure({\r\n                error:\r\n                  error.message.includes('time slot') || error.status === 409\r\n                    ? 'Selected time slot is not available'\r\n                    : 'Failed to create booking. Please try again.',\r\n              })\r\n            )\r\n          )\r\n        )\r\n      )\r\n    )\r\n  )",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 93
                },
                {
                    "name": "deleteBooking$",
                    "defaultValue": "createEffect(() =>\r\n    this.actions$.pipe(\r\n      ofType(deleteBooking),\r\n      mergeMap(({ id }) =>\r\n        this.bookingService.delete(id).pipe(\r\n          map(() => deleteBookingSuccess({ id })),\r\n          catchError((error) =>\r\n            of(deleteBookingFailure({ error: error.message }))\r\n          )\r\n        )\r\n      )\r\n    )\r\n  )",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 129
                },
                {
                    "name": "loadAvailabilitiesByWorkspace$",
                    "defaultValue": "createEffect(() =>\r\n    this.actions$.pipe(\r\n      ofType(loadAvailabilitiesByWorkspace),\r\n      mergeMap(({ workspaceId }) =>\r\n        this.availabilityService.getByWorkspaceId(workspaceId).pipe(\r\n          map((availabilities) =>\r\n            loadAvailabilitiesByWorkspaceSuccess({ availabilities })\r\n          ),\r\n          catchError((error) =>\r\n            of(loadAvailabilitiesByWorkspaceFailure({ error: error.message }))\r\n          )\r\n        )\r\n      )\r\n    )\r\n  )",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 143
                },
                {
                    "name": "loadBookingById$",
                    "defaultValue": "createEffect(() =>\r\n    this.actions$.pipe(\r\n      ofType(loadBookingById),\r\n      mergeMap(({ id }) =>\r\n        this.bookingService.getById(id).pipe(\r\n          map((booking) => loadBookingByIdSuccess({ booking })),\r\n          catchError((error) =>\r\n            of(loadBookingByIdFailure({ error: error.message }))\r\n          )\r\n        )\r\n      )\r\n    )\r\n  )",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 65
                },
                {
                    "name": "loadBookings$",
                    "defaultValue": "createEffect(() =>\r\n    this.actions$.pipe(\r\n      ofType(loadBookings),\r\n      mergeMap(() =>\r\n        this.bookingService.getAll().pipe(\r\n          map((bookings) => loadBookingsSuccess({ bookings })),\r\n          catchError((error) =>\r\n            of(loadBookingsFailure({ error: error.message }))\r\n          )\r\n        )\r\n      )\r\n    )\r\n  )",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 51
                },
                {
                    "name": "loadBookingsByUser$",
                    "defaultValue": "createEffect(() =>\r\n    this.actions$.pipe(\r\n      ofType(loadBookingsByUser),\r\n      mergeMap(({ userId }) =>\r\n        this.bookingService.getByUser(userId).pipe(\r\n          map((bookings) => loadBookingsByUserSuccess({ bookings })),\r\n          catchError((error) =>\r\n            of(loadBookingsByUserFailure({ error: error.message }))\r\n          )\r\n        )\r\n      )\r\n    )\r\n  )",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 79
                },
                {
                    "name": "loadBookingsByUserEmail$",
                    "defaultValue": "createEffect(() =>\r\n    this.actions$.pipe(\r\n      ofType(loadBookingsByUserEmail),\r\n      mergeMap(({ email }) =>\r\n        this.bookingService.getByUserEmail(email).pipe(\r\n          tap((bookings) => console.log('Fetched bookings:', bookings)),\r\n          map((bookings) => loadBookingsByUserEmailSuccess({ bookings })),\r\n          catchError((error) => {\r\n            console.error('Fetch bookings error:', error);\r\n            return of(loadBookingsByUserEmailFailure({ error: error.message }));\r\n          })\r\n        )\r\n      )\r\n    )\r\n  )",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 113
                }
            ],
            "methods": [],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { Injectable } from '@angular/core';\r\nimport { Actions, createEffect, ofType } from '@ngrx/effects';\r\nimport { of } from 'rxjs';\r\nimport {\r\n  catchError,\r\n  exhaustMap,\r\n  map,\r\n  mergeMap,\r\n  switchMap,\r\n  tap,\r\n} from 'rxjs/operators';\r\nimport { BookingService } from '../../services/booking.service';\r\nimport { WorkspaceService } from '../../services/workspace.service';\r\nimport { AvailabilityService } from '../../services/availability.service';\r\nimport {\r\n  loadBookings,\r\n  loadBookingsSuccess,\r\n  loadBookingsFailure,\r\n  loadBookingById,\r\n  loadBookingByIdSuccess,\r\n  loadBookingByIdFailure,\r\n  loadBookingsByUser,\r\n  loadBookingsByUserSuccess,\r\n  loadBookingsByUserFailure,\r\n  createBooking,\r\n  createBookingSuccess,\r\n  createBookingFailure,\r\n  deleteBooking,\r\n  deleteBookingSuccess,\r\n  deleteBookingFailure,\r\n  loadWorkspaces,\r\n  loadWorkspacesSuccess,\r\n  loadWorkspacesFailure,\r\n  loadAvailabilitiesByWorkspace,\r\n  loadAvailabilitiesByWorkspaceSuccess,\r\n  loadAvailabilitiesByWorkspaceFailure,\r\n  loadBookingsByUserEmail,\r\n  loadBookingsByUserEmailSuccess,\r\n  loadBookingsByUserEmailFailure,\r\n} from './booking.actions';\r\n\r\n@Injectable({ providedIn: 'root' })\r\nexport class BookingEffects {\r\n  constructor(\r\n    private actions$: Actions,\r\n    private bookingService: BookingService,\r\n    private workspaceService: WorkspaceService,\r\n    private availabilityService: AvailabilityService\r\n  ) {}\r\n\r\n  loadBookings$ = createEffect(() =>\r\n    this.actions$.pipe(\r\n      ofType(loadBookings),\r\n      mergeMap(() =>\r\n        this.bookingService.getAll().pipe(\r\n          map((bookings) => loadBookingsSuccess({ bookings })),\r\n          catchError((error) =>\r\n            of(loadBookingsFailure({ error: error.message }))\r\n          )\r\n        )\r\n      )\r\n    )\r\n  );\r\n\r\n  loadBookingById$ = createEffect(() =>\r\n    this.actions$.pipe(\r\n      ofType(loadBookingById),\r\n      mergeMap(({ id }) =>\r\n        this.bookingService.getById(id).pipe(\r\n          map((booking) => loadBookingByIdSuccess({ booking })),\r\n          catchError((error) =>\r\n            of(loadBookingByIdFailure({ error: error.message }))\r\n          )\r\n        )\r\n      )\r\n    )\r\n  );\r\n\r\n  loadBookingsByUser$ = createEffect(() =>\r\n    this.actions$.pipe(\r\n      ofType(loadBookingsByUser),\r\n      mergeMap(({ userId }) =>\r\n        this.bookingService.getByUser(userId).pipe(\r\n          map((bookings) => loadBookingsByUserSuccess({ bookings })),\r\n          catchError((error) =>\r\n            of(loadBookingsByUserFailure({ error: error.message }))\r\n          )\r\n        )\r\n      )\r\n    )\r\n  );\r\n\r\n  createBooking$ = createEffect(() =>\r\n    this.actions$.pipe(\r\n      ofType(createBooking),\r\n      switchMap(({ request }) =>\r\n        this.bookingService.create(request).pipe(\r\n          map((bookingId) => createBookingSuccess({ bookingId })),\r\n          catchError((error) =>\r\n            of(\r\n              createBookingFailure({\r\n                error:\r\n                  error.message.includes('time slot') || error.status === 409\r\n                    ? 'Selected time slot is not available'\r\n                    : 'Failed to create booking. Please try again.',\r\n              })\r\n            )\r\n          )\r\n        )\r\n      )\r\n    )\r\n  );\r\n  loadBookingsByUserEmail$ = createEffect(() =>\r\n    this.actions$.pipe(\r\n      ofType(loadBookingsByUserEmail),\r\n      mergeMap(({ email }) =>\r\n        this.bookingService.getByUserEmail(email).pipe(\r\n          tap((bookings) => console.log('Fetched bookings:', bookings)),\r\n          map((bookings) => loadBookingsByUserEmailSuccess({ bookings })),\r\n          catchError((error) => {\r\n            console.error('Fetch bookings error:', error);\r\n            return of(loadBookingsByUserEmailFailure({ error: error.message }));\r\n          })\r\n        )\r\n      )\r\n    )\r\n  );\r\n\r\n  deleteBooking$ = createEffect(() =>\r\n    this.actions$.pipe(\r\n      ofType(deleteBooking),\r\n      mergeMap(({ id }) =>\r\n        this.bookingService.delete(id).pipe(\r\n          map(() => deleteBookingSuccess({ id })),\r\n          catchError((error) =>\r\n            of(deleteBookingFailure({ error: error.message }))\r\n          )\r\n        )\r\n      )\r\n    )\r\n  );\r\n\r\n  loadAvailabilitiesByWorkspace$ = createEffect(() =>\r\n    this.actions$.pipe(\r\n      ofType(loadAvailabilitiesByWorkspace),\r\n      mergeMap(({ workspaceId }) =>\r\n        this.availabilityService.getByWorkspaceId(workspaceId).pipe(\r\n          map((availabilities) =>\r\n            loadAvailabilitiesByWorkspaceSuccess({ availabilities })\r\n          ),\r\n          catchError((error) =>\r\n            of(loadAvailabilitiesByWorkspaceFailure({ error: error.message }))\r\n          )\r\n        )\r\n      )\r\n    )\r\n  );\r\n}\r\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "actions$",
                        "type": "Actions",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "bookingService",
                        "type": "BookingService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "workspaceService",
                        "type": "WorkspaceService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "availabilityService",
                        "type": "AvailabilityService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 43,
                "jsdoctags": [
                    {
                        "name": "actions$",
                        "type": "Actions",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "bookingService",
                        "type": "BookingService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "workspaceService",
                        "type": "WorkspaceService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "availabilityService",
                        "type": "AvailabilityService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "extends": [],
            "type": "injectable"
        },
        {
            "name": "BookingService",
            "id": "injectable-BookingService-6208aa107feb5030709ac0be406dd01537313bcf74e5a0f592ceb30d45ec836a919eace638e84e030af097d42a1f764b8723643a0c7bd4a6c58ea7b28649fb6a",
            "file": "src/app/services/booking.service.ts",
            "properties": [
                {
                    "name": "baseUrl",
                    "defaultValue": "'/api/Booking'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 11,
                    "modifierKind": [
                        123,
                        148
                    ]
                }
            ],
            "methods": [
                {
                    "name": "create",
                    "args": [
                        {
                            "name": "request",
                            "type": "BookingRequest",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<string>",
                    "typeParameters": [],
                    "line": 39,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "request",
                            "type": "BookingRequest",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "delete",
                    "args": [
                        {
                            "name": "id",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<void>",
                    "typeParameters": [],
                    "line": 53,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "id",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getAll",
                    "args": [],
                    "optional": false,
                    "returnType": "Observable<Booking[]>",
                    "typeParameters": [],
                    "line": 15,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "getById",
                    "args": [
                        {
                            "name": "id",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<Booking>",
                    "typeParameters": [],
                    "line": 19,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "id",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getByUser",
                    "args": [
                        {
                            "name": "userId",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<Booking[]>",
                    "typeParameters": [],
                    "line": 22,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "userId",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getByUserEmail",
                    "args": [
                        {
                            "name": "email",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<Booking[]>",
                    "typeParameters": [],
                    "line": 25,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "email",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { Injectable } from '@angular/core';\r\nimport { HttpClient } from '@angular/common/http';\r\nimport { catchError, map, Observable, throwError } from 'rxjs';\r\nimport { Booking } from '../contracts/Booking';\r\nimport { BookingRequest } from '../contracts/BookingRequest';\r\n\r\n@Injectable({\r\n  providedIn: 'root',\r\n})\r\nexport class BookingService {\r\n  private readonly baseUrl = '/api/Booking';\r\n\r\n  constructor(private http: HttpClient) {}\r\n\r\n  getAll(): Observable<Booking[]> {\r\n    return this.http.get<Booking[]>(this.baseUrl);\r\n  }\r\n\r\n  getById(id: string): Observable<Booking> {\r\n    return this.http.get<Booking>(`${this.baseUrl}/${id}`);\r\n  }\r\n  getByUser(userId: string): Observable<Booking[]> {\r\n    return this.http.get<Booking[]>(`${this.baseUrl}/user/${userId}`);\r\n  }\r\n  getByUserEmail(email: string): Observable<Booking[]> {\r\n    return this.http\r\n      .get<Booking[]>(`${this.baseUrl}/user/by-email`, { params: { email } })\r\n      .pipe(\r\n        catchError((error) => {\r\n          console.error(`Error fetching bookings for email ${email}:`, error);\r\n          return throwError(\r\n            () =>\r\n              new Error(error.message || 'Failed to fetch bookings by email')\r\n          );\r\n        })\r\n      );\r\n  }\r\n\r\n  create(request: BookingRequest): Observable<string> {\r\n    return this.http\r\n      .post<{ id: string }>(this.baseUrl, request, { responseType: 'json' })\r\n      .pipe(\r\n        map((response) => response.id),\r\n        catchError((error) => {\r\n          console.error('Booking creation error:', error);\r\n          return throwError(\r\n            () => new Error(error.error || 'Failed to create booking')\r\n          );\r\n        })\r\n      );\r\n  }\r\n\r\n  delete(id: string): Observable<void> {\r\n    return this.http.delete<void>(`${this.baseUrl}/${id}`);\r\n  }\r\n}\r\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "http",
                        "type": "HttpClient",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 11,
                "jsdoctags": [
                    {
                        "name": "http",
                        "type": "HttpClient",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "extends": [],
            "type": "injectable"
        },
        {
            "name": "CoworkingEffects",
            "id": "injectable-CoworkingEffects-4de19c08c670263954764a0aa4575ddbdad6750eeb0f5cc513fbdec6c2f8d5e56fee7f333ab689f1659452de6edc133ad4fb07fe9a862daef5178207ae155b75",
            "file": "src/app/store/coworking/coworking.effects.ts",
            "properties": [
                {
                    "name": "loadCoworkingById$",
                    "defaultValue": "createEffect(() =>\r\n    this.actions$.pipe(\r\n      ofType(loadCoworkingById),\r\n      switchMap(({ id }) =>\r\n        this.coworkingService.getById(id).pipe(\r\n          map((coworking) => loadCoworkingByIdSuccess({ coworking })),\r\n          catchError((error) =>\r\n            of(loadCoworkingByIdFailure({ error: error.message }))\r\n          )\r\n        )\r\n      )\r\n    )\r\n  )",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 31
                },
                {
                    "name": "loadCoworkings$",
                    "defaultValue": "createEffect(() =>\r\n    this.actions$.pipe(\r\n      ofType(loadCoworkings),\r\n      mergeMap(() =>\r\n        this.coworkingService.getAll().pipe(\r\n          map((coworkings) => loadCoworkingsSuccess({ coworkings })),\r\n          catchError((error) =>\r\n            of(loadCoworkingsFailure({ error: error.message }))\r\n          )\r\n        )\r\n      )\r\n    )\r\n  )",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 18
                }
            ],
            "methods": [],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { Injectable } from '@angular/core';\r\nimport { Actions, createEffect, ofType } from '@ngrx/effects';\r\nimport { of } from 'rxjs';\r\nimport { catchError, map, mergeMap, switchMap } from 'rxjs/operators';\r\n\r\nimport {\r\n  loadCoworkings,\r\n  loadCoworkingsSuccess,\r\n  loadCoworkingsFailure,\r\n  loadCoworkingById,\r\n  loadCoworkingByIdFailure,\r\n  loadCoworkingByIdSuccess,\r\n} from './coworking.actions';\r\nimport { CoworkingService } from '../../services/coworking.service';\r\n\r\n@Injectable()\r\nexport class CoworkingEffects {\r\n  loadCoworkings$ = createEffect(() =>\r\n    this.actions$.pipe(\r\n      ofType(loadCoworkings),\r\n      mergeMap(() =>\r\n        this.coworkingService.getAll().pipe(\r\n          map((coworkings) => loadCoworkingsSuccess({ coworkings })),\r\n          catchError((error) =>\r\n            of(loadCoworkingsFailure({ error: error.message }))\r\n          )\r\n        )\r\n      )\r\n    )\r\n  );\r\n  loadCoworkingById$ = createEffect(() =>\r\n    this.actions$.pipe(\r\n      ofType(loadCoworkingById),\r\n      switchMap(({ id }) =>\r\n        this.coworkingService.getById(id).pipe(\r\n          map((coworking) => loadCoworkingByIdSuccess({ coworking })),\r\n          catchError((error) =>\r\n            of(loadCoworkingByIdFailure({ error: error.message }))\r\n          )\r\n        )\r\n      )\r\n    )\r\n  );\r\n\r\n  constructor(\r\n    private actions$: Actions,\r\n    private coworkingService: CoworkingService\r\n  ) {}\r\n}\r\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "actions$",
                        "type": "Actions",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "coworkingService",
                        "type": "CoworkingService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 43,
                "jsdoctags": [
                    {
                        "name": "actions$",
                        "type": "Actions",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "coworkingService",
                        "type": "CoworkingService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "extends": [],
            "type": "injectable"
        },
        {
            "name": "CoworkingService",
            "id": "injectable-CoworkingService-0b995da5fe7c721a789fc7038aa258eeab0674bc1976304f7cbedf496fb27b336870699163aa19cc2d26290706c8847091f35d2738ea33a7d9eaf7354d2cb144",
            "file": "src/app/services/coworking.service.ts",
            "properties": [
                {
                    "name": "apiUrl",
                    "defaultValue": "'/api/Coworking'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 11,
                    "modifierKind": [
                        123
                    ]
                }
            ],
            "methods": [
                {
                    "name": "getAll",
                    "args": [],
                    "optional": false,
                    "returnType": "Observable<Coworking[]>",
                    "typeParameters": [],
                    "line": 15,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "getById",
                    "args": [
                        {
                            "name": "id",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<Coworking>",
                    "typeParameters": [],
                    "line": 18,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "id",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { Injectable } from '@angular/core';\r\nimport { HttpClient } from '@angular/common/http';\r\nimport { Observable, throwError } from 'rxjs';\r\nimport { catchError } from 'rxjs/operators';\r\nimport { Coworking } from '../contracts/Coworking';\r\n\r\n@Injectable({\r\n  providedIn: 'root',\r\n})\r\nexport class CoworkingService {\r\n  private apiUrl = '/api/Coworking';\r\n\r\n  constructor(private http: HttpClient) {}\r\n\r\n  getAll(): Observable<Coworking[]> {\r\n    return this.http.get<Coworking[]>(this.apiUrl);\r\n  }\r\n  getById(id: string): Observable<Coworking> {\r\n    return this.http.get<Coworking>(`${this.apiUrl}/${id}`);\r\n  }\r\n}\r\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "http",
                        "type": "HttpClient",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 11,
                "jsdoctags": [
                    {
                        "name": "http",
                        "type": "HttpClient",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "extends": [],
            "type": "injectable"
        },
        {
            "name": "GroqService",
            "id": "injectable-GroqService-f8a79d836047013704e6ff1d13dd90e95dbfdfbb1bd3491ed85c0bfb616fb8f518e39b413cbbf95a4c73554eb59d8b9d47133cf4c432815d078afbf130765bcf",
            "file": "src/app/services/groq.service.ts",
            "properties": [
                {
                    "name": "apiKey",
                    "defaultValue": "'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'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 11,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "apiUrl",
                    "defaultValue": "'https://api.groq.com/openai/v1/chat/completions'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 10,
                    "modifierKind": [
                        123
                    ]
                }
            ],
            "methods": [
                {
                    "name": "sendQuery",
                    "args": [
                        {
                            "name": "prompt",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<string>",
                    "typeParameters": [],
                    "line": 15,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "prompt",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { Injectable } from '@angular/core';\r\nimport { HttpClient, HttpHeaders } from '@angular/common/http';\r\nimport { Observable, throwError } from 'rxjs';\r\nimport { catchError, map } from 'rxjs/operators';\r\n\r\n@Injectable({\r\n  providedIn: 'root',\r\n})\r\nexport class GroqService {\r\n  private apiUrl = 'https://api.groq.com/openai/v1/chat/completions';\r\n  private apiKey = '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';\r\n\r\n  constructor(private http: HttpClient) {}\r\n\r\n  sendQuery(prompt: string): Observable<string> {\r\n    const headers = new HttpHeaders({\r\n      'Content-Type': 'application/json',\r\n      Authorization: `Bearer ${this.apiKey}`,\r\n    });\r\n\r\n    const body = {\r\n      model: 'meta-llama/llama-4-scout-17b-16e-instruct',\r\n      messages: [{ role: 'user', content: prompt }],\r\n      max_tokens: 500,\r\n    };\r\n\r\n    return this.http.post<any>(this.apiUrl, body, { headers }).pipe(\r\n      map((response) => response.choices[0].message.content),\r\n      catchError((error) => {\r\n        console.error('Groq API error:', error);\r\n        return throwError(\r\n          () => new Error('Failed to fetch response from Groq API')\r\n        );\r\n      })\r\n    );\r\n  }\r\n}\r\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "http",
                        "type": "HttpClient",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 11,
                "jsdoctags": [
                    {
                        "name": "http",
                        "type": "HttpClient",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "extends": [],
            "type": "injectable"
        },
        {
            "name": "PhotoEffects",
            "id": "injectable-PhotoEffects-ec72b98e9e386a48b866181bb7554e4ff87125994c2870115a29aa7c96bd7907bb0e08458d10fb8032b24130a15bf62447f943e7dc52f13396e3e29691556f72",
            "file": "src/app/store/photo/photo.effects.ts",
            "properties": [
                {
                    "name": "loadPhotosByCoworking$",
                    "defaultValue": "createEffect(() =>\r\n    this.actions$.pipe(\r\n      ofType(loadPhotosByCoworking),\r\n      mergeMap(({ coworkingId }) =>\r\n        this.photoService.getByCoworkingId(coworkingId).pipe(\r\n          map((photos) => loadPhotosByCoworkingSuccess({ photos })),\r\n          catchError((error) =>\r\n            of(loadPhotosByCoworkingFailure({ error: error.message }))\r\n          )\r\n        )\r\n      )\r\n    )\r\n  )",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 34
                },
                {
                    "name": "loadPhotosByWorkspace$",
                    "defaultValue": "createEffect(() =>\r\n    this.actions$.pipe(\r\n      ofType(loadPhotosByWorkspace),\r\n      mergeMap(({ workspaceId }) =>\r\n        this.photoService.getByWorkspaceId(workspaceId).pipe(\r\n          map((photos) => loadPhotosByWorkspaceSuccess({ photos })),\r\n          catchError((error) =>\r\n            of(loadPhotosByWorkspaceFailure({ error: error.message }))\r\n          )\r\n        )\r\n      )\r\n    )\r\n  )",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 20
                }
            ],
            "methods": [],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { Injectable } from '@angular/core';\r\nimport { Actions, createEffect, ofType } from '@ngrx/effects';\r\nimport { of } from 'rxjs';\r\nimport { catchError, map, mergeMap } from 'rxjs/operators';\r\n\r\nimport {\r\n  loadPhotosByWorkspace,\r\n  loadPhotosByWorkspaceSuccess,\r\n  loadPhotosByWorkspaceFailure,\r\n  loadPhotosByCoworking,\r\n  loadPhotosByCoworkingFailure,\r\n  loadPhotosByCoworkingSuccess,\r\n} from './photo.actions';\r\nimport { PhotoService } from '../../services/photo.service';\r\n\r\n@Injectable({ providedIn: 'root' })\r\nexport class PhotoEffects {\r\n  constructor(private actions$: Actions, private photoService: PhotoService) {}\r\n\r\n  loadPhotosByWorkspace$ = createEffect(() =>\r\n    this.actions$.pipe(\r\n      ofType(loadPhotosByWorkspace),\r\n      mergeMap(({ workspaceId }) =>\r\n        this.photoService.getByWorkspaceId(workspaceId).pipe(\r\n          map((photos) => loadPhotosByWorkspaceSuccess({ photos })),\r\n          catchError((error) =>\r\n            of(loadPhotosByWorkspaceFailure({ error: error.message }))\r\n          )\r\n        )\r\n      )\r\n    )\r\n  );\r\n\r\n  loadPhotosByCoworking$ = createEffect(() =>\r\n    this.actions$.pipe(\r\n      ofType(loadPhotosByCoworking),\r\n      mergeMap(({ coworkingId }) =>\r\n        this.photoService.getByCoworkingId(coworkingId).pipe(\r\n          map((photos) => loadPhotosByCoworkingSuccess({ photos })),\r\n          catchError((error) =>\r\n            of(loadPhotosByCoworkingFailure({ error: error.message }))\r\n          )\r\n        )\r\n      )\r\n    )\r\n  );\r\n}\r\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "actions$",
                        "type": "Actions",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "photoService",
                        "type": "PhotoService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 17,
                "jsdoctags": [
                    {
                        "name": "actions$",
                        "type": "Actions",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "photoService",
                        "type": "PhotoService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "extends": [],
            "type": "injectable"
        },
        {
            "name": "PhotoService",
            "id": "injectable-PhotoService-3777afbce1500e3ca231a027c79b984fc4fd6ab2048ed90ed9de779eb564f650b99b9e184ed20bd1f4a2b5398fc05970c30dee0eb2f6b16544c7a720d2dc42e1",
            "file": "src/app/services/photo.service.ts",
            "properties": [
                {
                    "name": "apiUrl",
                    "defaultValue": "'/api/Photo'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 10,
                    "modifierKind": [
                        123
                    ]
                }
            ],
            "methods": [
                {
                    "name": "getByCoworkingId",
                    "args": [
                        {
                            "name": "coworkingId",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<Photo[]>",
                    "typeParameters": [],
                    "line": 17,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "coworkingId",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getByWorkspaceId",
                    "args": [
                        {
                            "name": "workspaceId",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<Photo[]>",
                    "typeParameters": [],
                    "line": 14,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "workspaceId",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { Injectable } from '@angular/core';\r\nimport { HttpClient } from '@angular/common/http';\r\nimport { Observable } from 'rxjs';\r\nimport { Photo } from '../contracts/Photo';\r\n\r\n@Injectable({\r\n  providedIn: 'root',\r\n})\r\nexport class PhotoService {\r\n  private apiUrl = '/api/Photo';\r\n\r\n  constructor(private http: HttpClient) {}\r\n\r\n  getByWorkspaceId(workspaceId: string): Observable<Photo[]> {\r\n    return this.http.get<Photo[]>(`${this.apiUrl}/workspace/${workspaceId}`);\r\n  }\r\n  getByCoworkingId(coworkingId: string): Observable<Photo[]> {\r\n    return this.http.get<Photo[]>(`${this.apiUrl}/coworking/${coworkingId}`);\r\n  }\r\n}\r\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "http",
                        "type": "HttpClient",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 10,
                "jsdoctags": [
                    {
                        "name": "http",
                        "type": "HttpClient",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "extends": [],
            "type": "injectable"
        },
        {
            "name": "WorkspaceAmenityService",
            "id": "injectable-WorkspaceAmenityService-47501a6d2f1e11af45d19ffffa0e119605a0eacf9a6ee5394d444ef01648e98d20b06155c782ad853e9abe1b7c8795949436fb3b3f8fe3d689b5e5dad0f830b5",
            "file": "src/app/services/workspaceAmenity.service.ts",
            "properties": [
                {
                    "name": "baseUrl",
                    "defaultValue": "'/api/workspaces'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 10,
                    "modifierKind": [
                        123,
                        148
                    ]
                }
            ],
            "methods": [
                {
                    "name": "getAmenitiesByWorkspaceId",
                    "args": [
                        {
                            "name": "workspaceId",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<Amenity[]>",
                    "typeParameters": [],
                    "line": 14,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "workspaceId",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { Injectable } from '@angular/core';\r\nimport { HttpClient } from '@angular/common/http';\r\nimport { Observable } from 'rxjs';\r\nimport { Amenity } from '../contracts/Amenity';\r\n\r\n@Injectable({\r\n  providedIn: 'root',\r\n})\r\nexport class WorkspaceAmenityService {\r\n  private readonly baseUrl = '/api/workspaces';\r\n\r\n  constructor(private http: HttpClient) {}\r\n\r\n  getAmenitiesByWorkspaceId(workspaceId: string): Observable<Amenity[]> {\r\n    return this.http.get<Amenity[]>(`${this.baseUrl}/${workspaceId}/amenities`);\r\n  }\r\n}\r\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "http",
                        "type": "HttpClient",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 10,
                "jsdoctags": [
                    {
                        "name": "http",
                        "type": "HttpClient",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "extends": [],
            "type": "injectable"
        },
        {
            "name": "WorkspaceEffects",
            "id": "injectable-WorkspaceEffects-4ab08a50ae89b7c19ee798149a9b782c0ecbdbc8d19ed533d13f2854f308d0a1eeb1c3a0456563d016fe5b0b415d562beb5ac875ed626394b90dd16a29140243",
            "file": "src/app/store/workspace/workspace.effects.ts",
            "properties": [
                {
                    "name": "loadWorkspaceById$",
                    "defaultValue": "createEffect(() =>\r\n    this.actions$.pipe(\r\n      ofType(WorkspaceActions.loadWorkspaceById),\r\n      mergeMap(({ id }) =>\r\n        this.workspaceService.getById(id).pipe(\r\n          map((workspace) =>\r\n            WorkspaceActions.loadWorkspaceByIdSuccess({ workspace })\r\n          ),\r\n          catchError((error) =>\r\n            of(\r\n              WorkspaceActions.loadWorkspaceByIdFailure({\r\n                error: error.message,\r\n              })\r\n            )\r\n          )\r\n        )\r\n      )\r\n    )\r\n  )",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 32
                },
                {
                    "name": "loadWorkspacesByCoworking$",
                    "defaultValue": "createEffect(() =>\r\n    this.actions$.pipe(\r\n      ofType(WorkspaceActions.loadWorkspacesByCoworking),\r\n      switchMap(({ coworkingId }) =>\r\n        this.workspaceService.getByCoworkingId(coworkingId).pipe(\r\n          map((workspaces) =>\r\n            WorkspaceActions.loadWorkspacesByCoworkingSuccess({\r\n              workspaces,\r\n              coworkingId,\r\n            })\r\n          ),\r\n          catchError((error) =>\r\n            of(\r\n              WorkspaceActions.loadWorkspacesByCoworkingFailure({\r\n                error: error.message,\r\n              })\r\n            )\r\n          )\r\n        )\r\n      )\r\n    )\r\n  )",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 10
                }
            ],
            "methods": [],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { Injectable } from '@angular/core';\r\nimport { Actions, createEffect, ofType } from '@ngrx/effects';\r\nimport * as WorkspaceActions from './workspace.actions';\r\nimport { catchError, map, mergeMap, of, switchMap } from 'rxjs';\r\nimport { WorkspaceService } from '../../services/workspace.service';\r\nimport { loadWorkspacesByCoworkingSuccess } from './workspace.actions';\r\n\r\n@Injectable()\r\nexport class WorkspaceEffects {\r\n  loadWorkspacesByCoworking$ = createEffect(() =>\r\n    this.actions$.pipe(\r\n      ofType(WorkspaceActions.loadWorkspacesByCoworking),\r\n      switchMap(({ coworkingId }) =>\r\n        this.workspaceService.getByCoworkingId(coworkingId).pipe(\r\n          map((workspaces) =>\r\n            WorkspaceActions.loadWorkspacesByCoworkingSuccess({\r\n              workspaces,\r\n              coworkingId,\r\n            })\r\n          ),\r\n          catchError((error) =>\r\n            of(\r\n              WorkspaceActions.loadWorkspacesByCoworkingFailure({\r\n                error: error.message,\r\n              })\r\n            )\r\n          )\r\n        )\r\n      )\r\n    )\r\n  );\r\n  loadWorkspaceById$ = createEffect(() =>\r\n    this.actions$.pipe(\r\n      ofType(WorkspaceActions.loadWorkspaceById),\r\n      mergeMap(({ id }) =>\r\n        this.workspaceService.getById(id).pipe(\r\n          map((workspace) =>\r\n            WorkspaceActions.loadWorkspaceByIdSuccess({ workspace })\r\n          ),\r\n          catchError((error) =>\r\n            of(\r\n              WorkspaceActions.loadWorkspaceByIdFailure({\r\n                error: error.message,\r\n              })\r\n            )\r\n          )\r\n        )\r\n      )\r\n    )\r\n  );\r\n\r\n  constructor(\r\n    private actions$: Actions,\r\n    private workspaceService: WorkspaceService\r\n  ) {}\r\n}\r\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "actions$",
                        "type": "Actions",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "workspaceService",
                        "type": "WorkspaceService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 50,
                "jsdoctags": [
                    {
                        "name": "actions$",
                        "type": "Actions",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "workspaceService",
                        "type": "WorkspaceService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "extends": [],
            "type": "injectable"
        },
        {
            "name": "WorkspaceService",
            "id": "injectable-WorkspaceService-27b227a92bf25585b1faef1ab4ec7d3e76ba3c006c987824ace9e39eec8710625eb6bc41769172507c9f329250beeef6a58a86eca082f4f93903182197535e94",
            "file": "src/app/services/workspace.service.ts",
            "properties": [
                {
                    "name": "baseUrl",
                    "defaultValue": "'/api/Workspace'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 11,
                    "modifierKind": [
                        123,
                        148
                    ]
                }
            ],
            "methods": [
                {
                    "name": "getByCoworkingId",
                    "args": [
                        {
                            "name": "coworkingId",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<Workspace[]>",
                    "typeParameters": [],
                    "line": 15,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "coworkingId",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getById",
                    "args": [
                        {
                            "name": "id",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<Workspace>",
                    "typeParameters": [],
                    "line": 20,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "id",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { Injectable } from '@angular/core';\r\nimport { HttpClient } from '@angular/common/http';\r\nimport { Observable } from 'rxjs';\r\nimport { Workspace } from '../contracts/Workspace';\r\nimport { WorkspaceRequest } from '../contracts/WorkspaceRequest';\r\n\r\n@Injectable({\r\n  providedIn: 'root',\r\n})\r\nexport class WorkspaceService {\r\n  private readonly baseUrl = '/api/Workspace';\r\n\r\n  constructor(private http: HttpClient) {}\r\n\r\n  getByCoworkingId(coworkingId: string): Observable<Workspace[]> {\r\n    return this.http.get<Workspace[]>(\r\n      `${this.baseUrl}/by-coworking/${coworkingId}`\r\n    );\r\n  }\r\n  getById(id: string): Observable<Workspace> {\r\n    return this.http.get<Workspace>(`${this.baseUrl}/${id}`);\r\n  }\r\n}\r\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "http",
                        "type": "HttpClient",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 11,
                "jsdoctags": [
                    {
                        "name": "http",
                        "type": "HttpClient",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "extends": [],
            "type": "injectable"
        }
    ],
    "guards": [],
    "interceptors": [],
    "classes": [],
    "directives": [
        {
            "name": "ClickOutsideDirective",
            "id": "directive-ClickOutsideDirective-488ad957a7f7c99c85099761efff7a3d92312be64fc6e47b7f6f1baae1709046d6498988103859148bba44f8f443527509293ac3e84a983699fd538e9eeeb460",
            "file": "src/app/directives/ClickOutsideDirective.ts",
            "type": "directive",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import {\r\n  Directive,\r\n  ElementRef,\r\n  Output,\r\n  EventEmitter,\r\n  HostListener,\r\n} from '@angular/core';\r\n\r\n@Directive({\r\n  selector: '[clickOutside]',\r\n})\r\nexport class ClickOutsideDirective {\r\n  @Output() clickOutside = new EventEmitter<void>();\r\n\r\n  constructor(private elementRef: ElementRef) {}\r\n\r\n  @HostListener('document:click', ['$event.target'])\r\n  public onClick(target: any) {\r\n    const clickedInside = this.elementRef.nativeElement.contains(target);\r\n    if (!clickedInside) {\r\n      this.clickOutside.emit();\r\n    }\r\n  }\r\n}\r\n",
            "selector": "[clickOutside]",
            "providers": [],
            "hostDirectives": [],
            "standalone": false,
            "inputsClass": [],
            "outputsClass": [
                {
                    "name": "clickOutside",
                    "defaultValue": "new EventEmitter<void>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 13,
                    "type": "EventEmitter"
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [
                {
                    "name": "document:click",
                    "args": [
                        {
                            "name": "target",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "argsDecorator": [
                        "$event.target"
                    ],
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 18
                }
            ],
            "propertiesClass": [],
            "methodsClass": [
                {
                    "name": "onClick",
                    "args": [
                        {
                            "name": "target",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 18,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "decorators": [
                        {
                            "name": "HostListener",
                            "stringifiedArguments": "'document:click', ['$event.target']"
                        }
                    ],
                    "modifierKind": [
                        170,
                        125
                    ],
                    "jsdoctags": [
                        {
                            "name": "target",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "extends": [],
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "elementRef",
                        "type": "ElementRef",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 13,
                "jsdoctags": [
                    {
                        "name": "elementRef",
                        "type": "ElementRef",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            }
        }
    ],
    "components": [
        {
            "name": "AiAssistantComponent",
            "id": "component-AiAssistantComponent-3e913fb04b5b49430acf3c0260947a33994e3c38766e8bfe8e0e4e883c36f18b18705281801964f2dceb491001b45073f555485ab3e8fc902c23845197b947b2",
            "file": "src/app/booking/my-bookings/ai-assistant/ai-assistant.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-ai-assistant",
            "styleUrls": [
                "./ai-assistant.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./ai-assistant.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [
                {
                    "name": "bookings",
                    "defaultValue": "[]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 16,
                    "type": "BookingDetails[]",
                    "decorators": []
                }
            ],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "inputText",
                    "defaultValue": "''",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 17
                },
                {
                    "name": "isLoading",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 19
                },
                {
                    "name": "response",
                    "defaultValue": "''",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 18
                }
            ],
            "methodsClass": [
                {
                    "name": "onSubmit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 27,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "setInputText",
                    "args": [
                        {
                            "name": "text",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 23,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "text",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": false,
            "imports": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, Input } from '@angular/core';\r\nimport { FormsModule } from '@angular/forms';\r\n\r\nimport { Observable, of } from 'rxjs';\r\nimport { catchError, map } from 'rxjs/operators';\r\nimport { GroqService } from '../../../services/groq.service';\r\nimport { BookingDetails } from '../my-bookings.component';\r\n\r\n@Component({\r\n  selector: 'app-ai-assistant',\r\n  standalone: false,\r\n  templateUrl: './ai-assistant.component.html',\r\n  styleUrls: ['./ai-assistant.component.scss'],\r\n})\r\nexport class AiAssistantComponent {\r\n  @Input() bookings: BookingDetails[] = [];\r\n  inputText: string = '';\r\n  response: string = '';\r\n  isLoading: boolean = false;\r\n\r\n  constructor(private groqService: GroqService) {}\r\n\r\n  setInputText(text: string): void {\r\n    this.inputText = text;\r\n  }\r\n\r\n  onSubmit(): void {\r\n    if (!this.inputText.trim()) {\r\n      this.response = 'Please enter a question.';\r\n      return;\r\n    }\r\n\r\n    this.isLoading = true;\r\n    this.response = '';\r\n\r\n    const bookingData = this.bookings.map((item) => ({\r\n      id: item.booking.id,\r\n      workspaceName: item.workspace?.name || 'Unknown',\r\n      workspaceType: item.workspace?.availabilityUnit || 'Unknown',\r\n      start: new Date(item.booking.start).toISOString(),\r\n      end: new Date(item.booking.end).toISOString(),\r\n      status: item.booking.status,\r\n    }));\r\n\r\n    const prompt = `\r\n      You are an AI assistant helping a user manage their bookings. Below is the user's booking data in JSON format. The 'workspaceType' field (representing availabilityUnit) indicates the type of workspace, such as \"private room\" or \"open space\". Use this data to answer the user's question accurately. Provide a concise, natural language response. If the question cannot be answered with the provided data, say so politely. Today's date is ${\r\n        new Date().toISOString().split('T')[0]\r\n      }.\r\n\r\n      Booking Data:\r\n      ${JSON.stringify(bookingData, null, 2)}\r\n\r\n      User Question:\r\n      ${this.inputText}\r\n    `;\r\n\r\n    this.groqService\r\n      .sendQuery(prompt)\r\n      .pipe(\r\n        map((result) => result.trim()),\r\n        catchError((error) => {\r\n          console.error('Error:', error);\r\n          return of(\r\n            'Sorry, I couldn’t process your request due to an error. Please try again.'\r\n          );\r\n        })\r\n      )\r\n      .subscribe((response) => {\r\n        this.response = response;\r\n        this.isLoading = false;\r\n      });\r\n  }\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ".ai-assistant-container {\r\n  width: 100%;\r\n  max-width: 100%; /* Critical to prevent overflow */\r\n  padding: 16px;\r\n\r\n  border-radius: var(--border-radius);\r\n\r\n  display: flex;\r\n  flex-direction: column;\r\n  gap: 24px;\r\n}\r\n/* Example questions heading */\r\n.example-questions {\r\n  width: 1280px;\r\n  height: 22px;\r\n  font-family: \"Inter\", sans-serif;\r\n  font-style: normal;\r\n  font-weight: 600;\r\n  font-size: 18px;\r\n  line-height: 120%;\r\n  color: #2d2d2d;\r\n  flex: none;\r\n  order: 0;\r\n  align-self: stretch;\r\n  flex-grow: 0;\r\n}\r\n\r\n/* List of example question buttons */\r\n.example-list {\r\n  display: flex;\r\n  flex-direction: row;\r\n  align-items: flex-start;\r\n  padding: 0;\r\n  gap: 16px;\r\n  width: 909px;\r\n  height: 43px;\r\n  flex: none;\r\n  order: 1;\r\n  flex-grow: 0;\r\n}\r\n\r\n/* Individual example question button */\r\n.example-button {\r\n  display: flex;\r\n  flex-direction: row;\r\n  justify-content: center;\r\n  align-items: center;\r\n  padding: 12px 16px;\r\n  gap: 10px;\r\n  background: #edf0ff;\r\n  border: 1.5px solid #5c5af3;\r\n  border-radius: 4px;\r\n  flex: none;\r\n  flex-grow: 0;\r\n  font-family: \"Inter\", sans-serif;\r\n  font-style: normal;\r\n  font-weight: 500;\r\n  font-size: 16px;\r\n  line-height: 120%;\r\n  color: #5c5af3;\r\n  cursor: pointer;\r\n}\r\n\r\n/* Specific widths for each button */\r\n.button-1 {\r\n  width: 300px;\r\n  height: 43px;\r\n}\r\n.button-1 span {\r\n  width: 269px;\r\n  height: 19px;\r\n}\r\n.button-2 {\r\n  width: 350px;\r\n  height: 43px;\r\n}\r\n.button-2 span {\r\n  width: 350px;\r\n  height: 19px;\r\n}\r\n.button-3 {\r\n  width: 300px;\r\n  height: 43px;\r\n}\r\n.button-3 span {\r\n  width: 300px;\r\n  height: 19px;\r\n}\r\n\r\n/* Input field container */\r\n.input-field {\r\n  display: flex;\r\n  flex-direction: row;\r\n  justify-content: space-between;\r\n  align-items: center;\r\n  padding: 10px 16px;\r\n  gap: 176px;\r\n  width: 1280px;\r\n  height: 64px;\r\n  background: #fcfbff;\r\n  border: 1px solid #c2bcd8;\r\n  border-radius: 8px;\r\n  flex: none;\r\n  order: 4;\r\n  align-self: stretch;\r\n  flex-grow: 0;\r\n  z-index: 4;\r\n}\r\n\r\n/* Text input */\r\n.input-field input {\r\n  width: 80%; /* Increased from 111px to 80% of container */\r\n  height: 19px;\r\n  font-family: \"Inter\", sans-serif;\r\n  font-style: normal;\r\n  font-weight: 400;\r\n  font-size: 16px;\r\n  line-height: 120%;\r\n  color: #787878;\r\n  border: none;\r\n  background: none;\r\n  flex: none;\r\n  order: 0;\r\n  flex-grow: 0;\r\n}\r\n\r\n.send-button {\r\n  display: flex;\r\n  flex-direction: row;\r\n  justify-content: center;\r\n  align-items: center;\r\n  padding: 0;\r\n  gap: 10px;\r\n  width: 44px;\r\n  height: 44px;\r\n  background: #5c5af3;\r\n  border-radius: 4px;\r\n  flex: none;\r\n  order: 1;\r\n  flex-grow: 0;\r\n  cursor: pointer;\r\n}\r\n\r\n.send-icon::before {\r\n  content: \"\";\r\n  position: absolute;\r\n  left: 11.16%;\r\n  right: 12.5%;\r\n  top: 12.5%;\r\n  bottom: 11.16%;\r\n  border: 1.5px solid #ffffff;\r\n  transform: rotate(45deg);\r\n}\r\n",
                    "styleUrl": "./ai-assistant.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "groqService",
                        "type": "GroqService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 19,
                "jsdoctags": [
                    {
                        "name": "groqService",
                        "type": "GroqService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "extends": [],
            "templateData": "<div class=\"ai-assistant-container\">\r\n  <h2>AI assistant</h2>\r\n  <p class=\"example-questions\">Example questions</p>\r\n  <div class=\"example-list\">\r\n    <div\r\n      class=\"example-button button-1\"\r\n      (click)=\"setInputText('How many bookings do I have?')\"\r\n    >\r\n      <span>How many bookings do I have?</span>\r\n    </div>\r\n    <div\r\n      class=\"example-button button-2\"\r\n      (click)=\"setInputText('What do I have booked for next week?')\"\r\n    >\r\n      <span>What do I have booked for next week?</span>\r\n    </div>\r\n    <div\r\n      class=\"example-button button-3\"\r\n      (click)=\"setInputText('List all my private room bookings')\"\r\n    >\r\n      <span>List all my private room bookings</span>\r\n    </div>\r\n  </div>\r\n  <div class=\"input-field\">\r\n    <input\r\n      type=\"text\"\r\n      [(ngModel)]=\"inputText\"\r\n      placeholder=\"Ask anything...\"\r\n      (keyup.enter)=\"onSubmit()\"\r\n    />\r\n    <div class=\"send-button\" (click)=\"onSubmit()\">\r\n      <div><img src=\"send.svg\" alt=\"\" /></div>\r\n    </div>\r\n  </div>\r\n  <div class=\"response-container\" *ngIf=\"response || isLoading\">\r\n    <div *ngIf=\"isLoading\" class=\"loading\">Loading...</div>\r\n    <div *ngIf=\"!isLoading && response\" class=\"response\">{{ response }}</div>\r\n  </div>\r\n</div>\r\n"
        },
        {
            "name": "AppComponent",
            "id": "component-AppComponent-9aea7f907d9facd843a7b458648946e5b1f66026dc71368e1def3cd9b12c0a5b920ba5a9a0ccfcedbd3935ce5c6cdccfad4a11579772c42977dbd2c03bd32099",
            "file": "src/app/app.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-root",
            "styleUrls": [],
            "styles": [],
            "templateUrl": [
                "./app.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": false,
            "imports": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component } from '@angular/core';\r\nimport { HeaderComponent } from './header/header.component';\r\nimport { RouterOutlet } from '@angular/router';\r\n\r\n@Component({\r\n  selector: 'app-root',\r\n  standalone: false,\r\n  templateUrl: './app.component.html',\r\n  styleUrl: './app.component.scss',\r\n})\r\nexport class AppComponent {}\r\n",
            "styleUrl": "./app.component.scss",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "extends": [],
            "templateData": "<app-header></app-header>\r\n\r\n<router-outlet></router-outlet>\r\n"
        },
        {
            "name": "BookingConfirmationComponent",
            "id": "component-BookingConfirmationComponent-baf6b69d106a021efd51174f331a1a95b0582767062dbc726d75be76ec2bf33b9c6154a3104cff22a0c9c2ed90438c40f8fb77ca8075e15c101081eb82fb8bbe",
            "file": "src/app/booking/booking-confirmation/booking-confirmation.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-booking-confirmation",
            "styleUrls": [
                "./booking-confirmation.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./booking-confirmation.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [
                {
                    "name": "booking",
                    "defaultValue": "null",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 20,
                    "type": "BookingRequest | null",
                    "decorators": []
                },
                {
                    "name": "errorMessage",
                    "defaultValue": "'Selected time is not available. Please choose a different time slot.'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 22,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "isError",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 21,
                    "type": "boolean",
                    "decorators": []
                }
            ],
            "outputsClass": [
                {
                    "name": "close",
                    "defaultValue": "new EventEmitter<void>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 24,
                    "type": "EventEmitter"
                }
            ],
            "propertiesClass": [
                {
                    "name": "buttonText",
                    "defaultValue": "''",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 28
                },
                {
                    "name": "icon",
                    "defaultValue": "''",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 27
                },
                {
                    "name": "showMyBookings",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 29
                },
                {
                    "name": "title",
                    "defaultValue": "''",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 26
                }
            ],
            "methodsClass": [
                {
                    "name": "closeModal",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 57,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "goToMyBookings",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 52,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "ngOnChanges",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 33,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": false,
            "imports": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import {\r\n  Component,\r\n  EventEmitter,\r\n  Input,\r\n  Output,\r\n  OnChanges,\r\n} from '@angular/core';\r\nimport { Router } from '@angular/router';\r\nimport { BookingRequest } from '../../contracts/BookingRequest';\r\nimport { CommonModule } from '@angular/common';\r\n\r\n@Component({\r\n  selector: 'app-booking-confirmation',\r\n  standalone: false,\r\n  templateUrl: './booking-confirmation.component.html',\r\n  styleUrls: ['./booking-confirmation.component.scss'],\r\n})\r\nexport class BookingConfirmationComponent implements OnChanges {\r\n  @Input() booking: BookingRequest | null = null;\r\n  @Input() isError: boolean = false;\r\n  @Input() errorMessage: string =\r\n    'Selected time is not available. Please choose a different time slot.';\r\n  @Output() close = new EventEmitter<void>();\r\n\r\n  title: string = '';\r\n  icon: string = '';\r\n  buttonText: string = '';\r\n  showMyBookings: boolean = false;\r\n\r\n  constructor(private router: Router) {}\r\n\r\n  ngOnChanges() {\r\n    if (this.isError) {\r\n      this.title = 'Time Slot Unavailable';\r\n      this.icon = 'x.png';\r\n      this.buttonText = 'Choose Another Time';\r\n      this.showMyBookings = false;\r\n    } else if (this.booking) {\r\n      this.title = \"You're All Set!\";\r\n      this.icon = 'done.svg';\r\n      this.buttonText = 'My Bookings';\r\n      this.showMyBookings = true;\r\n    } else {\r\n      this.title = 'Booking Information';\r\n      this.icon = 'info.svg';\r\n      this.buttonText = 'Close';\r\n      this.showMyBookings = false;\r\n    }\r\n  }\r\n\r\n  goToMyBookings() {\r\n    this.router.navigate(['/my-bookings']);\r\n    this.close.emit();\r\n  }\r\n\r\n  closeModal() {\r\n    this.close.emit();\r\n  }\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ".overlay {\r\n  position: fixed;\r\n  top: 0;\r\n  left: 0;\r\n  width: 100%;\r\n  height: 100%;\r\n  background: rgba(45, 45, 45, 0.5);\r\n  display: flex;\r\n  justify-content: center;\r\n  align-items: center;\r\n  z-index: 999;\r\n}\r\n\r\n.confirmation-card {\r\n  position: relative;\r\n  width: 728px;\r\n  padding: 40px;\r\n  background: var(--white);\r\n  border-radius: var(--border-radius);\r\n  display: flex;\r\n  flex-direction: column;\r\n  align-items: flex-start;\r\n  gap: 32px;\r\n  box-shadow: var(--shadow);\r\n}\r\n\r\n.close-btn {\r\n  position: absolute;\r\n  top: 40px;\r\n  right: 40px;\r\n  width: 36px;\r\n  height: 36px;\r\n  border: none;\r\n  background: transparent;\r\n  font-size: 24px;\r\n  color: #a8a8a8;\r\n  cursor: pointer;\r\n}\r\n\r\n.icon-circle {\r\n  width: 80px;\r\n  height: 80px;\r\n  background: #73c189;\r\n  border-radius: 50%;\r\n  display: flex;\r\n  align-items: center;\r\n  justify-content: center;\r\n}\r\n\r\n.icon-circle img {\r\n  width: 36px;\r\n  height: 36px;\r\n}\r\n\r\n.confirmation-text {\r\n  display: flex;\r\n  flex-direction: column;\r\n  gap: 16px;\r\n}\r\n\r\n.confirmation-text h2 {\r\n  font-family: \"Inter\", sans-serif;\r\n  font-weight: 700;\r\n  font-size: 32px;\r\n  color: var(--text-dark);\r\n}\r\n\r\n.confirmation-text p {\r\n  font-family: \"Inter\", sans-serif;\r\n  font-size: 16px;\r\n  line-height: 24px;\r\n  color: var(--text-gray);\r\n}\r\n\r\n.confirmation-text strong {\r\n  font-weight: 600;\r\n  color: var(--text-dark);\r\n}\r\n.error-circle {\r\n  background: #e74c3c;\r\n}\r\n",
                    "styleUrl": "./booking-confirmation.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "router",
                        "type": "Router",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 29,
                "jsdoctags": [
                    {
                        "name": "router",
                        "type": "Router",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "extends": [],
            "implements": [
                "OnChanges"
            ],
            "templateData": "<div class=\"overlay\">\r\n  <div class=\"confirmation-card\" [ngClass]=\"{ 'error-state': isError }\">\r\n    <button class=\"close-btn\" (click)=\"closeModal()\">✕</button>\r\n\r\n    <img\r\n      src=\"x.svg\"\r\n      [alt]=\"isError ? 'Error' : 'Success'\"\r\n      class=\"icon-circle\"\r\n      [ngClass]=\"{ 'error-circle': isError }\"\r\n    />\r\n\r\n    <div class=\"confirmation-text\">\r\n      <h2 [ngClass]=\"{ 'error-title': isError }\">{{ title }}</h2>\r\n      @if (isError) {\r\n      <p>{{ errorMessage }}</p>\r\n      } @else if (booking) {\r\n      <p>\r\n        Your room is booked from from\r\n        <strong>\r\n          {{ booking.start | date : \"MMM d, yyyy\" }} to\r\n          {{ booking.end | date : \"MMM d, yyyy\" }}.\r\n        </strong>\r\n      </p>\r\n      <p>\r\n        A confirmation has been sent to your email\r\n        <strong>{{ booking.email }}</strong>\r\n      </p>\r\n      } @else {\r\n      <p>No booking data available.</p>\r\n      }\r\n    </div>\r\n\r\n    <app-button\r\n      [fixedWidth]=\"true\"\r\n      [link]=\"showMyBookings ? ['/my-bookings'] : null\"\r\n      (onClick)=\"showMyBookings ? goToMyBookings() : closeModal()\"\r\n    >\r\n      {{ buttonText }}\r\n    </app-button>\r\n  </div>\r\n</div>\r\n"
        },
        {
            "name": "BookingPageComponent",
            "id": "component-BookingPageComponent-36cf90779babbd0d7ce400f88aa8373d8f089ea6d414956146d2b938a91a1d4b09c0d7e0b8f591966496f573667c9d9b00233b9a44db8ac3a3c6400e1bcd12bd",
            "file": "src/app/booking/booking-page/booking-page.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-booking-page",
            "styleUrls": [
                "./booking-page.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./booking-page.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "availabilities$",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Observable<Availability[]>",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 54
                },
                {
                    "name": "availabilityError$",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Observable<string | null>",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 58
                },
                {
                    "name": "availabilityLoading$",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Observable<boolean>",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 56
                },
                {
                    "name": "bookingData",
                    "defaultValue": "null",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "BookingRequest | null",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 48
                },
                {
                    "name": "bookingError$",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Observable<string | null>",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 60
                },
                {
                    "name": "bookingId$",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Observable<string | null>",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 59
                },
                {
                    "name": "conflictError",
                    "defaultValue": "''",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 49
                },
                {
                    "name": "coworkingId",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 51
                },
                {
                    "name": "days",
                    "defaultValue": "Array.from({ length: 31 }, (_, i) => i + 1)",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 79
                },
                {
                    "name": "destroy$",
                    "defaultValue": "new Subject<void>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 96,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "error$",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Observable<string | null>",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 62
                },
                {
                    "name": "form",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "FormGroup",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 44
                },
                {
                    "name": "isError",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 50
                },
                {
                    "name": "loading$",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Observable<boolean>",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 61
                },
                {
                    "name": "months",
                    "defaultValue": "[\r\n    'January',\r\n    'February',\r\n    'March',\r\n    'April',\r\n    'May',\r\n    'June',\r\n    'July',\r\n    'August',\r\n    'September',\r\n    'October',\r\n    'November',\r\n    'December',\r\n  ]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "[]",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 80
                },
                {
                    "name": "openDropdown",
                    "defaultValue": "null",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string | null",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 46
                },
                {
                    "name": "showConfirmation",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 47
                },
                {
                    "name": "timeOptions",
                    "defaultValue": "[\r\n    '8:00 AM',\r\n    '9:00 AM',\r\n    '10:00 AM',\r\n    '11:00 AM',\r\n    '12:00 PM',\r\n    '1:00 PM',\r\n    '2:00 PM',\r\n    '3:00 PM',\r\n    '4:00 PM',\r\n    '5:00 PM',\r\n    '6:00 PM',\r\n    '7:00 PM',\r\n  ]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "[]",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 64
                },
                {
                    "name": "workspaceError$",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Observable<string | null>",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 57
                },
                {
                    "name": "workspaceLoading$",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Observable<boolean>",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 55
                },
                {
                    "name": "workspaceOptions$",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Observable<Workspace[]>",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 53
                },
                {
                    "name": "years",
                    "defaultValue": "Array.from({ length: 20 }, (_, i) => 2025 + i)",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 94
                }
            ],
            "methodsClass": [
                {
                    "name": "closeConfirmation",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 369,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "closeDropdown",
                    "args": [
                        {
                            "name": "name",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 216,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "name",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "dateRangeValidator",
                    "args": [
                        {
                            "name": "form",
                            "type": "FormGroup",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "literal type | null",
                    "typeParameters": [],
                    "line": 255,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "form",
                            "type": "FormGroup",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "ngOnDestroy",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 207,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 172,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "roomSizeValidator",
                    "args": [
                        {
                            "name": "form",
                            "type": "FormGroup",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "literal type | null",
                    "typeParameters": [],
                    "line": 308,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "form",
                            "type": "FormGroup",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "selectDatePart",
                    "args": [
                        {
                            "name": "controlName",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "part",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "event",
                            "type": "Event",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 239,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "controlName",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "part",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "event",
                            "type": "Event",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "selectRoom",
                    "args": [
                        {
                            "name": "room",
                            "type": "Workspace",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 222,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "room",
                            "type": "Workspace",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "selectTime",
                    "args": [
                        {
                            "name": "controlName",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "time",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 248,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "controlName",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "time",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "submit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 322,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "toggleDropdown",
                    "args": [
                        {
                            "name": "name",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 212,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "name",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": false,
            "imports": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, OnInit, ChangeDetectorRef } from '@angular/core';\r\nimport { FormBuilder, FormGroup, Validators } from '@angular/forms';\r\nimport { Store } from '@ngrx/store';\r\nimport {\r\n  filter,\r\n  map,\r\n  Observable,\r\n  take,\r\n  combineLatest,\r\n  of,\r\n  Subject,\r\n  takeUntil,\r\n} from 'rxjs';\r\nimport { Workspace } from '../../contracts/Workspace';\r\nimport { Availability } from '../../contracts/Availability';\r\nimport { BookingRequest } from '../../contracts/BookingRequest';\r\nimport * as BookingActions from '../../store/booking/booking.actions';\r\nimport * as WorkspaceActions from '../../store/workspace/workspace.actions';\r\nimport * as AvailabilityActions from '../../store/availability/availability.actions';\r\nimport {\r\n  selectAllAvailabilities,\r\n  selectAvailabilityLoading,\r\n  selectAvailabilityError,\r\n} from '../../store/availability/availability.selectors';\r\nimport {\r\n  selectBookingId,\r\n  selectBookingError,\r\n  selectBookingLoading,\r\n} from '../../store/booking/booking.selectors';\r\nimport {\r\n  selectWorkspacesByCoworking,\r\n  selectWorkspacesByCoworkingLoading,\r\n  selectWorkspacesByCoworkingError,\r\n} from '../../store/workspace/workspaces.selectors';\r\nimport { ActivatedRoute } from '@angular/router';\r\n\r\n@Component({\r\n  selector: 'app-booking-page',\r\n  standalone: false,\r\n  templateUrl: './booking-page.component.html',\r\n  styleUrls: ['./booking-page.component.scss'],\r\n})\r\nexport class BookingPageComponent implements OnInit {\r\n  form: FormGroup;\r\n\r\n  openDropdown: string | null = null;\r\n  showConfirmation = false;\r\n  bookingData: BookingRequest | null = null;\r\n  conflictError: string = '';\r\n  isError: boolean = false;\r\n  coworkingId!: string;\r\n\r\n  workspaceOptions$: Observable<Workspace[]>;\r\n  availabilities$: Observable<Availability[]>;\r\n  workspaceLoading$: Observable<boolean>;\r\n  availabilityLoading$: Observable<boolean>;\r\n  workspaceError$: Observable<string | null>;\r\n  availabilityError$: Observable<string | null>;\r\n  bookingId$: Observable<string | null>;\r\n  bookingError$: Observable<string | null>;\r\n  loading$: Observable<boolean>;\r\n  error$: Observable<string | null>;\r\n\r\n  timeOptions = [\r\n    '8:00 AM',\r\n    '9:00 AM',\r\n    '10:00 AM',\r\n    '11:00 AM',\r\n    '12:00 PM',\r\n    '1:00 PM',\r\n    '2:00 PM',\r\n    '3:00 PM',\r\n    '4:00 PM',\r\n    '5:00 PM',\r\n    '6:00 PM',\r\n    '7:00 PM',\r\n  ];\r\n\r\n  days = Array.from({ length: 31 }, (_, i) => i + 1);\r\n  months = [\r\n    'January',\r\n    'February',\r\n    'March',\r\n    'April',\r\n    'May',\r\n    'June',\r\n    'July',\r\n    'August',\r\n    'September',\r\n    'October',\r\n    'November',\r\n    'December',\r\n  ];\r\n  years = Array.from({ length: 20 }, (_, i) => 2025 + i);\r\n\r\n  private destroy$ = new Subject<void>();\r\n\r\n  constructor(\r\n    private fb: FormBuilder,\r\n    private store: Store,\r\n    private cdr: ChangeDetectorRef,\r\n    private route: ActivatedRoute\r\n  ) {\r\n    const currentYear = 2025;\r\n    this.form = this.fb.group(\r\n      {\r\n        name: ['', Validators.required],\r\n        email: ['', [Validators.required, Validators.email]],\r\n        room: [null, Validators.required],\r\n        roomSize: [null, Validators.required],\r\n        dateStart: [\r\n          { day: null, month: null, year: currentYear },\r\n          Validators.required,\r\n        ],\r\n        dateEnd: [\r\n          { day: null, month: null, year: currentYear },\r\n          Validators.required,\r\n        ],\r\n        timeStart: [null, Validators.required],\r\n        timeEnd: [null, Validators.required],\r\n      },\r\n      { validators: [this.dateRangeValidator, this.roomSizeValidator] }\r\n    );\r\n\r\n    // Initialize observables\r\n    this.workspaceOptions$ = this.store.select(selectWorkspacesByCoworking);\r\n    this.availabilities$ = of([]);\r\n    this.workspaceLoading$ = this.store.select(\r\n      selectWorkspacesByCoworkingLoading\r\n    );\r\n    this.availabilityLoading$ = this.store.select(selectAvailabilityLoading);\r\n    this.workspaceError$ = this.store.select(selectWorkspacesByCoworkingError);\r\n    this.availabilityError$ = this.store.select(selectAvailabilityError);\r\n    this.bookingId$ = this.store.select(selectBookingId);\r\n    this.bookingError$ = this.store.select(selectBookingError);\r\n\r\n    // Combine loading states\r\n    this.loading$ = combineLatest([\r\n      this.workspaceLoading$,\r\n      this.availabilityLoading$,\r\n      this.store.select(selectBookingLoading),\r\n    ]).pipe(\r\n      map(\r\n        ([workspaceLoading, availabilityLoading, bookingLoading]) =>\r\n          workspaceLoading || availabilityLoading || bookingLoading\r\n      )\r\n    );\r\n\r\n    // Combine error states\r\n    this.error$ = combineLatest([\r\n      this.workspaceError$,\r\n      this.availabilityError$,\r\n      this.bookingError$,\r\n    ]).pipe(\r\n      map(\r\n        ([workspaceError, availabilityError, bookingError]) =>\r\n          workspaceError || availabilityError || bookingError\r\n      )\r\n    );\r\n\r\n    // Reset roomSize when room changes\r\n    this.form\r\n      .get('room')\r\n      ?.valueChanges.pipe(takeUntil(this.destroy$))\r\n      .subscribe(() => {\r\n        this.form.get('roomSize')?.reset();\r\n        this.form.get('roomSize')?.markAsUntouched();\r\n        this.cdr.detectChanges();\r\n      });\r\n  }\r\n\r\n  ngOnInit() {\r\n    // Extract coworkingId from route\r\n    this.route.paramMap.pipe(takeUntil(this.destroy$)).subscribe((params) => {\r\n      this.coworkingId = params.get('coworkingId') || '';\r\n      if (this.coworkingId) {\r\n        this.store.dispatch(\r\n          WorkspaceActions.loadWorkspacesByCoworking({\r\n            coworkingId: this.coworkingId,\r\n          })\r\n        );\r\n      } else {\r\n        this.conflictError = 'Invalid coworking ID';\r\n        this.isError = true;\r\n        this.showConfirmation = true;\r\n        this.cdr.detectChanges();\r\n      }\r\n    });\r\n\r\n    // Handle booking success and errors\r\n    combineLatest([this.bookingId$, this.bookingError$])\r\n      .pipe(takeUntil(this.destroy$))\r\n      .subscribe(([bookingId, error]) => {\r\n        if (bookingId) {\r\n          this.isError = false;\r\n          this.conflictError = '';\r\n        } else if (error) {\r\n          this.isError = true;\r\n          this.conflictError = error.includes('time slot')\r\n            ? 'Selected time is not available. Please choose a different time slot.'\r\n            : 'Failed to create booking. Please try again.';\r\n        }\r\n        this.cdr.detectChanges();\r\n      });\r\n  }\r\n\r\n  ngOnDestroy() {\r\n    this.destroy$.next();\r\n    this.destroy$.complete();\r\n  }\r\n\r\n  toggleDropdown(name: string) {\r\n    this.openDropdown = this.openDropdown === name ? null : name;\r\n  }\r\n\r\n  closeDropdown(name: string) {\r\n    if (this.openDropdown === name) {\r\n      this.openDropdown = null;\r\n    }\r\n  }\r\n\r\n  selectRoom(room: Workspace) {\r\n    this.form.get('room')?.setValue(room);\r\n    this.openDropdown = null;\r\n    this.store.dispatch(\r\n      AvailabilityActions.loadAvailabilitiesByWorkspace({\r\n        workspaceId: room.id,\r\n      })\r\n    );\r\n    this.availabilities$ = this.store\r\n      .select(selectAllAvailabilities)\r\n      .pipe(\r\n        map((availabilities) =>\r\n          availabilities.filter((a) => a.workspaceId === room.id)\r\n        )\r\n      );\r\n  }\r\n\r\n  selectDatePart(controlName: string, part: string, event: Event) {\r\n    const value = (event.target as HTMLSelectElement).value;\r\n    const current = this.form.get(controlName)?.value || {};\r\n    const updated = { ...current, [part]: parseInt(value, 10) };\r\n    this.form.get(controlName)?.setValue(updated);\r\n    this.form.get(controlName)?.markAsTouched();\r\n    this.form.updateValueAndValidity();\r\n  }\r\n\r\n  selectTime(controlName: string, time: string) {\r\n    this.form.get(controlName)?.setValue(time);\r\n    this.form.get(controlName)?.markAsTouched();\r\n    this.form.updateValueAndValidity();\r\n    this.openDropdown = null;\r\n  }\r\n\r\n  dateRangeValidator(form: FormGroup): { [key: string]: any } | null {\r\n    const dateStart = form.get('dateStart')?.value;\r\n    const dateEnd = form.get('dateEnd')?.value;\r\n    const timeStart = form.get('timeStart')?.value;\r\n    const timeEnd = form.get('timeEnd')?.value;\r\n\r\n    if (\r\n      !dateStart?.day ||\r\n      !dateStart?.month ||\r\n      !dateStart?.year ||\r\n      !dateEnd?.day ||\r\n      !dateEnd?.month ||\r\n      !dateEnd?.year\r\n    ) {\r\n      return {\r\n        incompleteDate: 'All date fields (day, month, year) are required',\r\n      };\r\n    }\r\n\r\n    if (timeStart && timeEnd) {\r\n      const startDate = new Date(\r\n        dateStart.year,\r\n        dateStart.month - 1,\r\n        dateStart.day\r\n      );\r\n      const endDate = new Date(dateEnd.year, dateEnd.month - 1, dateEnd.day);\r\n\r\n      const [startTimeStr, startPeriod] = timeStart.split(' ');\r\n      let [startHours, startMinutes] = startTimeStr.split(':').map(Number);\r\n      if (startPeriod === 'PM' && startHours !== 12) startHours += 12;\r\n      if (startPeriod === 'AM' && startHours === 12) startHours = 0;\r\n      startDate.setHours(startHours, startMinutes);\r\n\r\n      const [endTimeStr, endPeriod] = timeEnd.split(' ');\r\n      let [endHours, endMinutes] = endTimeStr.split(':').map(Number);\r\n      if (endPeriod === 'PM' && endHours !== 12) endHours += 12;\r\n      if (endPeriod === 'AM' && endHours === 12) endHours = 0;\r\n      endDate.setHours(endHours, endMinutes);\r\n\r\n      if (endDate <= startDate) {\r\n        return { invalidTimeRange: 'End time must be after start time' };\r\n      }\r\n\r\n      const diffInMs = endDate.getTime() - startDate.getTime();\r\n      const diffInDays = diffInMs / (1000 * 60 * 60 * 24);\r\n      if (diffInDays > 30) {\r\n        return { maxDurationExceeded: 'Booking cannot exceed 30 days' };\r\n      }\r\n    }\r\n\r\n    return null;\r\n  }\r\n\r\n  roomSizeValidator(form: FormGroup): { [key: string]: any } | null {\r\n    const room = form.get('room')?.value;\r\n    const roomSize = form.get('roomSize')?.value;\r\n\r\n    if (room && roomSize && roomSize?.workspaceId !== room.id) {\r\n      return {\r\n        invalidRoomSize:\r\n          'Selected room size does not match the selected workspace',\r\n      };\r\n    }\r\n\r\n    return null;\r\n  }\r\n\r\n  submit() {\r\n    if (this.form.valid) {\r\n      const formValue = this.form.value;\r\n\r\n      const startDate = new Date(\r\n        formValue.dateStart.year,\r\n        formValue.dateStart.month - 1,\r\n        formValue.dateStart.day\r\n      );\r\n      const [startTime, period] = formValue.timeStart.split(' ');\r\n      let [hours, minutes] = startTime.split(':').map(Number);\r\n      if (period === 'PM' && hours !== 12) hours += 12;\r\n      if (period === 'AM' && hours === 12) hours = 0;\r\n      startDate.setHours(hours, minutes);\r\n\r\n      const endDate = new Date(\r\n        formValue.dateEnd.year,\r\n        formValue.dateEnd.month - 1,\r\n        formValue.dateEnd.day\r\n      );\r\n      const [endTime, endPeriod] = formValue.timeEnd.split(' ');\r\n      let [endHours, endMinutes] = endTime.split(':').map(Number);\r\n      if (endPeriod === 'PM' && endHours !== 12) endHours += 12;\r\n      if (endPeriod === 'AM' && endHours === 12) endHours = 0;\r\n      endDate.setHours(endHours, endMinutes);\r\n\r\n      this.bookingData = {\r\n        workspaceId: formValue.room.id,\r\n        fullName: formValue.name,\r\n        email: formValue.email,\r\n        availabilityId: formValue.roomSize.id,\r\n        start: startDate.toISOString(),\r\n        end: endDate.toISOString(),\r\n      };\r\n\r\n      console.log('Submitting booking:', this.bookingData);\r\n      this.store.dispatch(\r\n        BookingActions.createBooking({ request: this.bookingData })\r\n      );\r\n      this.showConfirmation = true; // Always show confirmation\r\n      this.cdr.detectChanges();\r\n    } else {\r\n      this.form.markAllAsTouched();\r\n      console.log('Form is invalid:', this.form.errors);\r\n    }\r\n  }\r\n\r\n  closeConfirmation() {\r\n    this.showConfirmation = false;\r\n    this.conflictError = '';\r\n    this.isError = false;\r\n    this.bookingData = null;\r\n    this.form.reset();\r\n    this.availabilities$ = of([]);\r\n    this.store.dispatch(BookingActions.resetBooking());\r\n    this.cdr.detectChanges();\r\n  }\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ".flex {\r\n  display: flex;\r\n  flex-direction: row;\r\n  align-items: flex-start;\r\n  padding: 0;\r\n  gap: 30px;\r\n  flex-wrap: wrap;\r\n}\r\n\r\n.long-card {\r\n  min-width: 300px;\r\n  flex-basis: 600px;\r\n}\r\n\r\n.short-card {\r\n  min-width: 300px;\r\n  width: 488px;\r\n  flex-basis: 400px;\r\n  padding-bottom: 24px;\r\n}\r\n\r\n.form-group {\r\n  display: flex;\r\n  flex-direction: column;\r\n  gap: 8px;\r\n  margin-bottom: 20px;\r\n}\r\n\r\n.form-group input {\r\n  width: 100%;\r\n  height: 48px;\r\n  padding: 0 16px;\r\n  background: #fcfbff;\r\n  border: 1px solid #c2bcd8;\r\n  border-radius: 8px;\r\n  font-size: 16px;\r\n  font-family: \"Inter\", sans-serif;\r\n  color: var(--text-dark);\r\n}\r\n\r\n.form-group input:-webkit-autofill {\r\n  box-shadow: 0 0 0 1000px #fcfbff inset !important;\r\n  -webkit-text-fill-color: var(--text-dark) !important;\r\n  transition: background-color 9999s ease-in-out 0s;\r\n}\r\n\r\n.date-picker {\r\n  display: flex;\r\n  justify-content: space-between;\r\n  padding: 5px;\r\n  gap: 12px;\r\n  width: 100%;\r\n  background: var(--white);\r\n  border-radius: var(--card-radius);\r\n  font-family: \"Inter\", sans-serif;\r\n  box-sizing: border-box;\r\n}\r\n\r\n.datepicker-column {\r\n  flex: 1 1 0;\r\n  min-width: 0;\r\n  display: flex;\r\n  flex-direction: column;\r\n  gap: 4px;\r\n  position: relative;\r\n}\r\n\r\n.datepicker-column label {\r\n  font-family: \"Inter\", sans-serif;\r\n  font-style: normal;\r\n  font-weight: 600;\r\n  font-size: 18px;\r\n  line-height: 120%;\r\n  color: var(--text-dark);\r\n  flex: none;\r\n  order: 0;\r\n  align-self: stretch;\r\n  flex-grow: 0;\r\n}\r\n\r\n.datepicker-column select {\r\n  width: 100%;\r\n  height: 48px;\r\n  padding: 0 16px;\r\n  background: #fcfbff;\r\n  border: 1px solid #c2bcd8;\r\n  border-radius: 8px;\r\n  font-size: 16px;\r\n  font-family: \"Inter\", sans-serif;\r\n  color: var(--text-dark);\r\n  appearance: none;\r\n  cursor: pointer;\r\n}\r\n\r\n.datepicker-column select:focus {\r\n  outline: none;\r\n  border-color: var(--primary-color);\r\n}\r\n\r\n.dropdown-container {\r\n  position: relative;\r\n  max-width: 100%;\r\n}\r\n\r\n.dropdown-field {\r\n  display: flex;\r\n  justify-content: space-between;\r\n  align-items: center;\r\n  padding: 0 16px;\r\n  height: 48px;\r\n  background: #fcfbff;\r\n  border: 1px solid #c2bcd8;\r\n  border-radius: 8px;\r\n  cursor: pointer;\r\n}\r\n\r\n.field-label {\r\n  font-family: \"Inter\", sans-serif;\r\n  font-weight: 500;\r\n  font-size: 16px;\r\n  color: var(--text-dark);\r\n}\r\n\r\n.chevron {\r\n  width: 10px;\r\n  height: 10px;\r\n  border-right: 2px solid #354052;\r\n  border-bottom: 2px solid #354052;\r\n  transform: rotate(45deg);\r\n}\r\n\r\n.dropdown-list {\r\n  position: absolute;\r\n  top: 100%;\r\n  left: 0;\r\n  right: 0;\r\n  background: #fcfbff;\r\n  border: 1px solid #c2bcd8;\r\n  border-radius: 8px;\r\n  max-height: 200px;\r\n  overflow-y: auto;\r\n  z-index: 100;\r\n  margin-top: 2px;\r\n}\r\n\r\n.dropdown-item {\r\n  padding: 12px 16px;\r\n  font-family: \"Inter\", sans-serif;\r\n  font-size: 16px;\r\n  color: var(--text-dark);\r\n  cursor: pointer;\r\n}\r\n\r\n.dropdown-item:hover,\r\n.dropdown-item.selected {\r\n  background-color: #dfdfff;\r\n}\r\n\r\n.room-size {\r\n  display: flex;\r\n  flex-direction: column;\r\n  gap: 24px;\r\n}\r\n\r\n.room-title {\r\n  font-family: \"Inter\", sans-serif;\r\n  font-weight: 500;\r\n  font-size: 16px;\r\n  color: var(--text-dark);\r\n}\r\n\r\n.room-options {\r\n  display: grid;\r\n  grid-template-rows: repeat(4, 24px); /* 4 items per column, each 24px tall */\r\n  grid-auto-flow: column; /* Fill top-to-bottom in each column */\r\n  gap: 16px 16px; /* 16px vertical gap between items, 16px horizontal gap between columns */\r\n  width: auto; /* Let the width grow based on columns */\r\n  flex: none;\r\n  order: 1;\r\n  flex-grow: 0;\r\n}\r\n\r\n.room-option {\r\n  display: flex;\r\n  flex-direction: row;\r\n  align-items: center;\r\n  padding: 0;\r\n  gap: 8px;\r\n  width: 162px;\r\n  height: 24px;\r\n  flex: none;\r\n  flex-grow: 0;\r\n}\r\n\r\n.room-option input[type=\"radio\"] {\r\n  display: none;\r\n}\r\n\r\n.custom-checkbox {\r\n  width: 24px;\r\n  height: 24px;\r\n  border: 1px solid #c2bcd8;\r\n  border-radius: 4px;\r\n  background: #f5f3fb;\r\n  position: relative;\r\n  flex: none;\r\n  order: 0;\r\n  flex-grow: 0;\r\n}\r\n\r\n.room-option input[type=\"radio\"]:checked + .custom-checkbox::after {\r\n  content: \"\";\r\n  position: absolute;\r\n  top: 50%;\r\n  left: 50%;\r\n  width: 10px;\r\n  height: 6px;\r\n  border: solid white;\r\n  border-width: 0 0 2px 2px;\r\n  transform: translate(-50%, -50%) rotate(-45deg);\r\n}\r\n\r\n.room-option input[type=\"radio\"]:checked + .custom-checkbox {\r\n  background: var(--primary-color);\r\n  border-color: var(--primary-color);\r\n}\r\n\r\n.room-label {\r\n  width: 130px;\r\n  height: 17px;\r\n  font-family: \"Inter\", sans-serif;\r\n  font-style: normal;\r\n  font-weight: 400;\r\n  font-size: 14px;\r\n  line-height: 120%;\r\n  color: var(--text-dark);\r\n  flex: none;\r\n  order: 1;\r\n  flex-grow: 0;\r\n}\r\n.error-message {\r\n  font-family: \"Inter\", sans-serif;\r\n  font-weight: 400; /* Matches p and room-label */\r\n  font-size: 16px; /* Matches input and dropdown text */\r\n  line-height: 24px; /* Matches p */\r\n  color: #d32f2f; /* Red color for errors, consistent with common UI patterns */\r\n  margin-top: 8px; /* Aligns with form-group gap */\r\n}\r\n",
                    "styleUrl": "./booking-page.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "fb",
                        "type": "FormBuilder",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "store",
                        "type": "Store",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "cdr",
                        "type": "ChangeDetectorRef",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "route",
                        "type": "ActivatedRoute",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 96,
                "jsdoctags": [
                    {
                        "name": "fb",
                        "type": "FormBuilder",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "store",
                        "type": "Store",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "cdr",
                        "type": "ChangeDetectorRef",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "route",
                        "type": "ActivatedRoute",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "extends": [],
            "implements": [
                "OnInit"
            ],
            "templateData": "<!-- src/app/booking/booking-page/booking-page.component.html -->\r\n<div class=\"main-container\">\r\n  <a href=\"#\" class=\"go-back\"\r\n    ><img src=\"go-back.svg\" alt=\"Go back icon\" /> Go back</a\r\n  >\r\n  <h2 class=\"section-title\">Book your workspace</h2>\r\n\r\n  @if (loading$ | async) {\r\n  <div class=\"loading\">Loading...</div>\r\n  } @if (error$ | async; as error) {\r\n  <div class=\"error-message\">Error: {{ error }}</div>\r\n  }\r\n\r\n  <form [formGroup]=\"form\" (ngSubmit)=\"submit()\">\r\n    <div class=\"flex\">\r\n      <div class=\"workspace-card long-card\">\r\n        <h3>Reservation details</h3>\r\n\r\n        <div class=\"form-group\">\r\n          <h4>Name</h4>\r\n          <input\r\n            type=\"text\"\r\n            placeholder=\"Enter your name\"\r\n            formControlName=\"name\"\r\n          />\r\n          @if (form.get('name')?.touched && form.get('name')?.invalid) {\r\n          <div class=\"error-message\">Name is required.</div>\r\n          }\r\n        </div>\r\n\r\n        <div class=\"form-group\">\r\n          <h4>Email</h4>\r\n          <input\r\n            type=\"email\"\r\n            placeholder=\"Enter your email\"\r\n            formControlName=\"email\"\r\n          />\r\n          @if (form.get('email')?.touched && form.get('email')?.invalid) {\r\n          <div class=\"error-message\">A valid email is required.</div>\r\n          }\r\n        </div>\r\n\r\n        <div class=\"form-group\">\r\n          <h4>Workspace type</h4>\r\n          <div\r\n            class=\"dropdown-container\"\r\n            (clickOutside)=\"closeDropdown('room')\"\r\n          >\r\n            <div class=\"dropdown-field\" (click)=\"toggleDropdown('room')\">\r\n              <span class=\"field-label\">\r\n                {{ form.get(\"room\")?.value?.name || \"Select room type\" }}\r\n              </span>\r\n              <span class=\"chevron\"></span>\r\n            </div>\r\n            @if (openDropdown === 'room') {\r\n            <ul class=\"dropdown-list\">\r\n              @for (workspace of workspaceOptions$ | async; track workspace.id)\r\n              {\r\n              <li\r\n                class=\"dropdown-item\"\r\n                [class.selected]=\"form.get('room')?.value?.id === workspace.id\"\r\n                (click)=\"selectRoom(workspace)\"\r\n              >\r\n                {{ workspace.name }}\r\n              </li>\r\n              }\r\n            </ul>\r\n            }\r\n          </div>\r\n          @if (form.get('room')?.touched && form.get('room')?.invalid) {\r\n          <div class=\"error-message\">Please select a room type.</div>\r\n          }\r\n        </div>\r\n\r\n        <div class=\"room-size\">\r\n          <div class=\"room-title\">What room size do you need?</div>\r\n          <div class=\"room-options\">\r\n            @for (availability of availabilities$ | async; track\r\n            availability.id) {\r\n            <label class=\"room-option\">\r\n              <input\r\n                type=\"radio\"\r\n                formControlName=\"roomSize\"\r\n                [value]=\"availability\"\r\n              />\r\n              <span class=\"custom-checkbox\"></span>\r\n              <span class=\"room-label\">\r\n                Room for {{ availability.capacityOption }}\r\n                {{ availability.capacityOption === 1 ? \"person\" : \"people\" }}\r\n              </span>\r\n            </label>\r\n            } @empty {\r\n            <div class=\"error-message\">\r\n              Please select a room to see available sizes.\r\n            </div>\r\n            }\r\n          </div>\r\n          @if (form.get('roomSize')?.touched && form.get('roomSize')?.invalid) {\r\n          <div class=\"error-message\">Please select a room size.</div>\r\n          }\r\n        </div>\r\n      </div>\r\n\r\n      <div class=\"workspace-card short-card\">\r\n        <h3>Choose date and time</h3>\r\n\r\n        <div class=\"form-group\">\r\n          <h4>Start date</h4>\r\n          <div class=\"date-picker\">\r\n            <div class=\"datepicker-column\">\r\n              <label for=\"dateStartMonth\">Month</label>\r\n              <select\r\n                id=\"dateStartMonth\"\r\n                (change)=\"selectDatePart('dateStart', 'month', $event)\"\r\n                [value]=\"form.get('dateStart')?.value?.month || ''\"\r\n              >\r\n                <option value=\"\" disabled selected>Select Month</option>\r\n                @for (month of months; track month; let i = $index) {\r\n                <option [value]=\"i + 1\">{{ month }}</option>\r\n                }\r\n              </select>\r\n            </div>\r\n            <div class=\"datepicker-column\">\r\n              <label for=\"dateStartYear\">Year</label>\r\n              <select\r\n                id=\"dateStartYear\"\r\n                (change)=\"selectDatePart('dateStart', 'year', $event)\"\r\n                [value]=\"form.get('dateStart')?.value?.year || ''\"\r\n              >\r\n                <option value=\"\" disabled selected>Select Year</option>\r\n                @for (year of years; track year) {\r\n                <option [value]=\"year\">{{ year }}</option>\r\n                }\r\n              </select>\r\n            </div>\r\n            <div class=\"datepicker-column\">\r\n              <label for=\"dateStartDay\">Day</label>\r\n              <select\r\n                id=\"dateStartDay\"\r\n                (change)=\"selectDatePart('dateStart', 'day', $event)\"\r\n                [value]=\"form.get('dateStart')?.value?.day || ''\"\r\n              >\r\n                <option value=\"\" disabled selected>Select Day</option>\r\n                @for (day of days; track day) {\r\n                <option [value]=\"day\">{{ day }}</option>\r\n                }\r\n              </select>\r\n            </div>\r\n          </div>\r\n          @if (form.touched && form.hasError('incompleteDate')) {\r\n          <div class=\"error-message\">\r\n            All date fields (day, month, year) are required.\r\n          </div>\r\n          }\r\n        </div>\r\n\r\n        <div class=\"form-group\">\r\n          <h4>End date</h4>\r\n          <div class=\"date-picker\">\r\n            <div class=\"datepicker-column\">\r\n              <label for=\"dateEndMonth\">Month</label>\r\n              <select\r\n                id=\"dateEndMonth\"\r\n                (change)=\"selectDatePart('dateEnd', 'month', $event)\"\r\n                [value]=\"form.get('dateEnd')?.value?.month || ''\"\r\n              >\r\n                <option value=\"\" disabled selected>Select Month</option>\r\n                @for (month of months; track month; let i = $index) {\r\n                <option [value]=\"i + 1\">{{ month }}</option>\r\n                }\r\n              </select>\r\n            </div>\r\n            <div class=\"datepicker-column\">\r\n              <label for=\"dateEndYear\">Year</label>\r\n              <select\r\n                id=\"dateEndYear\"\r\n                (change)=\"selectDatePart('dateEnd', 'year', $event)\"\r\n                [value]=\"form.get('dateEnd')?.value?.year || ''\"\r\n              >\r\n                <option value=\"\" disabled selected>Select Year</option>\r\n                @for (year of years; track year) {\r\n                <option [value]=\"year\">{{ year }}</option>\r\n                }\r\n              </select>\r\n            </div>\r\n            <div class=\"datepicker-column\">\r\n              <label for=\"dateEndDay\">Day</label>\r\n              <select\r\n                id=\"dateEndDay\"\r\n                (change)=\"selectDatePart('dateEnd', 'day', $event)\"\r\n                [value]=\"form.get('dateEnd')?.value?.day || ''\"\r\n              >\r\n                <option value=\"\" disabled selected>Select Day</option>\r\n                @for (day of days; track day) {\r\n                <option [value]=\"day\">{{ day }}</option>\r\n                }\r\n              </select>\r\n            </div>\r\n          </div>\r\n          @if (form.touched && form.hasError('incompleteDate')) {\r\n          <div class=\"error-message\">\r\n            All date fields (day, month, year) are required.\r\n          </div>\r\n          }\r\n        </div>\r\n\r\n        <div class=\"form-group\">\r\n          <h4>Start time</h4>\r\n          <div\r\n            class=\"dropdown-container\"\r\n            (clickOutside)=\"closeDropdown('timeStart')\"\r\n          >\r\n            <div class=\"dropdown-field\" (click)=\"toggleDropdown('timeStart')\">\r\n              <span class=\"field-label\">\r\n                {{ form.get(\"timeStart\")?.value || \"Choose start time\" }}\r\n              </span>\r\n              <span class=\"chevron\"></span>\r\n            </div>\r\n            @if (openDropdown === 'timeStart') {\r\n            <ul class=\"dropdown-list\">\r\n              @for (time of timeOptions; track time) {\r\n              <li\r\n                class=\"dropdown-item\"\r\n                [class.selected]=\"form.get('timeStart')?.value === time\"\r\n                (click)=\"selectTime('timeStart', time)\"\r\n              >\r\n                {{ time }}\r\n              </li>\r\n              }\r\n            </ul>\r\n            }\r\n          </div>\r\n        </div>\r\n\r\n        <div class=\"form-group\">\r\n          <h4>End time</h4>\r\n          <div\r\n            class=\"dropdown-container\"\r\n            (clickOutside)=\"closeDropdown('timeEnd')\"\r\n          >\r\n            <div class=\"dropdown-field\" (click)=\"toggleDropdown('timeEnd')\">\r\n              <span class=\"field-label\">\r\n                {{ form.get(\"timeEnd\")?.value || \"Choose end time\" }}\r\n              </span>\r\n              <span class=\"chevron\"></span>\r\n            </div>\r\n            @if (openDropdown === 'timeEnd') {\r\n            <ul class=\"dropdown-list\">\r\n              @for (time of timeOptions; track time) {\r\n              <li\r\n                class=\"dropdown-item\"\r\n                [class.selected]=\"form.get('timeEnd')?.value === time\"\r\n                (click)=\"selectTime('timeEnd', time)\"\r\n              >\r\n                {{ time }}\r\n              </li>\r\n              }\r\n            </ul>\r\n            }\r\n          </div>\r\n        </div>\r\n\r\n        @if (form.touched && form.hasError('invalidTimeRange')) {\r\n        <div class=\"error-message\">End time must be after start time.</div>\r\n        } @if (form.touched && form.hasError('maxDurationExceeded')) {\r\n        <div class=\"error-message\">Booking cannot exceed 30 days.</div>\r\n        }\r\n\r\n        <app-button\r\n          [fullWidth]=\"true\"\r\n          [disabled]=\"!form.valid || (loading$ | async)\"\r\n          (onClick)=\"submit()\"\r\n        >\r\n          Submit\r\n        </app-button>\r\n      </div>\r\n    </div>\r\n  </form>\r\n\r\n  <app-booking-confirmation\r\n    *ngIf=\"showConfirmation\"\r\n    [booking]=\"bookingData\"\r\n    [isError]=\"isError\"\r\n    [errorMessage]=\"conflictError\"\r\n    (close)=\"closeConfirmation()\"\r\n  ></app-booking-confirmation>\r\n</div>\r\n"
        },
        {
            "name": "ButtonComponent",
            "id": "component-ButtonComponent-d6f00bf9ee2554d25be27b14ed92e0dd349b0f1103f36145bea9f2a18dc2ba6b1914cfee87fb1ddbfd901cb60a5070cd9e742814c90d67e5824bdb201268fa62",
            "file": "src/app/shared/button/button.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-button",
            "styleUrls": [
                "./button.component.scss"
            ],
            "styles": [],
            "template": "<button\n  class=\"button\"\n  [ngClass]=\"{\n    'button--full-width': fullWidth,\n    'button--fixed-width': fixedWidth,\n    'button--icon': icon,\n    'button--delete': variant === 'delete'\n  }\"\n  [disabled]=\"disabled\"\n  (click)=\"handleClick()\"\n>\n  <img *ngIf=\"icon\" [src]=\"icon\" [alt]=\"iconAlt\" class=\"button-icon\" />\n  <ng-content></ng-content>\n</button>\n",
            "templateUrl": [],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [
                {
                    "name": "disabled",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 34,
                    "type": "boolean | null",
                    "decorators": []
                },
                {
                    "name": "fixedWidth",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 29,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "fullWidth",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 28,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "icon",
                    "defaultValue": "null",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 30,
                    "type": "string | null",
                    "decorators": []
                },
                {
                    "name": "iconAlt",
                    "defaultValue": "''",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 31,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "link",
                    "defaultValue": "null",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 33,
                    "type": "string[] | null",
                    "decorators": []
                },
                {
                    "name": "variant",
                    "defaultValue": "'primary'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 32,
                    "type": "\"primary\" | \"delete\" | null",
                    "decorators": []
                }
            ],
            "outputsClass": [
                {
                    "name": "onClick",
                    "defaultValue": "new EventEmitter<void>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 35,
                    "type": "EventEmitter"
                }
            ],
            "propertiesClass": [],
            "methodsClass": [
                {
                    "name": "handleClick",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 39,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": true,
            "imports": [
                {
                    "name": "CommonModule",
                    "type": "module"
                }
            ],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { CommonModule } from '@angular/common';\r\nimport { Component, Input, Output, EventEmitter } from '@angular/core';\r\nimport { Router } from '@angular/router';\r\n\r\n@Component({\r\n  selector: 'app-button',\r\n  standalone: true,\r\n  imports: [CommonModule],\r\n  styleUrls: ['./button.component.scss'],\r\n  template: `\r\n    <button\r\n      class=\"button\"\r\n      [ngClass]=\"{\r\n        'button--full-width': fullWidth,\r\n        'button--fixed-width': fixedWidth,\r\n        'button--icon': icon,\r\n        'button--delete': variant === 'delete'\r\n      }\"\r\n      [disabled]=\"disabled\"\r\n      (click)=\"handleClick()\"\r\n    >\r\n      <img *ngIf=\"icon\" [src]=\"icon\" [alt]=\"iconAlt\" class=\"button-icon\" />\r\n      <ng-content></ng-content>\r\n    </button>\r\n  `,\r\n})\r\nexport class ButtonComponent {\r\n  @Input() fullWidth = false;\r\n  @Input() fixedWidth = false;\r\n  @Input() icon: string | null = null;\r\n  @Input() iconAlt = '';\r\n  @Input() variant: 'primary' | 'delete' | null = 'primary';\r\n  @Input() link: string[] | null = null;\r\n  @Input() disabled: boolean | null = false;\r\n  @Output() onClick = new EventEmitter<void>();\r\n\r\n  constructor(private router: Router) {}\r\n\r\n  handleClick(): void {\r\n    this.onClick.emit();\r\n\r\n    if (this.link && !this.disabled) {\r\n      this.router.navigate(this.link);\r\n    }\r\n  }\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ".button {\r\n  background: var(--primary-color);\r\n  color: var(--white);\r\n  border: none;\r\n  border-radius: 8px;\r\n  padding: 12px 24px;\r\n  font-family: \"Inter\", sans-serif;\r\n  font-weight: 600;\r\n  font-size: 16px;\r\n  cursor: pointer;\r\n  transition: background-color 0.3s ease;\r\n  width: auto;\r\n  display: flex;\r\n  align-items: center;\r\n  justify-content: center;\r\n  gap: 8px; /* Space between icon and text */\r\n}\r\n\r\n.button--full-width {\r\n  width: 100%;\r\n  padding: 12px;\r\n}\r\n\r\n.button--fixed-width {\r\n  width: 200px;\r\n  height: 48px;\r\n}\r\n\r\n.button--icon {\r\n  width: 44px;\r\n  height: 44px;\r\n  padding: 0;\r\n}\r\n\r\n.button--delete {\r\n  background: transparent;\r\n  border: 1px solid #f56e6e;\r\n  color: transparent;\r\n}\r\n\r\n.button:disabled {\r\n  background-color: #e9e8fd;\r\n  color: #a3a3c2;\r\n  cursor: not-allowed;\r\n}\r\n\r\n.button-icon {\r\n  width: 24px;\r\n  height: 24px;\r\n}\r\n",
                    "styleUrl": "./button.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "router",
                        "type": "Router",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 35,
                "jsdoctags": [
                    {
                        "name": "router",
                        "type": "Router",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "extends": []
        },
        {
            "name": "CoworkingDetailsComponent",
            "id": "component-CoworkingDetailsComponent-ad1c69c7b630d070f5cd5f946c1d0388dfe8a3b4e6b1516d86395865e1b763a9c9a54d4c423e3fac3b62675c00179812958b50db4fcbb04969e10bbfa5119aff",
            "file": "src/app/coworking/coworking-details/coworking-details.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-coworking-details",
            "styleUrls": [
                "./coworking-details.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./coworking-details.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "amenityError$",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Observable<string | null>",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 58
                },
                {
                    "name": "amenityLoading$",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Observable<boolean>",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 54
                },
                {
                    "name": "availabilityError$",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Observable<string | null>",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 60
                },
                {
                    "name": "availabilityLoading$",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Observable<boolean>",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 56
                },
                {
                    "name": "coworkingId",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 49
                },
                {
                    "name": "isLoading$",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Observable<boolean>",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 52
                },
                {
                    "name": "photoError$",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Observable<string | null>",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 59
                },
                {
                    "name": "photoLoading$",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Observable<boolean>",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 55
                },
                {
                    "name": "workspaceError$",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Observable<string | null>",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 57
                },
                {
                    "name": "workspaceLoading$",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Observable<boolean>",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 53
                },
                {
                    "name": "workspaces$",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Observable<ExtendedWorkspace[]>",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 51
                }
            ],
            "methodsClass": [
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 64,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "workspaceAvailabilities",
                    "args": [
                        {
                            "name": "workspace",
                            "type": "ExtendedWorkspace",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 156,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "workspace",
                            "type": "ExtendedWorkspace",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": false,
            "imports": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, OnInit } from '@angular/core';\r\nimport { Store } from '@ngrx/store';\r\nimport { Observable, combineLatest, map } from 'rxjs';\r\nimport { Workspace } from '../../contracts/Workspace';\r\nimport { Amenity } from '../../contracts/Amenity';\r\nimport { loadAmenitiesByWorkspace } from '../../store/amenity/amenity.actions';\r\nimport {\r\n  selectAmenityLoading,\r\n  selectAmenityError,\r\n  selectAllAmenities,\r\n} from '../../store/amenity/amenity.selectors';\r\nimport { loadAvailabilitiesByWorkspace } from '../../store/availability/availability.actions';\r\nimport {\r\n  selectAvailabilityLoading,\r\n  selectAvailabilityError,\r\n  selectAllAvailabilities,\r\n} from '../../store/availability/availability.selectors';\r\nimport { loadPhotosByWorkspace } from '../../store/photo/photo.actions';\r\nimport {\r\n  selectPhotoLoading,\r\n  selectPhotoError,\r\n  selectAllPhotos,\r\n} from '../../store/photo/photo.selectors';\r\nimport { loadWorkspacesByCoworking } from '../../store/workspace/workspace.actions';\r\nimport {\r\n  selectWorkspacesByCoworkingLoading,\r\n  selectWorkspacesByCoworkingError,\r\n  selectWorkspacesByCoworking,\r\n} from '../../store/workspace/workspaces.selectors';\r\nimport { Availability } from '../../contracts/Availability';\r\nimport { ActivatedRoute } from '@angular/router';\r\n\r\ninterface ExtendedWorkspace extends Workspace {\r\n  mainPhoto: string;\r\n  photos: string[];\r\n  amenities: Amenity[];\r\n  availabilities: Availability[];\r\n  isBooked: boolean;\r\n  bookingInfo: string;\r\n}\r\n\r\n@Component({\r\n  selector: 'app-coworking-details',\r\n  standalone: false,\r\n  templateUrl: './coworking-details.component.html',\r\n  styleUrls: ['./coworking-details.component.scss'],\r\n})\r\nexport class CoworkingDetailsComponent implements OnInit {\r\n  coworkingId!: string;\r\n\r\n  workspaces$!: Observable<ExtendedWorkspace[]>;\r\n  isLoading$!: Observable<boolean>;\r\n  workspaceLoading$!: Observable<boolean>;\r\n  amenityLoading$!: Observable<boolean>;\r\n  photoLoading$!: Observable<boolean>;\r\n  availabilityLoading$!: Observable<boolean>;\r\n  workspaceError$!: Observable<string | null>;\r\n  amenityError$!: Observable<string | null>;\r\n  photoError$!: Observable<string | null>;\r\n  availabilityError$!: Observable<string | null>;\r\n\r\n  constructor(private store: Store, private route: ActivatedRoute) {}\r\n\r\n  ngOnInit(): void {\r\n    this.route.paramMap.subscribe((params) => {\r\n      this.coworkingId = params.get('id') || '';\r\n      this.store.dispatch(\r\n        loadWorkspacesByCoworking({ coworkingId: this.coworkingId })\r\n      );\r\n    });\r\n\r\n    this.workspaceLoading$ = this.store.select(\r\n      selectWorkspacesByCoworkingLoading\r\n    );\r\n    this.amenityLoading$ = this.store.select(selectAmenityLoading);\r\n    this.photoLoading$ = this.store.select(selectPhotoLoading);\r\n    this.availabilityLoading$ = this.store.select(selectAvailabilityLoading);\r\n    this.workspaceError$ = this.store.select(selectWorkspacesByCoworkingError);\r\n    this.amenityError$ = this.store.select(selectAmenityError);\r\n    this.photoError$ = this.store.select(selectPhotoError);\r\n    this.availabilityError$ = this.store.select(selectAvailabilityError);\r\n\r\n    this.isLoading$ = combineLatest([\r\n      this.workspaceLoading$,\r\n      this.amenityLoading$,\r\n      this.photoLoading$,\r\n      this.availabilityLoading$,\r\n    ]).pipe(map(([w, a, p, av]) => w || a || p || av));\r\n\r\n    const workspaces$ = this.store\r\n      .select(selectWorkspacesByCoworking)\r\n      .pipe(map((w) => w ?? []));\r\n\r\n    // Загружаем связанные сущности после получения рабочих пространств\r\n    workspaces$.subscribe((workspaces) => {\r\n      workspaces.forEach((workspace) => {\r\n        this.store.dispatch(\r\n          loadAmenitiesByWorkspace({ workspaceId: workspace.id })\r\n        );\r\n        this.store.dispatch(\r\n          loadPhotosByWorkspace({ workspaceId: workspace.id })\r\n        );\r\n        this.store.dispatch(\r\n          loadAvailabilitiesByWorkspace({ workspaceId: workspace.id })\r\n        );\r\n      });\r\n    });\r\n\r\n    this.workspaces$ = combineLatest([\r\n      workspaces$,\r\n      this.store.select(selectAllAmenities).pipe(map((a) => a ?? [])),\r\n      this.store.select(selectAllPhotos).pipe(map((p) => p ?? [])),\r\n      this.store.select(selectAllAvailabilities).pipe(map((a) => a ?? [])),\r\n    ]).pipe(\r\n      map(([workspaces, amenities, photos, availabilities]) =>\r\n        workspaces.map((workspace) => {\r\n          const workspaceAmenities = amenities.filter(\r\n            (a) => a.workspaceId === workspace.id\r\n          );\r\n          const workspacePhotos = photos.filter(\r\n            (p) => p.workspaceId === workspace.id\r\n          );\r\n          const workspaceAvailabilities = availabilities.filter(\r\n            (a) => a.workspaceId === workspace.id\r\n          );\r\n\r\n          const mainPhoto = workspacePhotos[0]?.url ?? 'default-main.jpg';\r\n          const otherPhotos = workspacePhotos.slice(1, 5).map((p) => p.url);\r\n\r\n          const currentDate = new Date('2025-06-04T20:10:00+03:00');\r\n          const isBooked = workspaceAvailabilities.some(\r\n            (a) =>\r\n              a.capacityOption === 2 &&\r\n              new Date('2025-05-18') <= currentDate &&\r\n              currentDate <= new Date('2025-05-23')\r\n          );\r\n\r\n          const bookingInfo = isBooked\r\n            ? 'Room for 2 people May 18, 2025 to May 23, 2025'\r\n            : '';\r\n\r\n          return {\r\n            ...workspace,\r\n            mainPhoto,\r\n            photos: otherPhotos,\r\n            amenities: workspaceAmenities,\r\n            availabilities: workspaceAvailabilities,\r\n            isBooked,\r\n            bookingInfo,\r\n          };\r\n        })\r\n      )\r\n    );\r\n  }\r\n\r\n  workspaceAvailabilities(workspace: ExtendedWorkspace): any {\r\n    if (workspace.availabilityUnit === 'desk') {\r\n      return workspace.availabilities.reduce((sum, a) => sum + a.quantity, 0);\r\n    } else if (workspace.availabilityUnit === 'room') {\r\n      return workspace.availabilities.sort(\r\n        (a, b) => a.capacityOption - b.capacityOption\r\n      );\r\n    }\r\n    return [];\r\n  }\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ".workspaces-list {\r\n  display: flex;\r\n  flex-direction: column;\r\n  gap: 24px;\r\n}\r\n\r\n.card-main {\r\n  display: flex;\r\n  gap: 32px;\r\n}\r\n\r\n.card-photos {\r\n  display: flex;\r\n  flex-direction: column;\r\n  gap: 12px;\r\n  width: 340px;\r\n}\r\n\r\n.main-photo {\r\n  height: 227px;\r\n  background-size: cover;\r\n  background-position: center;\r\n  border-radius: var(--card-radius);\r\n}\r\n.main-photo img,\r\n.thumbnail img {\r\n  width: 100%;\r\n  height: 100%;\r\n  object-fit: cover;\r\n  border-radius: 8px;\r\n  display: block;\r\n}\r\n\r\n.photo-carousel {\r\n  display: flex;\r\n  gap: 8px;\r\n  flex-wrap: wrap;\r\n  max-width: 340px;\r\n}\r\n\r\n.thumbnail {\r\n  width: 79px;\r\n  height: 64px;\r\n  background-size: cover;\r\n  background-position: center;\r\n  border-radius: 8px;\r\n  flex-grow: 1;\r\n}\r\n\r\n.card-content {\r\n  flex: 1;\r\n  display: flex;\r\n  flex-direction: column;\r\n  padding: 12px 0;\r\n  gap: 32px;\r\n}\r\n\r\n.card-text {\r\n  display: flex;\r\n  gap: 48px;\r\n}\r\n\r\n.card-description {\r\n  flex: 1;\r\n}\r\n\r\n.amenities,\r\n.availability {\r\n  display: flex;\r\n  flex-direction: column;\r\n  gap: 12px;\r\n}\r\n\r\n.amenities-list {\r\n  display: flex;\r\n  gap: 12px;\r\n}\r\n\r\n.amenity-icon {\r\n  width: 44px;\r\n  height: 44px;\r\n  background: #f5f3fb;\r\n  border-radius: 12px;\r\n  display: flex;\r\n  align-items: center;\r\n  justify-content: center;\r\n}\r\n\r\n.availability-item {\r\n  display: flex;\r\n  align-items: center;\r\n  gap: 8px;\r\n}\r\n\r\n.booked-notice {\r\n  background: #eaf7ee;\r\n  border-radius: 8px;\r\n  padding: 10px 16px;\r\n  display: flex;\r\n  align-items: center;\r\n  gap: 8px;\r\n  margin-top: auto;\r\n}\r\n\r\n.check-icon {\r\n  width: 24px;\r\n  height: 24px;\r\n  background: #73c189;\r\n  border-radius: 50%;\r\n  display: inline-flex;\r\n  align-items: center;\r\n  justify-content: center;\r\n}\r\n\r\n.check-icon img {\r\n  width: 16px;\r\n  height: 16px;\r\n}\r\n",
                    "styleUrl": "./coworking-details.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "store",
                        "type": "Store",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "route",
                        "type": "ActivatedRoute",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 60,
                "jsdoctags": [
                    {
                        "name": "store",
                        "type": "Store",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "route",
                        "type": "ActivatedRoute",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "extends": [],
            "implements": [
                "OnInit"
            ],
            "templateData": "<div class=\"main-container\">\r\n  <h2 class=\"section-title\">Available workspaces</h2>\r\n\r\n  @if (isLoading$ | async) {\r\n  <div class=\"loading\">Loading...</div>\r\n  } @if (workspaceError$ | async) {\r\n  <div class=\"error-message\">\r\n    Failed to load workspaces: {{ workspaceError$ | async }}\r\n  </div>\r\n  } @if (amenityError$ | async) {\r\n  <div class=\"error-message\">\r\n    Failed to load amenities: {{ amenityError$ | async }}\r\n  </div>\r\n  } @if (photoError$ | async) {\r\n  <div class=\"error-message\">\r\n    Failed to load photos: {{ photoError$ | async }}\r\n  </div>\r\n  } @if (availabilityError$ | async) {\r\n  <div class=\"error-message\">\r\n    Failed to load availabilities: {{ availabilityError$ | async }}\r\n  </div>\r\n  }\r\n\r\n  <div class=\"workspaces-list\">\r\n    @for (workspace of workspaces$ | async; track workspace.id) {\r\n    <div class=\"workspace-card\">\r\n      <div class=\"card-main\">\r\n        <div class=\"card-photos\">\r\n          <div\r\n            class=\"main-photo\"\r\n            [style.backgroundImage]=\"'url(' + workspace.mainPhoto + ')'\"\r\n          >\r\n            <img [src]=\"workspace.mainPhoto\" alt=\"Main photo\" />\r\n          </div>\r\n          <div class=\"photo-carousel\">\r\n            @for (photo of workspace.photos; track $index) {\r\n            <div\r\n              class=\"thumbnail\"\r\n              [style.backgroundImage]=\"'url(' + photo + ')'\"\r\n            >\r\n              <img [src]=\"photo\" alt=\"Thumbnail\" />\r\n            </div>\r\n            }\r\n          </div>\r\n        </div>\r\n\r\n        <div class=\"card-content\">\r\n          <div class=\"card-text\">\r\n            <div class=\"card-description\">\r\n              <h3>{{ workspace.name }}</h3>\r\n              <p class=\"description-text\">{{ workspace.description }}</p>\r\n            </div>\r\n            <app-button [link]=\"['/booking', coworkingId]\">Book now</app-button>\r\n          </div>\r\n\r\n          <div class=\"card-stats\">\r\n            <div class=\"amenities\">\r\n              <h4>Amenities</h4>\r\n              <div class=\"amenities-list\">\r\n                @for (amenity of workspace.amenities; track amenity.id) {\r\n                <div class=\"amenity-icon\">\r\n                  <img\r\n                    [src]=\"'amenities/' + amenity.name + '.svg'\"\r\n                    [alt]=\"amenity.name\"\r\n                  />\r\n                </div>\r\n                }\r\n              </div>\r\n            </div>\r\n\r\n            <div class=\"availability\">\r\n              <h4>Availability</h4>\r\n              @if (workspace.availabilityUnit === 'desk') {\r\n              <div class=\"availability-item\">\r\n                <div class=\"availability-icon\">\r\n                  <img src=\"amenities/armchair.svg\" />\r\n                </div>\r\n                <span\r\n                  >{{ workspaceAvailabilities(workspace) }}\r\n                  {{ workspace.availabilityUnit }}</span\r\n                >\r\n              </div>\r\n              } @if (workspace.availabilityUnit === 'room') {\r\n              <div class=\"availability-list\">\r\n                @for (availability of workspaceAvailabilities(workspace); track\r\n                availability.id) {\r\n                <div class=\"availability-item\">\r\n                  <span>\r\n                    {{ availability.quantity }}\r\n                    {{ workspace.availabilityUnit }} for\r\n                    {{ availability.capacityOption }} people\r\n                  </span>\r\n                </div>\r\n                }\r\n              </div>\r\n              }\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n\r\n      @if (workspace.isBooked) {\r\n      <div class=\"booked-notice\">\r\n        <span class=\"check-icon\"><img src=\"done.svg\" /></span>\r\n        <p class=\"booked-message\">\r\n          This workspace is already booked by you!\r\n          <strong class=\"highlighted-text\">{{ workspace.bookingInfo }}</strong>\r\n        </p>\r\n      </div>\r\n      }\r\n    </div>\r\n    }\r\n  </div>\r\n</div>\r\n"
        },
        {
            "name": "CoworkingListComponent",
            "id": "component-CoworkingListComponent-0d41cbb264c621b0b0ca8451d44990bb26fa1392aa9f96be0e2ff0f09376d937534fcbd13bfe78c304bc5776cea7fa4bdffbb820fd12db3c6f997995feaac9cb",
            "file": "src/app/coworking/coworking-list/coworking-list.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-coworking-list",
            "styleUrls": [],
            "styles": [],
            "templateUrl": [
                "./coworking-list.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "coworkings$",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Observable<[]>",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 22
                },
                {
                    "name": "error$",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Observable<string | null>",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 24
                },
                {
                    "name": "isLoading$",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Observable<boolean>",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 23
                }
            ],
            "methodsClass": [
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 28,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": false,
            "imports": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component } from '@angular/core';\r\nimport { Store } from '@ngrx/store';\r\nimport { Coworking } from '../../contracts/Coworking';\r\nimport { Photo } from '../../contracts/Photo';\r\nimport { Observable, combineLatest, map, tap } from 'rxjs';\r\nimport { loadCoworkings } from '../../store/coworking/coworking.actions';\r\nimport {\r\n  selectCoworkingError,\r\n  selectCoworkingLoading,\r\n  selectCoworkings,\r\n} from '../../store/coworking/coworking.selectors';\r\nimport { loadPhotosByCoworking } from '../../store/photo/photo.actions';\r\nimport { selectAllPhotos } from '../../store/photo/photo.selectors';\r\n\r\n@Component({\r\n  selector: 'app-coworking-list',\r\n  standalone: false,\r\n  templateUrl: './coworking-list.component.html',\r\n  styleUrl: './coworking-list.component.scss',\r\n})\r\nexport class CoworkingListComponent {\r\n  coworkings$!: Observable<(Coworking & { photos: Photo[] })[]>;\r\n  isLoading$!: Observable<boolean>;\r\n  error$!: Observable<string | null>;\r\n\r\n  constructor(private store: Store) {}\r\n\r\n  ngOnInit(): void {\r\n    this.isLoading$ = this.store.select(selectCoworkingLoading);\r\n    this.error$ = this.store.select(selectCoworkingError);\r\n\r\n    const coworkings$ = this.store.select(selectCoworkings);\r\n    const allPhotos$ = this.store.select(selectAllPhotos);\r\n\r\n    // Диспатчим загрузку coworking'ов\r\n    this.store.dispatch(loadCoworkings());\r\n\r\n    // При каждом coworking'е диспатчим загрузку его фото\r\n    coworkings$\r\n      .pipe(\r\n        tap((coworkings) => {\r\n          coworkings.forEach((cw) =>\r\n            this.store.dispatch(loadPhotosByCoworking({ coworkingId: cw.id }))\r\n          );\r\n        })\r\n      )\r\n      .subscribe();\r\n\r\n    // Объединяем coworkings + photos\r\n    this.coworkings$ = combineLatest([coworkings$, allPhotos$]).pipe(\r\n      map(([coworkings, photos]) =>\r\n        coworkings.map((cw) => ({\r\n          ...cw,\r\n          photos: photos.filter((photo) => photo.coworkingId === cw.id),\r\n        }))\r\n      )\r\n    );\r\n  }\r\n}\r\n",
            "styleUrl": "./coworking-list.component.scss",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "store",
                        "type": "Store",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 24,
                "jsdoctags": [
                    {
                        "name": "store",
                        "type": "Store",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "extends": [],
            "templateData": "<div class=\"main-container\">\r\n  <h2 class=\"section-title\">Coworking List</h2>\r\n\r\n  <div class=\"workspaces-list\">\r\n    @for (coworking of coworkings$ | async; track coworking.id) {\r\n    <div class=\"workspace-card\">\r\n      <div\r\n        class=\"workspace-photo\"\r\n        [style.backgroundImage]=\"\r\n          'url(' +\r\n          (coworking.photos.length > 0\r\n            ? coworking.photos[0].url\r\n            : 'default-photo.png') +\r\n          ')'\r\n        \"\r\n      ></div>\r\n\r\n      <div class=\"workspace-content\">\r\n        <div class=\"workspace-title\">\r\n          <h3>{{ coworking.name }}</h3>\r\n          <div class=\"workspace-buttons\">\r\n            <app-button [link]=\"['/coworking', coworking.id]\"\r\n              >View Details</app-button\r\n            >\r\n          </div>\r\n        </div>\r\n\r\n        <div class=\"workspace-stats\">\r\n          <div class=\"stat-row\">\r\n            <span class=\"stat-text description-text\">\r\n              {{ coworking.description }}\r\n            </span>\r\n          </div>\r\n          <div class=\"stat-row\">\r\n            <span class=\"stat-text address-text\">\r\n              {{ coworking.address }}\r\n            </span>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </div>\r\n    }\r\n  </div>\r\n</div>\r\n"
        },
        {
            "name": "HeaderComponent",
            "id": "component-HeaderComponent-dcae1274d82c7734bb0ff23e7383a5b2029f83a39891d3e0eaf4d025e57b5670c55da8d083ddc9f5a8ab912c0549c760dca658048b5459b858b5b63948403276",
            "file": "src/app/header/header.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-header",
            "styleUrls": [],
            "styles": [],
            "templateUrl": [
                "./header.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": false,
            "imports": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component } from '@angular/core';\r\n\r\n@Component({\r\n  selector: 'app-header',\r\n  standalone: false,\r\n  templateUrl: './header.component.html',\r\n  styleUrl: './header.component.scss'\r\n})\r\nexport class HeaderComponent {\r\n\r\n}\r\n",
            "styleUrl": "./header.component.scss",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "extends": [],
            "templateData": "<header>\r\n  <img src=\"Logo.svg\" alt=\"Company Logo\" class=\"logo\" />\r\n  <nav>\r\n    <ul class=\"nav-list\">\r\n      <li><a href=\"coworking-list\" class=\"nav-link\">Coworkings</a></li>\r\n      <li><a href=\"my-bookings\" class=\"nav-link\">My Bookings</a></li>\r\n    </ul>\r\n  </nav>\r\n</header>\r\n"
        },
        {
            "name": "MyBookingsComponent",
            "id": "component-MyBookingsComponent-bc3123618cc4b0873e4dc9c62993d92660f76ad5d64828b71189cc7e0643900051f407f8c1c3bc8ca0a25a37a585689a97b78b179c4a6ec171915a829a8b443b",
            "file": "src/app/booking/my-bookings/my-bookings.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-my-bookings",
            "styleUrls": [
                "./my-bookings.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./my-bookings.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "bookings$",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Observable<BookingDetails[]>",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 25
                }
            ],
            "methodsClass": [
                {
                    "name": "calculateDays",
                    "args": [
                        {
                            "name": "start",
                            "type": "string | Date",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "end",
                            "type": "string | Date",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "number",
                    "typeParameters": [],
                    "line": 79,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "start",
                            "type": "string | Date",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "end",
                            "type": "string | Date",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "deleteBooking",
                    "args": [
                        {
                            "name": "bookingId",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 75,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "bookingId",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "goToCoworking",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 71,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 43,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "trackById",
                    "args": [
                        {
                            "name": "index",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "item",
                            "type": "BookingDetails",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "string",
                    "typeParameters": [],
                    "line": 90,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "index",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "item",
                            "type": "BookingDetails",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": false,
            "imports": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, OnInit } from '@angular/core';\r\nimport { Router, RouterModule } from '@angular/router';\r\nimport { Booking } from '../../contracts/Booking';\r\nimport { Workspace } from '../../contracts/Workspace';\r\nimport { combineLatest, Observable } from 'rxjs';\r\nimport { map } from 'rxjs/operators';\r\nimport { Store } from '@ngrx/store';\r\nimport * as BookingActions from '../../store/booking/booking.actions';\r\nimport * as WorkspaceActions from '../../store/workspace/workspace.actions';\r\nimport { selectAllBookings } from '../../store/booking/booking.selectors';\r\nimport { selectWorkspaceState } from '../../store/workspace/workspaces.selectors';\r\n\r\nexport interface BookingDetails {\r\n  booking: Booking;\r\n  workspace?: Workspace;\r\n}\r\n\r\n@Component({\r\n  selector: 'app-my-bookings',\r\n  standalone: false,\r\n  templateUrl: './my-bookings.component.html',\r\n  styleUrls: ['./my-bookings.component.scss'],\r\n})\r\nexport class MyBookingsComponent implements OnInit {\r\n  bookings$: Observable<BookingDetails[]>;\r\n\r\n  constructor(private router: Router, private store: Store) {\r\n    const bookings$ = this.store.select(selectAllBookings);\r\n    const workspaceState$ = this.store.select(selectWorkspaceState);\r\n\r\n    this.bookings$ = combineLatest([bookings$, workspaceState$]).pipe(\r\n      map(([bookings, workspaceState]) =>\r\n        bookings.map((booking) => {\r\n          const workspace = workspaceState.workspaces.find(\r\n            (w) => w.id === booking.workspaceId\r\n          );\r\n          return { booking, workspace };\r\n        })\r\n      )\r\n    );\r\n  }\r\n\r\n  ngOnInit(): void {\r\n    const email = localStorage.getItem('email');\r\n    if (email) {\r\n      this.store.dispatch(BookingActions.loadBookingsByUserEmail({ email }));\r\n\r\n      this.store.select(selectAllBookings).subscribe((bookings) => {\r\n        const workspaceIds = [...new Set(bookings.map((b) => b.workspaceId))];\r\n        workspaceIds.forEach((id) => {\r\n          this.store.dispatch(WorkspaceActions.loadWorkspaceById({ id }));\r\n        });\r\n      });\r\n\r\n      this.bookings$.subscribe((bookingDetails) => {\r\n        bookingDetails.forEach((item) => {\r\n          if (item.workspace) {\r\n            console.log('Workspace Name:', item.workspace.name);\r\n            console.log('Workspace Model:', item.workspace);\r\n          } else {\r\n            console.log('Workspace not loaded for booking:', item.booking.id);\r\n          }\r\n        });\r\n      });\r\n    } else {\r\n      console.error('No email found in localStorage');\r\n      this.router.navigate(['/login']);\r\n    }\r\n  }\r\n\r\n  goToCoworking() {\r\n    this.router.navigate(['/coworking']);\r\n  }\r\n\r\n  deleteBooking(bookingId: string) {\r\n    this.store.dispatch(BookingActions.deleteBooking({ id: bookingId }));\r\n  }\r\n\r\n  calculateDays(start: string | Date, end: string | Date): number {\r\n    const startDate = new Date(start);\r\n    const endDate = new Date(end);\r\n    if (isNaN(startDate.getTime()) || isNaN(endDate.getTime())) {\r\n      console.error('Invalid date:', start, end);\r\n      return 0;\r\n    }\r\n    const diffTime = Math.abs(endDate.getTime() - startDate.getTime());\r\n    return Math.ceil(diffTime / (1000 * 60 * 60 * 24));\r\n  }\r\n\r\n  trackById(index: number, item: BookingDetails): string {\r\n    return item.booking.id;\r\n  }\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ".workspaces-list {\r\n  display: flex;\r\n  flex-direction: column;\r\n  gap: 24px;\r\n}\r\n\r\n.workspace-card {\r\n  display: flex;\r\n  flex-direction: row;\r\n  align-items: flex-start;\r\n  padding: 16px;\r\n  gap: 32px;\r\n  width: 100%;\r\n  max-width: 1280px;\r\n  height: 224px;\r\n  background: var(--white);\r\n  border-radius: var(--border-radius);\r\n  box-shadow: var(--shadow);\r\n  flex: none;\r\n}\r\n.no-bookings {\r\n  display: flex;\r\n  flex-direction: column;\r\n  justify-content: center;\r\n  align-items: center;\r\n  height: 476px;\r\n  gap: 32px;\r\n  text-align: center;\r\n}\r\n\r\n.workspace-photo {\r\n  width: 280px;\r\n  height: 192px;\r\n  background-size: cover;\r\n  background-position: center;\r\n  border-radius: var(--card-radius);\r\n  flex: none;\r\n}\r\n\r\n.workspace-content {\r\n  display: flex;\r\n  flex-direction: column;\r\n  align-items: flex-start;\r\n  padding: 12px 0;\r\n  gap: 24px;\r\n  flex: 1;\r\n}\r\n\r\n.workspace-title {\r\n  display: flex;\r\n  flex-direction: row;\r\n  justify-content: space-between;\r\n  align-items: center;\r\n  gap: 32px;\r\n  width: 100%;\r\n}\r\n\r\n.workspace-title h3 {\r\n  font-family: \"Inter\", sans-serif;\r\n  font-style: normal;\r\n  font-weight: 700;\r\n  font-size: 32px;\r\n  line-height: 120%;\r\n  color: var(--text-dark);\r\n  margin: 0;\r\n  flex: 1;\r\n}\r\n\r\n.workspace-buttons {\r\n  display: flex;\r\n  flex-direction: row;\r\n  align-items: flex-start;\r\n  gap: 16px;\r\n}\r\n\r\n.workspace-button {\r\n  display: flex;\r\n  flex-direction: row;\r\n  justify-content: center;\r\n  align-items: center;\r\n  width: 44px;\r\n  height: 44px;\r\n  border-radius: 8px;\r\n  cursor: pointer;\r\n  transition: all 0.3s ease;\r\n}\r\n.submit-button {\r\n  width: 200px;\r\n  height: 48px;\r\n}\r\n.edit-button {\r\n  border: 1px solid #c2bcd8;\r\n}\r\n\r\n.edit-button img {\r\n  width: 24px;\r\n  height: 24px;\r\n}\r\n\r\n.delete-button {\r\n  border: 1px solid #f56e6e;\r\n}\r\n\r\n.delete-button img {\r\n  width: 24px;\r\n  height: 24px;\r\n}\r\n\r\n.workspace-stats {\r\n  display: flex;\r\n  flex-direction: column;\r\n  align-items: flex-start;\r\n  gap: 12px;\r\n  width: 100%;\r\n}\r\n\r\n.stat-row {\r\n  display: flex;\r\n  flex-direction: row;\r\n  align-items: center;\r\n  gap: 16px;\r\n  width: 100%;\r\n}\r\n\r\n.stat-icon {\r\n  display: flex;\r\n  align-items: center;\r\n  justify-content: center;\r\n  width: 44px;\r\n  height: 44px;\r\n  background: #f5f3fb;\r\n  border-radius: 12px;\r\n}\r\n\r\n.stat-icon img {\r\n  width: 24px;\r\n  height: 24px;\r\n}\r\n\r\n.stat-text {\r\n  font-family: \"Inter\", sans-serif;\r\n  font-style: normal;\r\n  font-weight: 500;\r\n  font-size: 20px;\r\n  line-height: 120%;\r\n  color: var(--text-dark);\r\n}\r\n\r\n.stat-status {\r\n  font-family: \"Inter\", sans-serif;\r\n  font-style: normal;\r\n  font-weight: 500;\r\n  font-size: 20px;\r\n  line-height: 120%;\r\n  color: var(--text-dark);\r\n  display: flex;\r\n  align-items: center;\r\n  gap: 8px;\r\n  margin-left: auto;\r\n}\r\n\r\n.stat-status::before {\r\n  content: \"\";\r\n  display: inline-block;\r\n  width: 24px;\r\n  height: 24px;\r\n  background-size: contain;\r\n}\r\n.ai-assistant-container {\r\n  width: 100%;\r\n  max-width: 100%; /* Critical to prevent overflow */\r\n  padding: 16px;\r\n  background: var(--white);\r\n  border-radius: var(--border-radius);\r\n  box-shadow: var(--shadow);\r\n  display: flex;\r\n  flex-direction: column;\r\n  gap: 24px;\r\n}\r\n",
                    "styleUrl": "./my-bookings.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "router",
                        "type": "Router",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "store",
                        "type": "Store",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 25,
                "jsdoctags": [
                    {
                        "name": "router",
                        "type": "Router",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "store",
                        "type": "Store",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "extends": [],
            "implements": [
                "OnInit"
            ],
            "templateData": "<div class=\"main-container\">\r\n  <h2 class=\"section-title\">My Bookings</h2>\r\n\r\n  <div class=\"workspaces-list\">\r\n    @for (item of bookings$ | async; track item.booking.id) {\r\n    <div class=\"workspace-card\">\r\n      <div\r\n        class=\"workoutspace-photo\"\r\n        style=\"background-image: url('photos/OpenSpace/main-photo.png')\"\r\n      ></div>\r\n      <div class=\"workspace-content\">\r\n        <div class=\"workspace-title\">\r\n          <h3>{{ item.workspace?.name || \"Loading...\" }}</h3>\r\n          <div class=\"workspace-buttons\">\r\n            <button\r\n              class=\"workspace-button delete-button\"\r\n              (click)=\"deleteBooking(item.booking.id)\"\r\n            >\r\n              <img src=\"trash.svg\" alt=\"Delete\" />\r\n            </button>\r\n          </div>\r\n        </div>\r\n        <div class=\"workspace-stats\">\r\n          <div class=\"stat-row\">\r\n            <div class=\"stat-icon\">\r\n              <img src=\"calendar.svg\" alt=\"Calendar\" />\r\n            </div>\r\n            <span class=\"stat-text\">\r\n              {{ item.booking.start | date : \"MMM d, yyyy\" }} -\r\n              {{ item.booking.end | date : \"MMM d, yyyy\" }}\r\n            </span>\r\n            <span class=\"stat-text\">\r\n              ({{ calculateDays(item.booking.start, item.booking.end) }} days)\r\n            </span>\r\n            <span class=\"stat-status\">status: {{ item.booking.status }}</span>\r\n          </div>\r\n          <div class=\"stat-row\">\r\n            <div class=\"stat-icon\">\r\n              <img src=\"clock-hour-3.svg\" alt=\"Clock\" />\r\n            </div>\r\n            <span class=\"stat-text\">\r\n              from {{ item.booking.start | date : \"h:mm a\" }} to\r\n              {{ item.booking.end | date : \"h:mm a\" }}\r\n            </span>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </div>\r\n    }\r\n\r\n    <app-ai-assistant [bookings]=\"(bookings$ | async) || []\"></app-ai-assistant>\r\n  </div>\r\n</div>\r\n"
        }
    ],
    "modules": [
        {
            "name": "AppModule",
            "id": "module-AppModule-956d8636c3348999ceeed43ae02e5a2f6ffaf86a2563e3a4c23a37a51a89bbfa5b94f538a54736a2daca52ab7101330f6272c3c9c4f3b1840d6fecacc43d869b",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "src/app/app.module.ts",
            "methods": [],
            "sourceCode": "// src/app/app.module.ts\r\nimport { NgModule } from '@angular/core';\r\nimport { BrowserModule } from '@angular/platform-browser';\r\nimport { HttpClientModule } from '@angular/common/http';\r\nimport { RouterModule } from '@angular/router';\r\nimport { StoreModule } from '@ngrx/store';\r\nimport { EffectsModule } from '@ngrx/effects';\r\nimport { StoreDevtoolsModule } from '@ngrx/store-devtools';\r\nimport { StoreRouterConnectingModule } from '@ngrx/router-store';\r\n\r\nimport { AppComponent } from './app.component';\r\n\r\nimport { bookingReducer } from './store/booking/booking.reducer';\r\nimport { BookingEffects } from './store/booking/booking.effects';\r\nimport { workspaceReducer } from './store/workspace/workspaces.reducer';\r\nimport { WorkspaceEffects } from './store/workspace/workspace.effects';\r\nimport { availabilityReducer } from './store/availability/availability.reducer';\r\nimport { AvailabilityEffects } from './store/availability/availability.effects';\r\nimport { photoReducer } from './store/photo/photo.reducer';\r\nimport { PhotoEffects } from './store/photo/photo.effects';\r\nimport { amenityReducer } from './store/amenity/amenity.reducer';\r\nimport { AmenityEffects } from './store/amenity/amenity.effects';\r\nimport { HeaderComponent } from './header/header.component';\r\nimport { AppRoutingModule } from './app-routing.module';\r\nimport { CoworkingDetailsComponent } from './coworking/coworking-details/coworking-details.component';\r\nimport { CoworkingModule } from './coworking/coworking.module';\r\nimport { BookingModule } from './booking/booking.module';\r\nimport { coworkingReducer } from './store/coworking/coworking.reducer';\r\nimport { CoworkingEffects } from './store/coworking/coworking.effects';\r\nimport { ButtonComponent } from './shared/button/button.component';\r\n\r\n@NgModule({\r\n  declarations: [AppComponent, HeaderComponent],\r\n  imports: [\r\n    BrowserModule,\r\n    HttpClientModule,\r\n    CoworkingModule,\r\n    BookingModule,\r\n    AppRoutingModule,\r\n    StoreModule.forFeature('workspace', workspaceReducer),\r\n    StoreModule.forFeature('availability', availabilityReducer),\r\n    StoreModule.forRoot({\r\n      bookings: bookingReducer,\r\n      workspaces: workspaceReducer,\r\n\r\n      availabilities: availabilityReducer,\r\n      photos: photoReducer,\r\n      amenities: amenityReducer,\r\n      coworkings: coworkingReducer,\r\n    }),\r\n    EffectsModule.forRoot([\r\n      BookingEffects,\r\n      WorkspaceEffects,\r\n      AvailabilityEffects,\r\n      PhotoEffects,\r\n      AmenityEffects,\r\n      CoworkingEffects,\r\n    ]),\r\n    StoreDevtoolsModule.instrument({\r\n      maxAge: 25,\r\n\r\n      autoPause: true,\r\n    }),\r\n    StoreRouterConnectingModule.forRoot(),\r\n  ],\r\n  bootstrap: [AppComponent],\r\n})\r\nexport class AppModule {}\r\n",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "AppComponent"
                        },
                        {
                            "name": "HeaderComponent"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": [
                        {
                            "name": "AppRoutingModule"
                        },
                        {
                            "name": "BookingModule"
                        },
                        {
                            "name": "CoworkingModule"
                        }
                    ]
                },
                {
                    "type": "exports",
                    "elements": []
                },
                {
                    "type": "bootstrap",
                    "elements": [
                        {
                            "name": "AppComponent"
                        }
                    ]
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "AppRoutingModule",
            "id": "module-AppRoutingModule-610cd46bc3d1f157983dfa556a2b74a4e726ba34163e751878a90811bcb141500bfd6eae5ebf949251f5e766cb4c93a429ab56862a3847f46e0e021c4f79229c",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "src/app/app-routing.module.ts",
            "methods": [],
            "sourceCode": "// src/app/app-routing.module.ts\r\nimport { NgModule } from '@angular/core';\r\nimport { RouterModule, Routes } from '@angular/router';\r\n\r\nimport { BookingPageComponent } from './booking/booking-page/booking-page.component';\r\nimport { MyBookingsComponent } from './booking/my-bookings/my-bookings.component';\r\nimport { CoworkingDetailsComponent } from './coworking/coworking-details/coworking-details.component';\r\nimport { CoworkingListComponent } from './coworking/coworking-list/coworking-list.component';\r\n\r\nconst routes: Routes = [\r\n  { path: 'coworking/:id', component: CoworkingDetailsComponent },\r\n  { path: 'coworking-list', component: CoworkingListComponent },\r\n  { path: 'booking/:coworkingId', component: BookingPageComponent },\r\n  { path: 'my-bookings', component: MyBookingsComponent },\r\n  { path: '', redirectTo: '/coworking-list', pathMatch: 'full' },\r\n];\r\n\r\n@NgModule({\r\n  imports: [RouterModule.forRoot(routes, { bindToComponentInputs: true })],\r\n  exports: [RouterModule],\r\n})\r\nexport class AppRoutingModule {}\r\n",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": []
                },
                {
                    "type": "imports",
                    "elements": []
                },
                {
                    "type": "exports",
                    "elements": []
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "BookingModule",
            "id": "module-BookingModule-7c230867957c5b5916a4472d13c644483e30b5881df3aba98510befec8ae17cc399959e7ae4f724db0d4e6388aa71e02206c949a9f13a9855a3136dfd914a12e",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "src/app/booking/booking.module.ts",
            "methods": [],
            "sourceCode": "import { NgModule } from '@angular/core';\r\nimport { AsyncPipe, CommonModule } from '@angular/common';\r\nimport { ReactiveFormsModule, FormsModule } from '@angular/forms';\r\nimport { RouterModule } from '@angular/router';\r\nimport { StoreModule } from '@ngrx/store';\r\nimport { EffectsModule } from '@ngrx/effects';\r\n\r\nimport { BookingPageComponent } from './booking-page/booking-page.component';\r\nimport { bookingReducer } from '../store/booking/booking.reducer';\r\nimport { BookingEffects } from '../store/booking/booking.effects';\r\nimport { BookingConfirmationComponent } from './booking-confirmation/booking-confirmation.component';\r\nimport { MyBookingsComponent } from './my-bookings/my-bookings.component';\r\nimport { CapacityLabelPipe } from './capacity-label.pipe';\r\nimport { workspaceReducer } from '../store/workspace/workspaces.reducer';\r\nimport { WorkspaceEffects } from '../store/workspace/workspace.effects';\r\nimport { availabilityReducer } from '../store/availability/availability.reducer';\r\nimport { AiAssistantComponent } from './my-bookings/ai-assistant/ai-assistant.component';\r\nimport { ButtonComponent } from '../shared/button/button.component';\r\n\r\n@NgModule({\r\n  declarations: [\r\n    BookingPageComponent,\r\n    BookingConfirmationComponent,\r\n    MyBookingsComponent,\r\n    AiAssistantComponent,\r\n  ],\r\n  imports: [\r\n    CommonModule,\r\n    ReactiveFormsModule,\r\n    FormsModule,\r\n    RouterModule,\r\n    StoreModule.forFeature('booking', bookingReducer),\r\n    EffectsModule.forFeature([BookingEffects, WorkspaceEffects]),\r\n    AsyncPipe,\r\n    CapacityLabelPipe,\r\n    ButtonComponent,\r\n  ],\r\n  exports: [BookingPageComponent],\r\n})\r\nexport class BookingModule {}\r\n",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "AiAssistantComponent"
                        },
                        {
                            "name": "BookingConfirmationComponent"
                        },
                        {
                            "name": "BookingPageComponent"
                        },
                        {
                            "name": "MyBookingsComponent"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": [
                        {
                            "name": "ButtonComponent"
                        },
                        {
                            "name": "CapacityLabelPipe"
                        }
                    ]
                },
                {
                    "type": "exports",
                    "elements": [
                        {
                            "name": "BookingPageComponent"
                        }
                    ]
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "CoworkingModule",
            "id": "module-CoworkingModule-07a0fd1e8d03f8f01236cf2dd2d4aee697b5e5777792b41db23ad4139d72299d42f3576e10f12d336bea3dcf1ec62e53bfb8144793406e3ee4dd2a4ca8df1567",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "src/app/coworking/coworking.module.ts",
            "methods": [],
            "sourceCode": "// src/app/coworking/coworking.module.ts\r\nimport { NgModule } from '@angular/core';\r\nimport { CommonModule } from '@angular/common';\r\nimport { RouterModule } from '@angular/router';\r\nimport { StoreModule } from '@ngrx/store';\r\nimport { EffectsModule } from '@ngrx/effects';\r\n\r\nimport { amenityReducer } from '../store/amenity/amenity.reducer';\r\nimport { photoReducer } from '../store/photo/photo.reducer';\r\nimport { availabilityReducer } from '../store/availability/availability.reducer';\r\nimport { WorkspaceEffects } from '../store/workspace/workspace.effects';\r\nimport { AmenityEffects } from '../store/amenity/amenity.effects';\r\nimport { PhotoEffects } from '../store/photo/photo.effects';\r\nimport { AvailabilityEffects } from '../store/availability/availability.effects';\r\n\r\nimport { workspaceReducer } from '../store/workspace/workspaces.reducer';\r\nimport { CoworkingDetailsComponent } from './coworking-details/coworking-details.component';\r\nimport { CoworkingListComponent } from './coworking-list/coworking-list.component';\r\nimport { coworkingReducer } from '../store/coworking/coworking.reducer';\r\nimport { CoworkingEffects } from '../store/coworking/coworking.effects';\r\nimport { ButtonComponent } from '../shared/button/button.component';\r\n\r\n@NgModule({\r\n  declarations: [CoworkingDetailsComponent, CoworkingListComponent],\r\n  imports: [\r\n    CommonModule,\r\n    RouterModule,\r\n    StoreModule.forFeature('amenity', amenityReducer),\r\n    StoreModule.forFeature('photo', photoReducer),\r\n    StoreModule.forFeature('coworking', coworkingReducer),\r\n    EffectsModule.forFeature([\r\n      WorkspaceEffects,\r\n      AmenityEffects,\r\n      PhotoEffects,\r\n      AvailabilityEffects,\r\n      CoworkingEffects,\r\n    ]),\r\n    ButtonComponent,\r\n  ],\r\n  exports: [CoworkingDetailsComponent],\r\n})\r\nexport class CoworkingModule {}\r\n",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "CoworkingDetailsComponent"
                        },
                        {
                            "name": "CoworkingListComponent"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": [
                        {
                            "name": "ButtonComponent"
                        }
                    ]
                },
                {
                    "type": "exports",
                    "elements": [
                        {
                            "name": "CoworkingDetailsComponent"
                        }
                    ]
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        }
    ],
    "miscellaneous": {
        "variables": [
            {
                "name": "amenityReducer",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/store/amenity/amenity.reducer.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "createReducer(\r\n  initialState,\r\n  on(loadAmenitiesByWorkspace, (state) => ({\r\n    ...state,\r\n    loading: true,\r\n    error: null,\r\n  })),\r\n  on(loadAmenitiesByWorkspaceSuccess, (state, { amenities, workspaceId }) => ({\r\n    ...state,\r\n    amenities: [\r\n      ...state.amenities.filter((a) => a.workspaceId !== workspaceId),\r\n      ...amenities.map((amenity) => ({ ...amenity, workspaceId })),\r\n    ],\r\n    loading: false,\r\n    error: null,\r\n  })),\r\n  on(loadAmenitiesByWorkspaceFailure, (state, { error }) => ({\r\n    ...state,\r\n    loading: false,\r\n    error,\r\n  }))\r\n)"
            },
            {
                "name": "availabilityReducer",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/store/availability/availability.reducer.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "createReducer(\r\n  initialState,\r\n  on(loadAvailabilitiesByWorkspace, (state) => ({\r\n    ...state,\r\n    loading: true,\r\n    error: null,\r\n  })),\r\n  on(loadAvailabilitiesByWorkspaceSuccess, (state, { availabilities }) => {\r\n    const existingIds = new Set(state.availabilities.map((a) => a.id));\r\n    const newOnes = availabilities.filter((a) => !existingIds.has(a.id));\r\n\r\n    return {\r\n      ...state,\r\n      availabilities: [...state.availabilities, ...newOnes],\r\n      loading: false,\r\n      error: null,\r\n    };\r\n  }),\r\n\r\n  on(loadAvailabilitiesByWorkspaceFailure, (state, { error }) => ({\r\n    ...state,\r\n    loading: false,\r\n    error,\r\n  })),\r\n  on(loadAvailabilityById, (state) => ({\r\n    ...state,\r\n    loading: true,\r\n    error: null,\r\n  })),\r\n  on(loadAvailabilityByIdSuccess, (state, { availability }) => ({\r\n    ...state,\r\n    availabilityById: {\r\n      ...state.availabilityById,\r\n      [availability.id]: availability,\r\n    },\r\n    availabilities: state.availabilities.some((a) => a.id === availability.id)\r\n      ? state.availabilities\r\n      : [...state.availabilities, availability],\r\n    loading: false,\r\n    error: null,\r\n  })),\r\n  on(loadAvailabilityByIdFailure, (state, { error }) => ({\r\n    ...state,\r\n    loading: false,\r\n    error,\r\n  }))\r\n)"
            },
            {
                "name": "bookingReducer",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/store/booking/booking.reducer.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "createReducer(\r\n  initialState,\r\n  on(loadBookings, (state) => ({ ...state, loading: true, error: null })),\r\n  on(loadBookingsSuccess, (state, { bookings }) => ({\r\n    ...state,\r\n    bookings,\r\n    loading: false,\r\n\r\n    error: null,\r\n  })),\r\n  on(loadBookingsFailure, (state, { error }) => ({\r\n    ...state,\r\n    loading: false,\r\n    error,\r\n  })),\r\n\r\n  on(loadBookingById, (state) => ({ ...state, loading: true, error: null })),\r\n  on(loadBookingByIdSuccess, (state, { booking }) => ({\r\n    ...state,\r\n    selectedBooking: booking,\r\n    loading: false,\r\n    error: null,\r\n  })),\r\n  on(loadBookingByIdFailure, (state, { error }) => ({\r\n    ...state,\r\n    loading: false,\r\n    error,\r\n  })),\r\n\r\n  on(loadBookingsByUser, (state) => ({ ...state, loading: true, error: null })),\r\n  on(loadBookingsByUserSuccess, (state, { bookings }) => ({\r\n    ...state,\r\n    bookings,\r\n    loading: false,\r\n    error: null,\r\n  })),\r\n  on(loadBookingsByUserFailure, (state, { error }) => ({\r\n    ...state,\r\n    loading: false,\r\n    error,\r\n  })),\r\n\r\n  on(createBooking, (state) => ({ ...state, loading: true, error: null })),\r\n  on(createBookingSuccess, (state, { bookingId }) => ({\r\n    ...state,\r\n    bookingId,\r\n    loading: false,\r\n    error: null,\r\n  })),\r\n  on(createBookingFailure, (state, { error }) => ({\r\n    ...state,\r\n    loading: false,\r\n    error,\r\n  })),\r\n  on(resetBooking, () => initialState),\r\n\r\n  on(deleteBooking, (state) => ({ ...state, loading: true, error: null })),\r\n  on(deleteBookingSuccess, (state, { id }) => ({\r\n    ...state,\r\n    bookings: state.bookings.filter((booking) => booking.id !== id),\r\n    loading: false,\r\n    error: null,\r\n  })),\r\n  on(deleteBookingFailure, (state, { error }) => ({\r\n    ...state,\r\n    loading: false,\r\n    error,\r\n  })),\r\n\r\n  // Обработка новых действий\r\n  on(loadWorkspaces, (state) => ({ ...state, loading: true, error: null })),\r\n  on(loadWorkspacesSuccess, (state, { workspaces }) => ({\r\n    ...state,\r\n    workspaces,\r\n    loading: false,\r\n    error: null,\r\n  })),\r\n  on(loadWorkspacesFailure, (state, { error }) => ({\r\n    ...state,\r\n    loading: false,\r\n    error,\r\n  })),\r\n\r\n  on(loadAvailabilitiesByWorkspace, (state) => ({\r\n    ...state,\r\n    loading: true,\r\n    error: null,\r\n  })),\r\n  on(loadAvailabilitiesByWorkspaceSuccess, (state, { availabilities }) => ({\r\n    ...state,\r\n    availabilities,\r\n    loading: false,\r\n    error: null,\r\n  })),\r\n  on(loadAvailabilitiesByWorkspaceFailure, (state, { error }) => ({\r\n    ...state,\r\n    loading: false,\r\n    error,\r\n  })),\r\n\r\n  on(loadBookingsByUserEmail, (state) => ({\r\n    ...state,\r\n    loading: true,\r\n    error: null,\r\n  })),\r\n  on(loadBookingsByUserEmailSuccess, (state, { bookings }) => ({\r\n    ...state,\r\n    bookings,\r\n    loading: false,\r\n    error: null,\r\n  })),\r\n  on(loadBookingsByUserEmailFailure, (state, { error }) => ({\r\n    ...state,\r\n    loading: false,\r\n    error,\r\n  }))\r\n)"
            },
            {
                "name": "coworkingReducer",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/store/coworking/coworking.reducer.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "createReducer(\r\n  initialState,\r\n  on(loadCoworkings, (state) => ({ ...state, loading: true, error: null })),\r\n  on(loadCoworkingsSuccess, (state, { coworkings }) => ({\r\n    ...state,\r\n    coworkings,\r\n    loading: false,\r\n    error: null,\r\n  })),\r\n  on(loadCoworkingsFailure, (state, { error }) => ({\r\n    ...state,\r\n    loading: false,\r\n    error,\r\n  })),\r\n\r\n  on(loadCoworkingById, (state) => ({ ...state, loading: true, error: null })),\r\n  on(loadCoworkingByIdSuccess, (state, { coworking }) => ({\r\n    ...state,\r\n    selectedCoworking: coworking,\r\n    loading: false,\r\n    error: null,\r\n  })),\r\n  on(loadCoworkingByIdFailure, (state, { error }) => ({\r\n    ...state,\r\n    loading: false,\r\n    error,\r\n  }))\r\n)"
            },
            {
                "name": "createBooking",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/store/booking/booking.actions.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "createAction(\r\n  '[Booking] Create Booking',\r\n  props<{ request: BookingRequest }>()\r\n)"
            },
            {
                "name": "createBookingFailure",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/store/booking/booking.actions.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "createAction(\r\n  '[Booking] Create Booking Failure',\r\n  props<{ error: string }>()\r\n)"
            },
            {
                "name": "createBookingSuccess",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/store/booking/booking.actions.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "createAction(\r\n  '[Booking] Create Booking Success',\r\n  props<{ bookingId: string }>()\r\n)"
            },
            {
                "name": "deleteBooking",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/store/booking/booking.actions.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "createAction(\r\n  '[Booking] Delete Booking',\r\n  props<{ id: string }>()\r\n)"
            },
            {
                "name": "deleteBookingFailure",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/store/booking/booking.actions.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "createAction(\r\n  '[Booking] Delete Booking Failure',\r\n  props<{ error: string }>()\r\n)"
            },
            {
                "name": "deleteBookingSuccess",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/store/booking/booking.actions.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "createAction(\r\n  '[Booking] Delete Booking Success',\r\n  props<{ id: string }>()\r\n)"
            },
            {
                "name": "initialState",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/store/amenity/amenity.reducer.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "AmenityState",
                "defaultValue": "{\r\n  amenities: [],\r\n  loading: false,\r\n  error: null,\r\n}"
            },
            {
                "name": "initialState",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/store/availability/availability.reducer.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "AvailabilityState",
                "defaultValue": "{\r\n  availabilities: [],\r\n  availabilityById: {},\r\n  loading: false,\r\n  error: null,\r\n}"
            },
            {
                "name": "initialState",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/store/coworking/coworking.state.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "CoworkingState",
                "defaultValue": "{\r\n  coworkings: [],\r\n  selectedCoworking: null,\r\n  loading: false,\r\n  error: null,\r\n}"
            },
            {
                "name": "initialState",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/store/booking/booking.reducer.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "BookingState",
                "defaultValue": "{\r\n  bookings: [],\r\n  selectedBooking: null,\r\n  bookingId: null,\r\n  workspaces: [],\r\n  availabilities: [],\r\n  loading: false,\r\n  error: null,\r\n}"
            },
            {
                "name": "initialState",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/store/photo/photo.reducer.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "PhotoState",
                "defaultValue": "{\r\n  photos: [],\r\n  loading: false,\r\n  error: null,\r\n}"
            },
            {
                "name": "initialState",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/store/workspace/workspace.state.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "WorkspaceState",
                "defaultValue": "{\r\n  workspaces: [],\r\n  selectedWorkspace: null,\r\n  loading: false,\r\n  error: null,\r\n}"
            },
            {
                "name": "loadAmenitiesByWorkspace",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/store/amenity/amenity.actions.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "createAction(\r\n  '[Amenity] Load Amenities By Workspace',\r\n  props<{ workspaceId: string }>()\r\n)"
            },
            {
                "name": "loadAmenitiesByWorkspaceFailure",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/store/amenity/amenity.actions.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "createAction(\r\n  '[Amenity] Load Amenities By Workspace Failure',\r\n  props<{ error: string }>()\r\n)"
            },
            {
                "name": "loadAmenitiesByWorkspaceSuccess",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/store/amenity/amenity.actions.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "createAction(\r\n  '[Amenity] Load Amenities By Workspace Success',\r\n  props<{ amenities: Amenity[]; workspaceId: string }>()\r\n)"
            },
            {
                "name": "loadAvailabilitiesByWorkspace",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/store/availability/availability.actions.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "createAction(\r\n  '[Availability] Load Availabilities By Workspace',\r\n  props<{ workspaceId: string }>()\r\n)"
            },
            {
                "name": "loadAvailabilitiesByWorkspace",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/store/booking/booking.actions.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "createAction(\r\n  '[Booking] Load Availabilities By Workspace',\r\n  props<{ workspaceId: string }>()\r\n)"
            },
            {
                "name": "loadAvailabilitiesByWorkspaceFailure",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/store/availability/availability.actions.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "createAction(\r\n  '[Availability] Load Availabilities By Workspace Failure',\r\n  props<{ error: string }>()\r\n)"
            },
            {
                "name": "loadAvailabilitiesByWorkspaceFailure",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/store/booking/booking.actions.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "createAction(\r\n  '[Booking] Load Availabilities By Workspace Failure',\r\n  props<{ error: string }>()\r\n)"
            },
            {
                "name": "loadAvailabilitiesByWorkspaceSuccess",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/store/availability/availability.actions.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "createAction(\r\n  '[Availability] Load Availabilities By Workspace Success',\r\n  props<{ availabilities: Availability[] }>()\r\n)"
            },
            {
                "name": "loadAvailabilitiesByWorkspaceSuccess",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/store/booking/booking.actions.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "createAction(\r\n  '[Booking] Load Availabilities By Workspace Success',\r\n  props<{ availabilities: Availability[] }>()\r\n)"
            },
            {
                "name": "loadAvailabilityById",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/store/availability/availability.actions.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "createAction(\r\n  '[Availability] Load Availability By Id',\r\n  props<{ id: string }>()\r\n)"
            },
            {
                "name": "loadAvailabilityByIdFailure",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/store/availability/availability.actions.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "createAction(\r\n  '[Availability] Load Availability By Id Failure',\r\n  props<{ error: string }>()\r\n)"
            },
            {
                "name": "loadAvailabilityByIdSuccess",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/store/availability/availability.actions.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "createAction(\r\n  '[Availability] Load Availability By Id Success',\r\n  props<{ availability: Availability }>()\r\n)"
            },
            {
                "name": "loadBookingById",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/store/booking/booking.actions.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "createAction(\r\n  '[Booking] Load Booking By Id',\r\n  props<{ id: string }>()\r\n)"
            },
            {
                "name": "loadBookingByIdFailure",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/store/booking/booking.actions.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "createAction(\r\n  '[Booking] Load Booking By Id Failure',\r\n  props<{ error: string }>()\r\n)"
            },
            {
                "name": "loadBookingByIdSuccess",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/store/booking/booking.actions.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "createAction(\r\n  '[Booking] Load Booking By Id Success',\r\n  props<{ booking: Booking }>()\r\n)"
            },
            {
                "name": "loadBookings",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/store/booking/booking.actions.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "createAction('[Booking] Load Bookings')"
            },
            {
                "name": "loadBookingsByUser",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/store/booking/booking.actions.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "createAction(\r\n  '[Booking] Load Bookings By User',\r\n  props<{ userId: string }>()\r\n)"
            },
            {
                "name": "loadBookingsByUserEmail",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/store/booking/booking.actions.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "createAction(\r\n  '[Booking] Load Bookings By User Email',\r\n  props<{ email: string }>()\r\n)"
            },
            {
                "name": "loadBookingsByUserEmailFailure",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/store/booking/booking.actions.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "createAction(\r\n  '[Booking] Load Bookings By User Email Failure',\r\n  props<{ error: string }>()\r\n)"
            },
            {
                "name": "loadBookingsByUserEmailSuccess",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/store/booking/booking.actions.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "createAction(\r\n  '[Booking] Load Bookings By User Email Success',\r\n  props<{ bookings: Booking[] }>()\r\n)"
            },
            {
                "name": "loadBookingsByUserFailure",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/store/booking/booking.actions.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "createAction(\r\n  '[Booking] Load Bookings By User Failure',\r\n  props<{ error: string }>()\r\n)"
            },
            {
                "name": "loadBookingsByUserSuccess",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/store/booking/booking.actions.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "createAction(\r\n  '[Booking] Load Bookings By User Success',\r\n  props<{ bookings: Booking[] }>()\r\n)"
            },
            {
                "name": "loadBookingsFailure",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/store/booking/booking.actions.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "createAction(\r\n  '[Booking] Load Bookings Failure',\r\n  props<{ error: string }>()\r\n)"
            },
            {
                "name": "loadBookingsSuccess",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/store/booking/booking.actions.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "createAction(\r\n  '[Booking] Load Bookings Success',\r\n  props<{ bookings: Booking[] }>()\r\n)"
            },
            {
                "name": "loadCoworkingById",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/store/coworking/coworking.actions.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "createAction(\r\n  '[Coworking] Load By Id',\r\n  props<{ id: string }>()\r\n)"
            },
            {
                "name": "loadCoworkingByIdFailure",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/store/coworking/coworking.actions.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "createAction(\r\n  '[Coworking] Load By Id Failure',\r\n  props<{ error: string }>()\r\n)"
            },
            {
                "name": "loadCoworkingByIdSuccess",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/store/coworking/coworking.actions.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "createAction(\r\n  '[Coworking] Load By Id Success',\r\n  props<{ coworking: Coworking }>()\r\n)"
            },
            {
                "name": "loadCoworkings",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/store/coworking/coworking.actions.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "createAction('[Coworking] Load Coworkings')"
            },
            {
                "name": "loadCoworkingsFailure",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/store/coworking/coworking.actions.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "createAction(\r\n  '[Coworking] Load Coworkings Failure',\r\n  props<{ error: string }>()\r\n)"
            },
            {
                "name": "loadCoworkingsSuccess",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/store/coworking/coworking.actions.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "createAction(\r\n  '[Coworking] Load Coworkings Success',\r\n  props<{ coworkings: Coworking[] }>()\r\n)"
            },
            {
                "name": "loadPhotosByCoworking",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/store/photo/photo.actions.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "createAction(\r\n  '[Photo] Load Photos By Coworking',\r\n  props<{ coworkingId: string }>()\r\n)"
            },
            {
                "name": "loadPhotosByCoworkingFailure",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/store/photo/photo.actions.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "createAction(\r\n  '[Photo] Load Photos By Coworking Failure',\r\n  props<{ error: string }>()\r\n)"
            },
            {
                "name": "loadPhotosByCoworkingSuccess",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/store/photo/photo.actions.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "createAction(\r\n  '[Photo] Load Photos By Coworking Success',\r\n  props<{ photos: Photo[] }>()\r\n)"
            },
            {
                "name": "loadPhotosByWorkspace",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/store/photo/photo.actions.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "createAction(\r\n  '[Photo] Load Photos By Workspace',\r\n  props<{ workspaceId: string }>()\r\n)"
            },
            {
                "name": "loadPhotosByWorkspaceFailure",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/store/photo/photo.actions.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "createAction(\r\n  '[Photo] Load Photos By Workspace Failure',\r\n  props<{ error: string }>()\r\n)"
            },
            {
                "name": "loadPhotosByWorkspaceSuccess",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/store/photo/photo.actions.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "createAction(\r\n  '[Photo] Load Photos By Workspace Success',\r\n  props<{ photos: Photo[] }>()\r\n)"
            },
            {
                "name": "loadWorkspaceById",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/store/workspace/workspace.actions.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "createAction(\r\n  '[Workspace] Load By Id',\r\n  props<{ id: string }>()\r\n)"
            },
            {
                "name": "loadWorkspaceByIdFailure",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/store/workspace/workspace.actions.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "createAction(\r\n  '[Workspace] Load By Id Failure',\r\n  props<{ error: string }>()\r\n)"
            },
            {
                "name": "loadWorkspaceByIdSuccess",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/store/workspace/workspace.actions.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "createAction(\r\n  '[Workspace] Load By Id Success',\r\n  props<{ workspace: Workspace }>()\r\n)"
            },
            {
                "name": "loadWorkspaces",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/store/booking/booking.actions.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "createAction('[Booking] Load Workspaces')"
            },
            {
                "name": "loadWorkspacesByCoworking",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/store/workspace/workspace.actions.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "createAction(\r\n  '[Workspace] Load By CoworkingId',\r\n  props<{ coworkingId: string }>()\r\n)"
            },
            {
                "name": "loadWorkspacesByCoworkingFailure",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/store/workspace/workspace.actions.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "createAction(\r\n  '[Workspace] Load By CoworkingId Failure',\r\n  props<{ error: string }>()\r\n)"
            },
            {
                "name": "loadWorkspacesByCoworkingSuccess",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/store/workspace/workspace.actions.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "createAction(\r\n  '[Workspace] Load By CoworkingId Success',\r\n  props<{ workspaces: Workspace[]; coworkingId: string }>()\r\n)"
            },
            {
                "name": "loadWorkspacesFailure",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/store/booking/booking.actions.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "createAction(\r\n  '[Booking] Load Workspaces Failure',\r\n  props<{ error: string }>()\r\n)"
            },
            {
                "name": "loadWorkspacesSuccess",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/store/booking/booking.actions.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "createAction(\r\n  '[Booking] Load Workspaces Success',\r\n  props<{ workspaces: Workspace[] }>()\r\n)"
            },
            {
                "name": "photoReducer",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/store/photo/photo.reducer.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "createReducer(\r\n  initialState,\r\n  on(loadPhotosByWorkspace, (state) => ({\r\n    ...state,\r\n    loading: true,\r\n    error: null,\r\n  })),\r\n  on(loadPhotosByWorkspaceSuccess, (state, { photos }) => ({\r\n    ...state,\r\n    photos: [...state.photos, ...photos],\r\n    loading: false,\r\n    error: null,\r\n  })),\r\n  on(loadPhotosByWorkspaceFailure, (state, { error }) => ({\r\n    ...state,\r\n    loading: false,\r\n    error,\r\n  })),\r\n\r\n  on(loadPhotosByCoworking, (state) => ({\r\n    ...state,\r\n    loading: true,\r\n    error: null,\r\n  })),\r\n  on(loadPhotosByCoworkingSuccess, (state, { photos }) => ({\r\n    ...state,\r\n    photos: [...state.photos, ...photos],\r\n    loading: false,\r\n    error: null,\r\n  })),\r\n  on(loadPhotosByCoworkingFailure, (state, { error }) => ({\r\n    ...state,\r\n    loading: false,\r\n    error,\r\n  }))\r\n)"
            },
            {
                "name": "resetBooking",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/store/booking/booking.actions.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "createAction('[Booking] Reset Booking')"
            },
            {
                "name": "selectAllAmenities",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/store/amenity/amenity.selectors.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "createSelector(\r\n  selectAmenityState,\r\n  (state) => state.amenities\r\n)"
            },
            {
                "name": "selectAllAvailabilities",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/store/availability/availability.selectors.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "createSelector(\r\n  selectAvailabilityState,\r\n  (state) => state.availabilities\r\n)"
            },
            {
                "name": "selectAllBookings",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/store/booking/booking.selectors.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "createSelector(\r\n  selectBookingState,\r\n  (state) => state.bookings\r\n)"
            },
            {
                "name": "selectAllPhotos",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/store/photo/photo.selectors.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "createSelector(\r\n  selectPhotoState,\r\n  (state) => state.photos\r\n)"
            },
            {
                "name": "selectAmenityError",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/store/amenity/amenity.selectors.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "createSelector(\r\n  selectAmenityState,\r\n  (state) => state.error\r\n)"
            },
            {
                "name": "selectAmenityLoading",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/store/amenity/amenity.selectors.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "createSelector(\r\n  selectAmenityState,\r\n  (state) => state.loading\r\n)"
            },
            {
                "name": "selectAmenityState",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/store/amenity/amenity.selectors.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "createFeatureSelector<AmenityState>('amenity')"
            },
            {
                "name": "selectAvailabilities",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/store/booking/booking.selectors.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "createSelector(\r\n  selectBookingState,\r\n  (state) => state.availabilities\r\n)"
            },
            {
                "name": "selectAvailabilityById",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/store/availability/availability.selectors.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "(id: string) =>\r\n  createSelector(\r\n    selectAvailabilityState,\r\n    (state) => state.availabilityById[id] || null\r\n  )"
            },
            {
                "name": "selectAvailabilityError",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/store/availability/availability.selectors.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "createSelector(\r\n  selectAvailabilityState,\r\n  (state) => state.error\r\n)"
            },
            {
                "name": "selectAvailabilityLoading",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/store/availability/availability.selectors.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "createSelector(\r\n  selectAvailabilityState,\r\n  (state) => state.loading\r\n)"
            },
            {
                "name": "selectAvailabilityState",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/store/availability/availability.selectors.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "createFeatureSelector<AvailabilityState>('availability')"
            },
            {
                "name": "selectBookingError",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/store/booking/booking.selectors.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "createSelector(\r\n  selectBookingState,\r\n  (state) => state.error\r\n)"
            },
            {
                "name": "selectBookingId",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/store/booking/booking.selectors.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "createSelector(\r\n  selectBookingState,\r\n  (state) => state.bookingId\r\n)"
            },
            {
                "name": "selectBookingLoading",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/store/booking/booking.selectors.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "createSelector(\r\n  selectBookingState,\r\n  (state) => state.loading\r\n)"
            },
            {
                "name": "selectBookingState",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/store/booking/booking.selectors.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "createFeatureSelector<BookingState>('booking')"
            },
            {
                "name": "selectCoworkingError",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/store/coworking/coworking.selectors.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "createSelector(\r\n  selectCoworkingState,\r\n  (state) => state.error\r\n)"
            },
            {
                "name": "selectCoworkingLoading",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/store/coworking/coworking.selectors.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "createSelector(\r\n  selectCoworkingState,\r\n  (state) => state.loading\r\n)"
            },
            {
                "name": "selectCoworkings",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/store/coworking/coworking.selectors.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "createSelector(\r\n  selectCoworkingState,\r\n  (state: CoworkingState) => state.coworkings\r\n)"
            },
            {
                "name": "selectCoworkingState",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/store/coworking/coworking.selectors.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "createFeatureSelector<CoworkingState>('coworking')"
            },
            {
                "name": "selectPhotoError",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/store/photo/photo.selectors.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "createSelector(\r\n  selectPhotoState,\r\n  (state) => state.error\r\n)"
            },
            {
                "name": "selectPhotoLoading",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/store/photo/photo.selectors.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "createSelector(\r\n  selectPhotoState,\r\n  (state) => state.loading\r\n)"
            },
            {
                "name": "selectPhotosByCoworking",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/store/photo/photo.selectors.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "(coworkingId: string) =>\r\n  createSelector(selectAllPhotos, (photos) =>\r\n    photos.filter((photo) => photo.coworkingId === coworkingId)\r\n  )"
            },
            {
                "name": "selectPhotosByWorkspace",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/store/photo/photo.selectors.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "(workspaceId: string) =>\r\n  createSelector(selectAllPhotos, (photos) =>\r\n    photos.filter((photo) => photo.workspaceId === workspaceId)\r\n  )"
            },
            {
                "name": "selectPhotoState",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/store/photo/photo.selectors.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "createFeatureSelector<PhotoState>('photo')"
            },
            {
                "name": "selectSelectedBooking",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/store/booking/booking.selectors.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "createSelector(\r\n  selectBookingState,\r\n  (state) => state.selectedBooking\r\n)"
            },
            {
                "name": "selectSelectedCoworking",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/store/coworking/coworking.selectors.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "createSelector(\r\n  selectCoworkingState,\r\n  (state) => state.selectedCoworking\r\n)"
            },
            {
                "name": "selectSelectedWorkspace",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/store/workspace/workspaces.selectors.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "createSelector(\r\n  selectWorkspaceState,\r\n  (state) => state.selectedWorkspace\r\n)"
            },
            {
                "name": "selectWorkspaces",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/store/booking/booking.selectors.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "createSelector(\r\n  selectBookingState,\r\n  (state) => state.workspaces\r\n)"
            },
            {
                "name": "selectWorkspacesByCoworking",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/store/workspace/workspaces.selectors.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "createSelector(\r\n  selectWorkspaceState,\r\n  (state) => state.workspaces\r\n)"
            },
            {
                "name": "selectWorkspacesByCoworkingError",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/store/workspace/workspaces.selectors.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "createSelector(\r\n  selectWorkspaceState,\r\n  (state) => state.error\r\n)"
            },
            {
                "name": "selectWorkspacesByCoworkingLoading",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/store/workspace/workspaces.selectors.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "createSelector(\r\n  selectWorkspaceState,\r\n  (state) => state.loading\r\n)"
            },
            {
                "name": "selectWorkspaceState",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/store/workspace/workspaces.selectors.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "createFeatureSelector<WorkspaceState>('workspace')"
            },
            {
                "name": "setSelectedWorkspace",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/store/workspace/workspace.actions.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "createAction(\r\n  '[Workspace] Set Selected Workspace',\r\n  props<{ workspace: Workspace }>()\r\n)"
            },
            {
                "name": "workspaceReducer",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/store/workspace/workspaces.reducer.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "createReducer(\r\n  initialState,\r\n  on(WorkspaceActions.loadWorkspacesByCoworking, (state) => ({\r\n    ...state,\r\n    loading: true,\r\n    error: null,\r\n  })),\r\n  on(\r\n    WorkspaceActions.loadWorkspacesByCoworkingSuccess,\r\n    (state, { workspaces }) => ({\r\n      ...state,\r\n      workspaces,\r\n      loading: false,\r\n      error: null,\r\n    })\r\n  ),\r\n  on(WorkspaceActions.loadWorkspacesByCoworkingFailure, (state, { error }) => ({\r\n    ...state,\r\n    error,\r\n    loading: false,\r\n  })),\r\n  on(WorkspaceActions.loadWorkspaceById, (state) => ({\r\n    ...state,\r\n    loading: true,\r\n    error: null,\r\n  })),\r\n  on(WorkspaceActions.loadWorkspaceByIdSuccess, (state, { workspace }) => {\r\n    const workspaceExists = state.workspaces.some((w) => w.id === workspace.id);\r\n    return {\r\n      ...state,\r\n      workspaces: workspaceExists\r\n        ? state.workspaces.map((w) => (w.id === workspace.id ? workspace : w))\r\n        : [...state.workspaces, workspace],\r\n      selectedWorkspace: workspace,\r\n      loading: false,\r\n      error: null,\r\n    };\r\n  }),\r\n  on(WorkspaceActions.loadWorkspaceByIdFailure, (state, { error }) => ({\r\n    ...state,\r\n    loading: false,\r\n    error,\r\n  })),\r\n  on(WorkspaceActions.setSelectedWorkspace, (state, { workspace }) => ({\r\n    ...state,\r\n    selectedWorkspace: workspace,\r\n  }))\r\n)"
            }
        ],
        "functions": [],
        "typealiases": [],
        "enumerations": [],
        "groupedVariables": {
            "src/app/store/amenity/amenity.reducer.ts": [
                {
                    "name": "amenityReducer",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/store/amenity/amenity.reducer.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "createReducer(\r\n  initialState,\r\n  on(loadAmenitiesByWorkspace, (state) => ({\r\n    ...state,\r\n    loading: true,\r\n    error: null,\r\n  })),\r\n  on(loadAmenitiesByWorkspaceSuccess, (state, { amenities, workspaceId }) => ({\r\n    ...state,\r\n    amenities: [\r\n      ...state.amenities.filter((a) => a.workspaceId !== workspaceId),\r\n      ...amenities.map((amenity) => ({ ...amenity, workspaceId })),\r\n    ],\r\n    loading: false,\r\n    error: null,\r\n  })),\r\n  on(loadAmenitiesByWorkspaceFailure, (state, { error }) => ({\r\n    ...state,\r\n    loading: false,\r\n    error,\r\n  }))\r\n)"
                },
                {
                    "name": "initialState",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/store/amenity/amenity.reducer.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "AmenityState",
                    "defaultValue": "{\r\n  amenities: [],\r\n  loading: false,\r\n  error: null,\r\n}"
                }
            ],
            "src/app/store/availability/availability.reducer.ts": [
                {
                    "name": "availabilityReducer",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/store/availability/availability.reducer.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "createReducer(\r\n  initialState,\r\n  on(loadAvailabilitiesByWorkspace, (state) => ({\r\n    ...state,\r\n    loading: true,\r\n    error: null,\r\n  })),\r\n  on(loadAvailabilitiesByWorkspaceSuccess, (state, { availabilities }) => {\r\n    const existingIds = new Set(state.availabilities.map((a) => a.id));\r\n    const newOnes = availabilities.filter((a) => !existingIds.has(a.id));\r\n\r\n    return {\r\n      ...state,\r\n      availabilities: [...state.availabilities, ...newOnes],\r\n      loading: false,\r\n      error: null,\r\n    };\r\n  }),\r\n\r\n  on(loadAvailabilitiesByWorkspaceFailure, (state, { error }) => ({\r\n    ...state,\r\n    loading: false,\r\n    error,\r\n  })),\r\n  on(loadAvailabilityById, (state) => ({\r\n    ...state,\r\n    loading: true,\r\n    error: null,\r\n  })),\r\n  on(loadAvailabilityByIdSuccess, (state, { availability }) => ({\r\n    ...state,\r\n    availabilityById: {\r\n      ...state.availabilityById,\r\n      [availability.id]: availability,\r\n    },\r\n    availabilities: state.availabilities.some((a) => a.id === availability.id)\r\n      ? state.availabilities\r\n      : [...state.availabilities, availability],\r\n    loading: false,\r\n    error: null,\r\n  })),\r\n  on(loadAvailabilityByIdFailure, (state, { error }) => ({\r\n    ...state,\r\n    loading: false,\r\n    error,\r\n  }))\r\n)"
                },
                {
                    "name": "initialState",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/store/availability/availability.reducer.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "AvailabilityState",
                    "defaultValue": "{\r\n  availabilities: [],\r\n  availabilityById: {},\r\n  loading: false,\r\n  error: null,\r\n}"
                }
            ],
            "src/app/store/booking/booking.reducer.ts": [
                {
                    "name": "bookingReducer",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/store/booking/booking.reducer.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "createReducer(\r\n  initialState,\r\n  on(loadBookings, (state) => ({ ...state, loading: true, error: null })),\r\n  on(loadBookingsSuccess, (state, { bookings }) => ({\r\n    ...state,\r\n    bookings,\r\n    loading: false,\r\n\r\n    error: null,\r\n  })),\r\n  on(loadBookingsFailure, (state, { error }) => ({\r\n    ...state,\r\n    loading: false,\r\n    error,\r\n  })),\r\n\r\n  on(loadBookingById, (state) => ({ ...state, loading: true, error: null })),\r\n  on(loadBookingByIdSuccess, (state, { booking }) => ({\r\n    ...state,\r\n    selectedBooking: booking,\r\n    loading: false,\r\n    error: null,\r\n  })),\r\n  on(loadBookingByIdFailure, (state, { error }) => ({\r\n    ...state,\r\n    loading: false,\r\n    error,\r\n  })),\r\n\r\n  on(loadBookingsByUser, (state) => ({ ...state, loading: true, error: null })),\r\n  on(loadBookingsByUserSuccess, (state, { bookings }) => ({\r\n    ...state,\r\n    bookings,\r\n    loading: false,\r\n    error: null,\r\n  })),\r\n  on(loadBookingsByUserFailure, (state, { error }) => ({\r\n    ...state,\r\n    loading: false,\r\n    error,\r\n  })),\r\n\r\n  on(createBooking, (state) => ({ ...state, loading: true, error: null })),\r\n  on(createBookingSuccess, (state, { bookingId }) => ({\r\n    ...state,\r\n    bookingId,\r\n    loading: false,\r\n    error: null,\r\n  })),\r\n  on(createBookingFailure, (state, { error }) => ({\r\n    ...state,\r\n    loading: false,\r\n    error,\r\n  })),\r\n  on(resetBooking, () => initialState),\r\n\r\n  on(deleteBooking, (state) => ({ ...state, loading: true, error: null })),\r\n  on(deleteBookingSuccess, (state, { id }) => ({\r\n    ...state,\r\n    bookings: state.bookings.filter((booking) => booking.id !== id),\r\n    loading: false,\r\n    error: null,\r\n  })),\r\n  on(deleteBookingFailure, (state, { error }) => ({\r\n    ...state,\r\n    loading: false,\r\n    error,\r\n  })),\r\n\r\n  // Обработка новых действий\r\n  on(loadWorkspaces, (state) => ({ ...state, loading: true, error: null })),\r\n  on(loadWorkspacesSuccess, (state, { workspaces }) => ({\r\n    ...state,\r\n    workspaces,\r\n    loading: false,\r\n    error: null,\r\n  })),\r\n  on(loadWorkspacesFailure, (state, { error }) => ({\r\n    ...state,\r\n    loading: false,\r\n    error,\r\n  })),\r\n\r\n  on(loadAvailabilitiesByWorkspace, (state) => ({\r\n    ...state,\r\n    loading: true,\r\n    error: null,\r\n  })),\r\n  on(loadAvailabilitiesByWorkspaceSuccess, (state, { availabilities }) => ({\r\n    ...state,\r\n    availabilities,\r\n    loading: false,\r\n    error: null,\r\n  })),\r\n  on(loadAvailabilitiesByWorkspaceFailure, (state, { error }) => ({\r\n    ...state,\r\n    loading: false,\r\n    error,\r\n  })),\r\n\r\n  on(loadBookingsByUserEmail, (state) => ({\r\n    ...state,\r\n    loading: true,\r\n    error: null,\r\n  })),\r\n  on(loadBookingsByUserEmailSuccess, (state, { bookings }) => ({\r\n    ...state,\r\n    bookings,\r\n    loading: false,\r\n    error: null,\r\n  })),\r\n  on(loadBookingsByUserEmailFailure, (state, { error }) => ({\r\n    ...state,\r\n    loading: false,\r\n    error,\r\n  }))\r\n)"
                },
                {
                    "name": "initialState",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/store/booking/booking.reducer.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "BookingState",
                    "defaultValue": "{\r\n  bookings: [],\r\n  selectedBooking: null,\r\n  bookingId: null,\r\n  workspaces: [],\r\n  availabilities: [],\r\n  loading: false,\r\n  error: null,\r\n}"
                }
            ],
            "src/app/store/coworking/coworking.reducer.ts": [
                {
                    "name": "coworkingReducer",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/store/coworking/coworking.reducer.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "createReducer(\r\n  initialState,\r\n  on(loadCoworkings, (state) => ({ ...state, loading: true, error: null })),\r\n  on(loadCoworkingsSuccess, (state, { coworkings }) => ({\r\n    ...state,\r\n    coworkings,\r\n    loading: false,\r\n    error: null,\r\n  })),\r\n  on(loadCoworkingsFailure, (state, { error }) => ({\r\n    ...state,\r\n    loading: false,\r\n    error,\r\n  })),\r\n\r\n  on(loadCoworkingById, (state) => ({ ...state, loading: true, error: null })),\r\n  on(loadCoworkingByIdSuccess, (state, { coworking }) => ({\r\n    ...state,\r\n    selectedCoworking: coworking,\r\n    loading: false,\r\n    error: null,\r\n  })),\r\n  on(loadCoworkingByIdFailure, (state, { error }) => ({\r\n    ...state,\r\n    loading: false,\r\n    error,\r\n  }))\r\n)"
                }
            ],
            "src/app/store/booking/booking.actions.ts": [
                {
                    "name": "createBooking",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/store/booking/booking.actions.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "createAction(\r\n  '[Booking] Create Booking',\r\n  props<{ request: BookingRequest }>()\r\n)"
                },
                {
                    "name": "createBookingFailure",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/store/booking/booking.actions.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "createAction(\r\n  '[Booking] Create Booking Failure',\r\n  props<{ error: string }>()\r\n)"
                },
                {
                    "name": "createBookingSuccess",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/store/booking/booking.actions.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "createAction(\r\n  '[Booking] Create Booking Success',\r\n  props<{ bookingId: string }>()\r\n)"
                },
                {
                    "name": "deleteBooking",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/store/booking/booking.actions.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "createAction(\r\n  '[Booking] Delete Booking',\r\n  props<{ id: string }>()\r\n)"
                },
                {
                    "name": "deleteBookingFailure",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/store/booking/booking.actions.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "createAction(\r\n  '[Booking] Delete Booking Failure',\r\n  props<{ error: string }>()\r\n)"
                },
                {
                    "name": "deleteBookingSuccess",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/store/booking/booking.actions.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "createAction(\r\n  '[Booking] Delete Booking Success',\r\n  props<{ id: string }>()\r\n)"
                },
                {
                    "name": "loadAvailabilitiesByWorkspace",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/store/booking/booking.actions.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "createAction(\r\n  '[Booking] Load Availabilities By Workspace',\r\n  props<{ workspaceId: string }>()\r\n)"
                },
                {
                    "name": "loadAvailabilitiesByWorkspaceFailure",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/store/booking/booking.actions.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "createAction(\r\n  '[Booking] Load Availabilities By Workspace Failure',\r\n  props<{ error: string }>()\r\n)"
                },
                {
                    "name": "loadAvailabilitiesByWorkspaceSuccess",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/store/booking/booking.actions.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "createAction(\r\n  '[Booking] Load Availabilities By Workspace Success',\r\n  props<{ availabilities: Availability[] }>()\r\n)"
                },
                {
                    "name": "loadBookingById",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/store/booking/booking.actions.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "createAction(\r\n  '[Booking] Load Booking By Id',\r\n  props<{ id: string }>()\r\n)"
                },
                {
                    "name": "loadBookingByIdFailure",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/store/booking/booking.actions.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "createAction(\r\n  '[Booking] Load Booking By Id Failure',\r\n  props<{ error: string }>()\r\n)"
                },
                {
                    "name": "loadBookingByIdSuccess",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/store/booking/booking.actions.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "createAction(\r\n  '[Booking] Load Booking By Id Success',\r\n  props<{ booking: Booking }>()\r\n)"
                },
                {
                    "name": "loadBookings",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/store/booking/booking.actions.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "createAction('[Booking] Load Bookings')"
                },
                {
                    "name": "loadBookingsByUser",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/store/booking/booking.actions.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "createAction(\r\n  '[Booking] Load Bookings By User',\r\n  props<{ userId: string }>()\r\n)"
                },
                {
                    "name": "loadBookingsByUserEmail",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/store/booking/booking.actions.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "createAction(\r\n  '[Booking] Load Bookings By User Email',\r\n  props<{ email: string }>()\r\n)"
                },
                {
                    "name": "loadBookingsByUserEmailFailure",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/store/booking/booking.actions.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "createAction(\r\n  '[Booking] Load Bookings By User Email Failure',\r\n  props<{ error: string }>()\r\n)"
                },
                {
                    "name": "loadBookingsByUserEmailSuccess",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/store/booking/booking.actions.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "createAction(\r\n  '[Booking] Load Bookings By User Email Success',\r\n  props<{ bookings: Booking[] }>()\r\n)"
                },
                {
                    "name": "loadBookingsByUserFailure",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/store/booking/booking.actions.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "createAction(\r\n  '[Booking] Load Bookings By User Failure',\r\n  props<{ error: string }>()\r\n)"
                },
                {
                    "name": "loadBookingsByUserSuccess",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/store/booking/booking.actions.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "createAction(\r\n  '[Booking] Load Bookings By User Success',\r\n  props<{ bookings: Booking[] }>()\r\n)"
                },
                {
                    "name": "loadBookingsFailure",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/store/booking/booking.actions.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "createAction(\r\n  '[Booking] Load Bookings Failure',\r\n  props<{ error: string }>()\r\n)"
                },
                {
                    "name": "loadBookingsSuccess",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/store/booking/booking.actions.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "createAction(\r\n  '[Booking] Load Bookings Success',\r\n  props<{ bookings: Booking[] }>()\r\n)"
                },
                {
                    "name": "loadWorkspaces",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/store/booking/booking.actions.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "createAction('[Booking] Load Workspaces')"
                },
                {
                    "name": "loadWorkspacesFailure",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/store/booking/booking.actions.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "createAction(\r\n  '[Booking] Load Workspaces Failure',\r\n  props<{ error: string }>()\r\n)"
                },
                {
                    "name": "loadWorkspacesSuccess",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/store/booking/booking.actions.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "createAction(\r\n  '[Booking] Load Workspaces Success',\r\n  props<{ workspaces: Workspace[] }>()\r\n)"
                },
                {
                    "name": "resetBooking",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/store/booking/booking.actions.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "createAction('[Booking] Reset Booking')"
                }
            ],
            "src/app/store/coworking/coworking.state.ts": [
                {
                    "name": "initialState",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/store/coworking/coworking.state.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "CoworkingState",
                    "defaultValue": "{\r\n  coworkings: [],\r\n  selectedCoworking: null,\r\n  loading: false,\r\n  error: null,\r\n}"
                }
            ],
            "src/app/store/photo/photo.reducer.ts": [
                {
                    "name": "initialState",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/store/photo/photo.reducer.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "PhotoState",
                    "defaultValue": "{\r\n  photos: [],\r\n  loading: false,\r\n  error: null,\r\n}"
                },
                {
                    "name": "photoReducer",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/store/photo/photo.reducer.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "createReducer(\r\n  initialState,\r\n  on(loadPhotosByWorkspace, (state) => ({\r\n    ...state,\r\n    loading: true,\r\n    error: null,\r\n  })),\r\n  on(loadPhotosByWorkspaceSuccess, (state, { photos }) => ({\r\n    ...state,\r\n    photos: [...state.photos, ...photos],\r\n    loading: false,\r\n    error: null,\r\n  })),\r\n  on(loadPhotosByWorkspaceFailure, (state, { error }) => ({\r\n    ...state,\r\n    loading: false,\r\n    error,\r\n  })),\r\n\r\n  on(loadPhotosByCoworking, (state) => ({\r\n    ...state,\r\n    loading: true,\r\n    error: null,\r\n  })),\r\n  on(loadPhotosByCoworkingSuccess, (state, { photos }) => ({\r\n    ...state,\r\n    photos: [...state.photos, ...photos],\r\n    loading: false,\r\n    error: null,\r\n  })),\r\n  on(loadPhotosByCoworkingFailure, (state, { error }) => ({\r\n    ...state,\r\n    loading: false,\r\n    error,\r\n  }))\r\n)"
                }
            ],
            "src/app/store/workspace/workspace.state.ts": [
                {
                    "name": "initialState",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/store/workspace/workspace.state.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "WorkspaceState",
                    "defaultValue": "{\r\n  workspaces: [],\r\n  selectedWorkspace: null,\r\n  loading: false,\r\n  error: null,\r\n}"
                }
            ],
            "src/app/store/amenity/amenity.actions.ts": [
                {
                    "name": "loadAmenitiesByWorkspace",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/store/amenity/amenity.actions.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "createAction(\r\n  '[Amenity] Load Amenities By Workspace',\r\n  props<{ workspaceId: string }>()\r\n)"
                },
                {
                    "name": "loadAmenitiesByWorkspaceFailure",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/store/amenity/amenity.actions.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "createAction(\r\n  '[Amenity] Load Amenities By Workspace Failure',\r\n  props<{ error: string }>()\r\n)"
                },
                {
                    "name": "loadAmenitiesByWorkspaceSuccess",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/store/amenity/amenity.actions.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "createAction(\r\n  '[Amenity] Load Amenities By Workspace Success',\r\n  props<{ amenities: Amenity[]; workspaceId: string }>()\r\n)"
                }
            ],
            "src/app/store/availability/availability.actions.ts": [
                {
                    "name": "loadAvailabilitiesByWorkspace",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/store/availability/availability.actions.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "createAction(\r\n  '[Availability] Load Availabilities By Workspace',\r\n  props<{ workspaceId: string }>()\r\n)"
                },
                {
                    "name": "loadAvailabilitiesByWorkspaceFailure",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/store/availability/availability.actions.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "createAction(\r\n  '[Availability] Load Availabilities By Workspace Failure',\r\n  props<{ error: string }>()\r\n)"
                },
                {
                    "name": "loadAvailabilitiesByWorkspaceSuccess",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/store/availability/availability.actions.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "createAction(\r\n  '[Availability] Load Availabilities By Workspace Success',\r\n  props<{ availabilities: Availability[] }>()\r\n)"
                },
                {
                    "name": "loadAvailabilityById",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/store/availability/availability.actions.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "createAction(\r\n  '[Availability] Load Availability By Id',\r\n  props<{ id: string }>()\r\n)"
                },
                {
                    "name": "loadAvailabilityByIdFailure",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/store/availability/availability.actions.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "createAction(\r\n  '[Availability] Load Availability By Id Failure',\r\n  props<{ error: string }>()\r\n)"
                },
                {
                    "name": "loadAvailabilityByIdSuccess",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/store/availability/availability.actions.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "createAction(\r\n  '[Availability] Load Availability By Id Success',\r\n  props<{ availability: Availability }>()\r\n)"
                }
            ],
            "src/app/store/coworking/coworking.actions.ts": [
                {
                    "name": "loadCoworkingById",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/store/coworking/coworking.actions.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "createAction(\r\n  '[Coworking] Load By Id',\r\n  props<{ id: string }>()\r\n)"
                },
                {
                    "name": "loadCoworkingByIdFailure",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/store/coworking/coworking.actions.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "createAction(\r\n  '[Coworking] Load By Id Failure',\r\n  props<{ error: string }>()\r\n)"
                },
                {
                    "name": "loadCoworkingByIdSuccess",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/store/coworking/coworking.actions.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "createAction(\r\n  '[Coworking] Load By Id Success',\r\n  props<{ coworking: Coworking }>()\r\n)"
                },
                {
                    "name": "loadCoworkings",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/store/coworking/coworking.actions.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "createAction('[Coworking] Load Coworkings')"
                },
                {
                    "name": "loadCoworkingsFailure",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/store/coworking/coworking.actions.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "createAction(\r\n  '[Coworking] Load Coworkings Failure',\r\n  props<{ error: string }>()\r\n)"
                },
                {
                    "name": "loadCoworkingsSuccess",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/store/coworking/coworking.actions.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "createAction(\r\n  '[Coworking] Load Coworkings Success',\r\n  props<{ coworkings: Coworking[] }>()\r\n)"
                }
            ],
            "src/app/store/photo/photo.actions.ts": [
                {
                    "name": "loadPhotosByCoworking",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/store/photo/photo.actions.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "createAction(\r\n  '[Photo] Load Photos By Coworking',\r\n  props<{ coworkingId: string }>()\r\n)"
                },
                {
                    "name": "loadPhotosByCoworkingFailure",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/store/photo/photo.actions.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "createAction(\r\n  '[Photo] Load Photos By Coworking Failure',\r\n  props<{ error: string }>()\r\n)"
                },
                {
                    "name": "loadPhotosByCoworkingSuccess",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/store/photo/photo.actions.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "createAction(\r\n  '[Photo] Load Photos By Coworking Success',\r\n  props<{ photos: Photo[] }>()\r\n)"
                },
                {
                    "name": "loadPhotosByWorkspace",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/store/photo/photo.actions.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "createAction(\r\n  '[Photo] Load Photos By Workspace',\r\n  props<{ workspaceId: string }>()\r\n)"
                },
                {
                    "name": "loadPhotosByWorkspaceFailure",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/store/photo/photo.actions.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "createAction(\r\n  '[Photo] Load Photos By Workspace Failure',\r\n  props<{ error: string }>()\r\n)"
                },
                {
                    "name": "loadPhotosByWorkspaceSuccess",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/store/photo/photo.actions.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "createAction(\r\n  '[Photo] Load Photos By Workspace Success',\r\n  props<{ photos: Photo[] }>()\r\n)"
                }
            ],
            "src/app/store/workspace/workspace.actions.ts": [
                {
                    "name": "loadWorkspaceById",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/store/workspace/workspace.actions.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "createAction(\r\n  '[Workspace] Load By Id',\r\n  props<{ id: string }>()\r\n)"
                },
                {
                    "name": "loadWorkspaceByIdFailure",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/store/workspace/workspace.actions.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "createAction(\r\n  '[Workspace] Load By Id Failure',\r\n  props<{ error: string }>()\r\n)"
                },
                {
                    "name": "loadWorkspaceByIdSuccess",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/store/workspace/workspace.actions.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "createAction(\r\n  '[Workspace] Load By Id Success',\r\n  props<{ workspace: Workspace }>()\r\n)"
                },
                {
                    "name": "loadWorkspacesByCoworking",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/store/workspace/workspace.actions.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "createAction(\r\n  '[Workspace] Load By CoworkingId',\r\n  props<{ coworkingId: string }>()\r\n)"
                },
                {
                    "name": "loadWorkspacesByCoworkingFailure",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/store/workspace/workspace.actions.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "createAction(\r\n  '[Workspace] Load By CoworkingId Failure',\r\n  props<{ error: string }>()\r\n)"
                },
                {
                    "name": "loadWorkspacesByCoworkingSuccess",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/store/workspace/workspace.actions.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "createAction(\r\n  '[Workspace] Load By CoworkingId Success',\r\n  props<{ workspaces: Workspace[]; coworkingId: string }>()\r\n)"
                },
                {
                    "name": "setSelectedWorkspace",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/store/workspace/workspace.actions.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "createAction(\r\n  '[Workspace] Set Selected Workspace',\r\n  props<{ workspace: Workspace }>()\r\n)"
                }
            ],
            "src/app/store/amenity/amenity.selectors.ts": [
                {
                    "name": "selectAllAmenities",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/store/amenity/amenity.selectors.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "createSelector(\r\n  selectAmenityState,\r\n  (state) => state.amenities\r\n)"
                },
                {
                    "name": "selectAmenityError",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/store/amenity/amenity.selectors.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "createSelector(\r\n  selectAmenityState,\r\n  (state) => state.error\r\n)"
                },
                {
                    "name": "selectAmenityLoading",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/store/amenity/amenity.selectors.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "createSelector(\r\n  selectAmenityState,\r\n  (state) => state.loading\r\n)"
                },
                {
                    "name": "selectAmenityState",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/store/amenity/amenity.selectors.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "createFeatureSelector<AmenityState>('amenity')"
                }
            ],
            "src/app/store/availability/availability.selectors.ts": [
                {
                    "name": "selectAllAvailabilities",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/store/availability/availability.selectors.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "createSelector(\r\n  selectAvailabilityState,\r\n  (state) => state.availabilities\r\n)"
                },
                {
                    "name": "selectAvailabilityById",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/store/availability/availability.selectors.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "(id: string) =>\r\n  createSelector(\r\n    selectAvailabilityState,\r\n    (state) => state.availabilityById[id] || null\r\n  )"
                },
                {
                    "name": "selectAvailabilityError",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/store/availability/availability.selectors.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "createSelector(\r\n  selectAvailabilityState,\r\n  (state) => state.error\r\n)"
                },
                {
                    "name": "selectAvailabilityLoading",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/store/availability/availability.selectors.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "createSelector(\r\n  selectAvailabilityState,\r\n  (state) => state.loading\r\n)"
                },
                {
                    "name": "selectAvailabilityState",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/store/availability/availability.selectors.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "createFeatureSelector<AvailabilityState>('availability')"
                }
            ],
            "src/app/store/booking/booking.selectors.ts": [
                {
                    "name": "selectAllBookings",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/store/booking/booking.selectors.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "createSelector(\r\n  selectBookingState,\r\n  (state) => state.bookings\r\n)"
                },
                {
                    "name": "selectAvailabilities",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/store/booking/booking.selectors.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "createSelector(\r\n  selectBookingState,\r\n  (state) => state.availabilities\r\n)"
                },
                {
                    "name": "selectBookingError",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/store/booking/booking.selectors.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "createSelector(\r\n  selectBookingState,\r\n  (state) => state.error\r\n)"
                },
                {
                    "name": "selectBookingId",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/store/booking/booking.selectors.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "createSelector(\r\n  selectBookingState,\r\n  (state) => state.bookingId\r\n)"
                },
                {
                    "name": "selectBookingLoading",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/store/booking/booking.selectors.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "createSelector(\r\n  selectBookingState,\r\n  (state) => state.loading\r\n)"
                },
                {
                    "name": "selectBookingState",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/store/booking/booking.selectors.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "createFeatureSelector<BookingState>('booking')"
                },
                {
                    "name": "selectSelectedBooking",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/store/booking/booking.selectors.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "createSelector(\r\n  selectBookingState,\r\n  (state) => state.selectedBooking\r\n)"
                },
                {
                    "name": "selectWorkspaces",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/store/booking/booking.selectors.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "createSelector(\r\n  selectBookingState,\r\n  (state) => state.workspaces\r\n)"
                }
            ],
            "src/app/store/photo/photo.selectors.ts": [
                {
                    "name": "selectAllPhotos",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/store/photo/photo.selectors.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "createSelector(\r\n  selectPhotoState,\r\n  (state) => state.photos\r\n)"
                },
                {
                    "name": "selectPhotoError",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/store/photo/photo.selectors.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "createSelector(\r\n  selectPhotoState,\r\n  (state) => state.error\r\n)"
                },
                {
                    "name": "selectPhotoLoading",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/store/photo/photo.selectors.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "createSelector(\r\n  selectPhotoState,\r\n  (state) => state.loading\r\n)"
                },
                {
                    "name": "selectPhotosByCoworking",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/store/photo/photo.selectors.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "(coworkingId: string) =>\r\n  createSelector(selectAllPhotos, (photos) =>\r\n    photos.filter((photo) => photo.coworkingId === coworkingId)\r\n  )"
                },
                {
                    "name": "selectPhotosByWorkspace",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/store/photo/photo.selectors.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "(workspaceId: string) =>\r\n  createSelector(selectAllPhotos, (photos) =>\r\n    photos.filter((photo) => photo.workspaceId === workspaceId)\r\n  )"
                },
                {
                    "name": "selectPhotoState",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/store/photo/photo.selectors.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "createFeatureSelector<PhotoState>('photo')"
                }
            ],
            "src/app/store/coworking/coworking.selectors.ts": [
                {
                    "name": "selectCoworkingError",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/store/coworking/coworking.selectors.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "createSelector(\r\n  selectCoworkingState,\r\n  (state) => state.error\r\n)"
                },
                {
                    "name": "selectCoworkingLoading",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/store/coworking/coworking.selectors.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "createSelector(\r\n  selectCoworkingState,\r\n  (state) => state.loading\r\n)"
                },
                {
                    "name": "selectCoworkings",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/store/coworking/coworking.selectors.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "createSelector(\r\n  selectCoworkingState,\r\n  (state: CoworkingState) => state.coworkings\r\n)"
                },
                {
                    "name": "selectCoworkingState",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/store/coworking/coworking.selectors.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "createFeatureSelector<CoworkingState>('coworking')"
                },
                {
                    "name": "selectSelectedCoworking",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/store/coworking/coworking.selectors.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "createSelector(\r\n  selectCoworkingState,\r\n  (state) => state.selectedCoworking\r\n)"
                }
            ],
            "src/app/store/workspace/workspaces.selectors.ts": [
                {
                    "name": "selectSelectedWorkspace",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/store/workspace/workspaces.selectors.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "createSelector(\r\n  selectWorkspaceState,\r\n  (state) => state.selectedWorkspace\r\n)"
                },
                {
                    "name": "selectWorkspacesByCoworking",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/store/workspace/workspaces.selectors.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "createSelector(\r\n  selectWorkspaceState,\r\n  (state) => state.workspaces\r\n)"
                },
                {
                    "name": "selectWorkspacesByCoworkingError",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/store/workspace/workspaces.selectors.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "createSelector(\r\n  selectWorkspaceState,\r\n  (state) => state.error\r\n)"
                },
                {
                    "name": "selectWorkspacesByCoworkingLoading",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/store/workspace/workspaces.selectors.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "createSelector(\r\n  selectWorkspaceState,\r\n  (state) => state.loading\r\n)"
                },
                {
                    "name": "selectWorkspaceState",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/store/workspace/workspaces.selectors.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "createFeatureSelector<WorkspaceState>('workspace')"
                }
            ],
            "src/app/store/workspace/workspaces.reducer.ts": [
                {
                    "name": "workspaceReducer",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/store/workspace/workspaces.reducer.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "createReducer(\r\n  initialState,\r\n  on(WorkspaceActions.loadWorkspacesByCoworking, (state) => ({\r\n    ...state,\r\n    loading: true,\r\n    error: null,\r\n  })),\r\n  on(\r\n    WorkspaceActions.loadWorkspacesByCoworkingSuccess,\r\n    (state, { workspaces }) => ({\r\n      ...state,\r\n      workspaces,\r\n      loading: false,\r\n      error: null,\r\n    })\r\n  ),\r\n  on(WorkspaceActions.loadWorkspacesByCoworkingFailure, (state, { error }) => ({\r\n    ...state,\r\n    error,\r\n    loading: false,\r\n  })),\r\n  on(WorkspaceActions.loadWorkspaceById, (state) => ({\r\n    ...state,\r\n    loading: true,\r\n    error: null,\r\n  })),\r\n  on(WorkspaceActions.loadWorkspaceByIdSuccess, (state, { workspace }) => {\r\n    const workspaceExists = state.workspaces.some((w) => w.id === workspace.id);\r\n    return {\r\n      ...state,\r\n      workspaces: workspaceExists\r\n        ? state.workspaces.map((w) => (w.id === workspace.id ? workspace : w))\r\n        : [...state.workspaces, workspace],\r\n      selectedWorkspace: workspace,\r\n      loading: false,\r\n      error: null,\r\n    };\r\n  }),\r\n  on(WorkspaceActions.loadWorkspaceByIdFailure, (state, { error }) => ({\r\n    ...state,\r\n    loading: false,\r\n    error,\r\n  })),\r\n  on(WorkspaceActions.setSelectedWorkspace, (state, { workspace }) => ({\r\n    ...state,\r\n    selectedWorkspace: workspace,\r\n  }))\r\n)"
                }
            ]
        },
        "groupedFunctions": {},
        "groupedEnumerations": {},
        "groupedTypeAliases": {}
    },
    "routes": {
        "name": "<root>",
        "kind": "module",
        "className": "AppModule",
        "children": [
            {
                "name": "routes",
                "filename": "src/app/app-routing.module.ts",
                "module": "AppRoutingModule",
                "children": [
                    {
                        "path": "coworking/:id",
                        "component": "CoworkingDetailsComponent"
                    },
                    {
                        "path": "coworking-list",
                        "component": "CoworkingListComponent"
                    },
                    {
                        "path": "booking/:coworkingId",
                        "component": "BookingPageComponent"
                    },
                    {
                        "path": "my-bookings",
                        "component": "MyBookingsComponent"
                    },
                    {
                        "path": "",
                        "redirectTo": "/coworking-list",
                        "pathMatch": "full"
                    }
                ],
                "kind": "module"
            }
        ]
    },
    "coverage": {
        "count": 0,
        "status": "low",
        "files": [
            {
                "filePath": "src/app/app.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "AppComponent",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/booking/booking-confirmation/booking-confirmation.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "BookingConfirmationComponent",
                "coveragePercent": 0,
                "coverageCount": "0/13",
                "status": "low"
            },
            {
                "filePath": "src/app/booking/booking-page/booking-page.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "BookingPageComponent",
                "coveragePercent": 0,
                "coverageCount": "0/35",
                "status": "low"
            },
            {
                "filePath": "src/app/booking/capacity-label.pipe.ts",
                "type": "pipe",
                "linktype": "pipe",
                "name": "CapacityLabelPipe",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/booking/my-bookings/ai-assistant/ai-assistant.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "AiAssistantComponent",
                "coveragePercent": 0,
                "coverageCount": "0/8",
                "status": "low"
            },
            {
                "filePath": "src/app/booking/my-bookings/my-bookings.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "MyBookingsComponent",
                "coveragePercent": 0,
                "coverageCount": "0/8",
                "status": "low"
            },
            {
                "filePath": "src/app/booking/my-bookings/my-bookings.component.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "BookingDetails",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/app/contracts/Amenity.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "Amenity",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/app/contracts/Availability.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "Availability",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "src/app/contracts/Booking.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "Booking",
                "coveragePercent": 0,
                "coverageCount": "0/10",
                "status": "low"
            },
            {
                "filePath": "src/app/contracts/BookingRequest.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "BookingRequest",
                "coveragePercent": 0,
                "coverageCount": "0/7",
                "status": "low"
            },
            {
                "filePath": "src/app/contracts/Coworking.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "Coworking",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "src/app/contracts/Photo.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "Photo",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "src/app/contracts/Workspace.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "Workspace",
                "coveragePercent": 0,
                "coverageCount": "0/6",
                "status": "low"
            },
            {
                "filePath": "src/app/contracts/WorkspaceRequest.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "WorkspaceRequest",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/app/coworking/coworking-details/coworking-details.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "CoworkingDetailsComponent",
                "coveragePercent": 0,
                "coverageCount": "0/15",
                "status": "low"
            },
            {
                "filePath": "src/app/coworking/coworking-details/coworking-details.component.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "ExtendedWorkspace",
                "coveragePercent": 0,
                "coverageCount": "0/7",
                "status": "low"
            },
            {
                "filePath": "src/app/coworking/coworking-list/coworking-list.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "CoworkingListComponent",
                "coveragePercent": 0,
                "coverageCount": "0/6",
                "status": "low"
            },
            {
                "filePath": "src/app/directives/ClickOutsideDirective.ts",
                "type": "directive",
                "linktype": "directive",
                "name": "ClickOutsideDirective",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "src/app/header/header.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "HeaderComponent",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/services/availability.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "AvailabilityService",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "src/app/services/booking.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "BookingService",
                "coveragePercent": 0,
                "coverageCount": "0/9",
                "status": "low"
            },
            {
                "filePath": "src/app/services/coworking.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "CoworkingService",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "src/app/services/groq.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "GroqService",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "src/app/services/photo.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "PhotoService",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "src/app/services/workspace.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "WorkspaceService",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "src/app/services/workspaceAmenity.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "WorkspaceAmenityService",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/button/button.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "ButtonComponent",
                "coveragePercent": 0,
                "coverageCount": "0/11",
                "status": "low"
            },
            {
                "filePath": "src/app/store/amenity/amenity.actions.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "loadAmenitiesByWorkspace",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/store/amenity/amenity.actions.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "loadAmenitiesByWorkspaceFailure",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/store/amenity/amenity.actions.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "loadAmenitiesByWorkspaceSuccess",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/store/amenity/amenity.effects.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "AmenityEffects",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/app/store/amenity/amenity.reducer.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "amenityReducer",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/store/amenity/amenity.reducer.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "initialState",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/store/amenity/amenity.selectors.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "selectAllAmenities",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/store/amenity/amenity.selectors.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "selectAmenityError",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/store/amenity/amenity.selectors.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "selectAmenityLoading",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/store/amenity/amenity.selectors.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "selectAmenityState",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/store/amenity/amenity.state.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "AmenityState",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/app/store/availability/availability.actions.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "loadAvailabilitiesByWorkspace",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/store/availability/availability.actions.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "loadAvailabilitiesByWorkspaceFailure",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/store/availability/availability.actions.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "loadAvailabilitiesByWorkspaceSuccess",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/store/availability/availability.actions.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "loadAvailabilityById",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/store/availability/availability.actions.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "loadAvailabilityByIdFailure",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/store/availability/availability.actions.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "loadAvailabilityByIdSuccess",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/store/availability/availability.effects.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "AvailabilityEffects",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/app/store/availability/availability.reducer.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "availabilityReducer",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/store/availability/availability.reducer.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "initialState",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/store/availability/availability.selectors.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "selectAllAvailabilities",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/store/availability/availability.selectors.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "selectAvailabilityById",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/store/availability/availability.selectors.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "selectAvailabilityError",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/store/availability/availability.selectors.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "selectAvailabilityLoading",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/store/availability/availability.selectors.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "selectAvailabilityState",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/store/availability/availability.state.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "AvailabilityState",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "src/app/store/booking/booking.actions.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "createBooking",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/store/booking/booking.actions.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "createBookingFailure",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/store/booking/booking.actions.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "createBookingSuccess",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/store/booking/booking.actions.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "deleteBooking",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/store/booking/booking.actions.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "deleteBookingFailure",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/store/booking/booking.actions.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "deleteBookingSuccess",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/store/booking/booking.actions.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "loadAvailabilitiesByWorkspace",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/store/booking/booking.actions.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "loadAvailabilitiesByWorkspaceFailure",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/store/booking/booking.actions.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "loadAvailabilitiesByWorkspaceSuccess",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/store/booking/booking.actions.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "loadBookingById",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/store/booking/booking.actions.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "loadBookingByIdFailure",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/store/booking/booking.actions.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "loadBookingByIdSuccess",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/store/booking/booking.actions.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "loadBookings",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/store/booking/booking.actions.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "loadBookingsByUser",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/store/booking/booking.actions.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "loadBookingsByUserEmail",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/store/booking/booking.actions.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "loadBookingsByUserEmailFailure",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/store/booking/booking.actions.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "loadBookingsByUserEmailSuccess",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/store/booking/booking.actions.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "loadBookingsByUserFailure",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/store/booking/booking.actions.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "loadBookingsByUserSuccess",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/store/booking/booking.actions.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "loadBookingsFailure",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/store/booking/booking.actions.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "loadBookingsSuccess",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/store/booking/booking.actions.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "loadWorkspaces",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/store/booking/booking.actions.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "loadWorkspacesFailure",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/store/booking/booking.actions.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "loadWorkspacesSuccess",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/store/booking/booking.actions.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "resetBooking",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/store/booking/booking.effects.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "BookingEffects",
                "coveragePercent": 0,
                "coverageCount": "0/9",
                "status": "low"
            },
            {
                "filePath": "src/app/store/booking/booking.reducer.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "bookingReducer",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/store/booking/booking.reducer.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "initialState",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/store/booking/booking.selectors.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "selectAllBookings",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/store/booking/booking.selectors.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "selectAvailabilities",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/store/booking/booking.selectors.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "selectBookingError",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/store/booking/booking.selectors.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "selectBookingId",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/store/booking/booking.selectors.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "selectBookingLoading",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/store/booking/booking.selectors.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "selectBookingState",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/store/booking/booking.selectors.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "selectSelectedBooking",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/store/booking/booking.selectors.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "selectWorkspaces",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/store/booking/booking.state.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "BookingState",
                "coveragePercent": 0,
                "coverageCount": "0/8",
                "status": "low"
            },
            {
                "filePath": "src/app/store/coworking/coworking.actions.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "loadCoworkingById",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/store/coworking/coworking.actions.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "loadCoworkingByIdFailure",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/store/coworking/coworking.actions.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "loadCoworkingByIdSuccess",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/store/coworking/coworking.actions.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "loadCoworkings",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/store/coworking/coworking.actions.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "loadCoworkingsFailure",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/store/coworking/coworking.actions.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "loadCoworkingsSuccess",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/store/coworking/coworking.effects.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "CoworkingEffects",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/app/store/coworking/coworking.reducer.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "coworkingReducer",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/store/coworking/coworking.selectors.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "selectCoworkingError",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/store/coworking/coworking.selectors.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "selectCoworkingLoading",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/store/coworking/coworking.selectors.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "selectCoworkings",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/store/coworking/coworking.selectors.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "selectCoworkingState",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/store/coworking/coworking.selectors.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "selectSelectedCoworking",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/store/coworking/coworking.state.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "CoworkingState",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "src/app/store/coworking/coworking.state.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "initialState",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/store/photo/photo.actions.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "loadPhotosByCoworking",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/store/photo/photo.actions.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "loadPhotosByCoworkingFailure",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/store/photo/photo.actions.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "loadPhotosByCoworkingSuccess",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/store/photo/photo.actions.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "loadPhotosByWorkspace",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/store/photo/photo.actions.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "loadPhotosByWorkspaceFailure",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/store/photo/photo.actions.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "loadPhotosByWorkspaceSuccess",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/store/photo/photo.effects.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "PhotoEffects",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/app/store/photo/photo.reducer.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "initialState",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/store/photo/photo.reducer.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "photoReducer",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/store/photo/photo.selectors.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "selectAllPhotos",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/store/photo/photo.selectors.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "selectPhotoError",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/store/photo/photo.selectors.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "selectPhotoLoading",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/store/photo/photo.selectors.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "selectPhotosByCoworking",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/store/photo/photo.selectors.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "selectPhotosByWorkspace",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/store/photo/photo.selectors.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "selectPhotoState",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/store/photo/photo.state.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "PhotoState",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/app/store/workspace/workspace.actions.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "loadWorkspaceById",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/store/workspace/workspace.actions.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "loadWorkspaceByIdFailure",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/store/workspace/workspace.actions.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "loadWorkspaceByIdSuccess",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/store/workspace/workspace.actions.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "loadWorkspacesByCoworking",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/store/workspace/workspace.actions.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "loadWorkspacesByCoworkingFailure",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/store/workspace/workspace.actions.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "loadWorkspacesByCoworkingSuccess",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/store/workspace/workspace.actions.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "setSelectedWorkspace",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/store/workspace/workspace.effects.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "WorkspaceEffects",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/app/store/workspace/workspace.state.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "WorkspaceState",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "src/app/store/workspace/workspace.state.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "initialState",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/store/workspace/workspaces.reducer.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "workspaceReducer",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/store/workspace/workspaces.selectors.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "selectSelectedWorkspace",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/store/workspace/workspaces.selectors.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "selectWorkspacesByCoworking",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/store/workspace/workspaces.selectors.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "selectWorkspacesByCoworkingError",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/store/workspace/workspaces.selectors.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "selectWorkspacesByCoworkingLoading",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/store/workspace/workspaces.selectors.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "selectWorkspaceState",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            }
        ]
    }
}